{
	"id": "df3cbc22c81b38514f0c6e469953b74b",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.13",
	"solcLongVersion": "0.8.13+commit.abaa5c0e",
	"input": {
		"language": "Solidity",
		"sources": {
			"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"../token/ERC20.sol\";\nimport \"../token/SafeERC20.sol\";\nimport \"./Ownable.sol\";\n\n/**\n    Ensures that any contract that inherits from this contract is able to\n    withdraw funds that are accidentally received or stuck.\n */\n \ncontract Withdrawable is Ownable {\n    using SafeERC20 for ERC20;\n    address constant ETHER = address(0);\n\n    event LogWithdraw(\n        address indexed _from,\n        address indexed _assetAddress,\n        uint amount\n    );\n\n    /**\n     * @dev Withdraw asset.\n     * @param _assetAddress Asset to be withdrawn.\n     */\n    function withdraw(address _assetAddress) public onlyOwner {\n        uint assetBalance;\n        if (_assetAddress == ETHER) {\n            address self = address(this); \n            assetBalance = self.balance;\n            payable(msg.sender).transfer(assetBalance);\n        } else {\n            assetBalance = ERC20(_assetAddress).balanceOf(address(this));\n            ERC20(_assetAddress).safeTransfer(msg.sender, assetBalance);\n        }\n        emit LogWithdraw(msg.sender, _assetAddress, assetBalance);\n    }\n\n    \n}\n"
			},
			"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.13;\n\nimport \"../Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}"
			},
			"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.13;\n\nimport \"./IERC20.sol\";\nimport \"../math/SafeMath.sol\";\nimport \"../Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}"
			},
			"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.13;\n\nimport \"./IERC20.sol\";\nimport \"./IERC20Metadata.sol\";\nimport \"../Context.sol\";\n\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}"
			},
			"brownie_projects/bebu_finance/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.13;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}"
			},
			"brownie_projects/bebu_finance/contracts/utils/math/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}"
			},
			"brownie_projects/bebu_finance/contracts/utils/token/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity 0.8.13;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
			},
			"brownie_projects/bebu_finance/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.13;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"
			},
			"brownie_projects/bebu_finance/contracts/utils/token/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.13;\n\nimport \"./IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"brownie_projects/bebu_finance/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":126:9296  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":126:9296  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220686d5b750f0f6a9e8944ae5fe60f12f1e5983a3e049fecc54b06d22dbbcddb8b64736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220686d5b750f0f6a9e8944ae5fe60f12f1e5983a3e049fecc54b06d22dbbcddb8b64736f6c634300080d0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH9 0x6D5B750F0F6A9E8944 0xAE 0x5F 0xE6 0xF SLT CALL 0xE5 SWAP9 GASPRICE RETURNDATACOPY DIV SWAP16 0xEC 0xC5 0x4B MOD 0xD2 0x2D 0xBB 0xCD 0xDB DUP12 PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "126:9170:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;126:9170:0;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220686d5b750f0f6a9e8944ae5fe60f12f1e5983a3e049fecc54b06d22dbbcddb8b64736f6c634300080d0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH9 0x6D5B750F0F6A9E8944 0xAE 0x5F 0xE6 0xF SLT CALL 0xE5 SWAP9 GASPRICE RETURNDATACOPY DIV SWAP16 0xEC 0xC5 0x4B MOD 0xD2 0x2D 0xBB 0xCD 0xDB DUP12 PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "126:9170:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_revert(bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 126,
									"end": 9296,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "PUSH",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 126,
									"end": 9296,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220686d5b750f0f6a9e8944ae5fe60f12f1e5983a3e049fecc54b06d22dbbcddb8b64736f6c634300080d0033",
									".code": [
										{
											"begin": 126,
											"end": 9296,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 126,
											"end": 9296,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 126,
											"end": 9296,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 126,
											"end": 9296,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 126,
											"end": 9296,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 126,
											"end": 9296,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 126,
											"end": 9296,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 126,
											"end": 9296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 126,
											"end": 9296,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"brownie_projects/bebu_finance/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"brownie_projects/bebu_finance/contracts/utils/Address.sol\":{\"keccak256\":\"0x2254ff0365cbc4f80af2433d10890e0d4816c14f38a6e9e0c746f861ad434f1b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://17ecd670c7f9522306389b638a01d0b0e93156ec0e9c2cbe798b091e89474a32\",\"dweb:/ipfs/QmUzZpE98hpS8J4KtqcLxxTzdrP2rKeUWssF5GJA1e3dYw\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"brownie_projects/bebu_finance/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"brownie_projects/bebu_finance/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"brownie_projects/bebu_finance/contracts/utils/Context.sol\":{\"keccak256\":\"0x1cc748b2446aafb4c362edda845ca05b3b9994ebafc2c0ddbc894982c21305f0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://076e714ffbbacde572851624994b9457f6765136fa8f5613fd082f607ec1924b\",\"dweb:/ipfs/QmPZJrP5BSYeMe4ajmpbNS1p3nsfJbTbo7hBwHxJA133Uv\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"brownie_projects/bebu_finance/contracts/utils/Context.sol\":{\"keccak256\":\"0x1cc748b2446aafb4c362edda845ca05b3b9994ebafc2c0ddbc894982c21305f0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://076e714ffbbacde572851624994b9457f6765136fa8f5613fd082f607ec1924b\",\"dweb:/ipfs/QmPZJrP5BSYeMe4ajmpbNS1p3nsfJbTbo7hBwHxJA133Uv\"]},\"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":{\"keccak256\":\"0x43180eb9b0777a7f0b7ecfcae76c0e083c783a96119c9d8f1ffe3df9499968d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d408370b21bcea7451dae0b39224f27cccedc9a8056de889bcb676e41ae057b9\",\"dweb:/ipfs/QmeZ6z6zrNMoUNAVjPhUqCompoBoe2LSpqHrJrnr7WJUP6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 359,
								"contract": "brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol": {
				"Withdrawable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "_assetAddress",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "LogWithdraw",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_assetAddress",
									"type": "address"
								}
							],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							},
							"withdraw(address)": {
								"details": "Withdraw asset.",
								"params": {
									"_assetAddress": "Asset to be withdrawn."
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":288:1135  contract Withdrawable is Ownable {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":860:892  _transferOwnership(_msgSender()) */\n  tag_4\n    /* \"brownie_projects/bebu_finance/contracts/utils/Context.sol\":666:676  msg.sender */\n  caller\n    /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":860:878  _transferOwnership */\n  tag_7\n    /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":860:892  _transferOwnership(_msgSender()) */\n  jump\t// in\ntag_4:\n    /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":288:1135  contract Withdrawable is Ownable {... */\n  jump(tag_8)\n    /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":2209:2396  function _transferOwnership(address newOwner) internal virtual {... */\ntag_7:\n    /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":2282:2298  address oldOwner */\n  0x00\n    /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":2301:2307  _owner */\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":2317:2334  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  dup5\n  sstore\n    /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":2349:2389  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":2301:2307  _owner */\n  swap2\n  swap1\n  swap3\n  and\n  swap3\n  dup4\n  swap2\n    /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":2349:2389  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap2\n    /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":2282:2298  address oldOwner */\n  swap1\n    /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":2349:2389  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":2272:2396  {... */\n  pop\n    /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":2209:2396  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":288:1135  contract Withdrawable is Ownable {... */\ntag_8:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":288:1135  contract Withdrawable is Ownable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x51cff8d9\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_5\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":616:1127  function withdraw(address _assetAddress) public onlyOwner {... */\n    tag_3:\n      tag_7\n      tag_8\n      calldatasize\n      0x04\n      tag_9\n      jump\t// in\n    tag_8:\n      tag_10\n      jump\t// in\n    tag_7:\n      stop\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":1607:1708  function renounceOwnership() public virtual onlyOwner {... */\n    tag_4:\n      tag_7\n      tag_12\n      jump\t// in\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":975:1060  function owner() public view virtual returns (address) {... */\n    tag_5:\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":1021:1028  address */\n      0x00\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":1047:1053  _owner */\n      sload\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":975:1060  function owner() public view virtual returns (address) {... */\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":1047:1053  _owner */\n      swap1\n      swap3\n      and\n        /* \"#utility.yul\":451:502   */\n      dup3\n      mstore\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":975:1060  function owner() public view virtual returns (address) {... */\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n        /* \"#utility.yul\":439:441   */\n      0x20\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":975:1060  function owner() public view virtual returns (address) {... */\n      add\n      swap1\n      return\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":1857:2055  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_6:\n      tag_7\n      tag_18\n      calldatasize\n      0x04\n      tag_9\n      jump\t// in\n    tag_18:\n      tag_19\n      jump\t// in\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":616:1127  function withdraw(address _assetAddress) public onlyOwner {... */\n    tag_10:\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":1021:1028  address */\n      0x00\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":1047:1053  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"brownie_projects/bebu_finance/contracts/utils/Context.sol\":666:676  msg.sender */\n      caller\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":1187:1210  owner() == _msgSender() */\n      eq\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":1179:1247  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_24\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_25\n      swap1\n      tag_26\n      jump\t// in\n    tag_25:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_24:\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":684:701  uint assetBalance */\n      0x00\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":715:737  _assetAddress == ETHER */\n      dup3\n      and\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":711:1054  if (_assetAddress == ETHER) {... */\n      tag_28\n      jumpi\n      pop\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":837:879  payable(msg.sender).transfer(assetBalance) */\n      mload(0x40)\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":776:780  this */\n      address\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":811:823  self.balance */\n      dup1\n      balance\n      swap2\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":845:855  msg.sender */\n      caller\n      swap1\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":837:879  payable(msg.sender).transfer(assetBalance) */\n      dup4\n      iszero\n      0x08fc\n      mul\n      swap1\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":811:823  self.balance */\n      dup5\n      swap1\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":753:765  address self */\n      0x00\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":837:879  payable(msg.sender).transfer(assetBalance) */\n      dup2\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":753:765  address self */\n      dup2\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":837:879  payable(msg.sender).transfer(assetBalance) */\n      dup2\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":811:823  self.balance */\n      dup6\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":845:855  msg.sender */\n      dup9\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":837:879  payable(msg.sender).transfer(assetBalance) */\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n      dup1\n      iszero\n      tag_30\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_30:\n      pop\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":739:890  {... */\n      pop\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":711:1054  if (_assetAddress == ETHER) {... */\n      jump(tag_37)\n    tag_28:\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":925:970  ERC20(_assetAddress).balanceOf(address(this)) */\n      mload(0x40)\n      shl(0xe0, 0x70a08231)\n      dup2\n      mstore\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":964:968  this */\n      address\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":925:970  ERC20(_assetAddress).balanceOf(address(this)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":451:502   */\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":925:955  ERC20(_assetAddress).balanceOf */\n      dup4\n      and\n      swap1\n      0x70a08231\n      swap1\n        /* \"#utility.yul\":424:442   */\n      0x24\n      add\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":925:970  ERC20(_assetAddress).balanceOf(address(this)) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_34\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_34:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_35\n      swap2\n      swap1\n      tag_36\n      jump\t// in\n    tag_35:\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":910:970  assetBalance = ERC20(_assetAddress).balanceOf(address(this)) */\n      swap1\n      pop\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":984:1043  ERC20(_assetAddress).safeTransfer(msg.sender, assetBalance) */\n      tag_37\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":984:1017  ERC20(_assetAddress).safeTransfer */\n      dup4\n      and\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":1018:1028  msg.sender */\n      caller\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":910:970  assetBalance = ERC20(_assetAddress).balanceOf(address(this)) */\n      dup4\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":984:1017  ERC20(_assetAddress).safeTransfer */\n      tag_38\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":984:1043  ERC20(_assetAddress).safeTransfer(msg.sender, assetBalance) */\n      jump\t// in\n    tag_37:\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":1068:1120  LogWithdraw(msg.sender, _assetAddress, assetBalance) */\n      mload(0x40)\n        /* \"#utility.yul\":1209:1234   */\n      dup2\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":1068:1120  LogWithdraw(msg.sender, _assetAddress, assetBalance) */\n      dup4\n      and\n      swap1\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":1080:1090  msg.sender */\n      caller\n      swap1\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":1068:1120  LogWithdraw(msg.sender, _assetAddress, assetBalance) */\n      0x9207361cc2a04b9c7a06691df1eb87c6a63957ae88bf01d0d18c81e3d1272099\n      swap1\n        /* \"#utility.yul\":1197:1199   */\n      0x20\n        /* \"#utility.yul\":1182:1200   */\n      add\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":1068:1120  LogWithdraw(msg.sender, _assetAddress, assetBalance) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":674:1127  {... */\n      pop\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":616:1127  function withdraw(address _assetAddress) public onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":1607:1708  function renounceOwnership() public virtual onlyOwner {... */\n    tag_12:\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":1021:1028  address */\n      0x00\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":1047:1053  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"brownie_projects/bebu_finance/contracts/utils/Context.sol\":666:676  msg.sender */\n      caller\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":1187:1210  owner() == _msgSender() */\n      eq\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":1179:1247  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_44\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_25\n      swap1\n      tag_26\n      jump\t// in\n    tag_44:\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":1671:1701  _transferOwnership(address(0)) */\n      tag_47\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":1698:1699  0 */\n      0x00\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":1671:1689  _transferOwnership */\n      tag_48\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":1671:1701  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_47:\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":1607:1708  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":1857:2055  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_19:\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":1021:1028  address */\n      0x00\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":1047:1053  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"brownie_projects/bebu_finance/contracts/utils/Context.sol\":666:676  msg.sender */\n      caller\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":1187:1210  owner() == _msgSender() */\n      eq\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":1179:1247  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_53\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_25\n      swap1\n      tag_26\n      jump\t// in\n    tag_53:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":1945:1967  newOwner != address(0) */\n      dup2\n      and\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":1937:2010  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_56\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":1447:1449   */\n      0x20\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":1937:2010  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1429:1450   */\n      mstore\n        /* \"#utility.yul\":1486:1488   */\n      0x26\n        /* \"#utility.yul\":1466:1484   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":1459:1489   */\n      mstore\n        /* \"#utility.yul\":1525:1559   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":1505:1523   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":1498:1560   */\n      mstore\n      shl(0xd0, 0x646472657373)\n        /* \"#utility.yul\":1576:1594   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":1569:1605   */\n      mstore\n        /* \"#utility.yul\":1622:1641   */\n      0x84\n      add\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":1937:2010  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_25\n        /* \"#utility.yul\":1245:1647   */\n      jump\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":1937:2010  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n    tag_56:\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":2020:2048  _transferOwnership(newOwner) */\n      tag_59\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":2039:2047  newOwner */\n      dup2\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":2020:2038  _transferOwnership */\n      tag_48\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":2020:2048  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_59:\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":1857:2055  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol\":652:827  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n    tag_38:\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol\":761:819  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1844:1876   */\n      dup5\n      and\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol\":761:819  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":1826:1877   */\n      mstore\n        /* \"#utility.yul\":1893:1911   */\n      0x44\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":1886:1920   */\n      dup5\n      swap1\n      mstore\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol\":761:819  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      dup3\n      mload\n      dup1\n      dup4\n      sub\n      swap1\n      swap2\n      add\n      dup2\n      mstore\n        /* \"#utility.yul\":1799:1817   */\n      0x64\n      swap1\n      swap2\n      add\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol\":761:819  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      swap1\n      swap2\n      mstore\n      0x20\n      dup2\n      add\n      dup1\n      mload\n      sub(shl(0xe0, 0x01), 0x01)\n      and\n      shl(0xe0, 0xa9059cbb)\n      or\n      swap1\n      mstore\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol\":734:820  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      tag_62\n      swap1\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol\":754:759  token */\n      dup5\n      swap1\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol\":734:753  _callOptionalReturn */\n      tag_65\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol\":734:820  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      jump\t// in\n    tag_62:\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol\":652:827  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":2209:2396  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_48:\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":2282:2298  address oldOwner */\n      0x00\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":2301:2307  _owner */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":2317:2334  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      dup5\n      sstore\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":2349:2389  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":2301:2307  _owner */\n      swap2\n      swap1\n      swap3\n      and\n      swap3\n      dup4\n      swap2\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":2349:2389  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap2\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":2282:2298  address oldOwner */\n      swap1\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":2349:2389  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":2272:2396  {... */\n      pop\n        /* \"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":2209:2396  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol\":3000:3706  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_65:\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol\":3419:3442  bytes memory returndata */\n      0x00\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol\":3445:3514  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      tag_68\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol\":3473:3477  data */\n      dup3\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol\":3445:3514  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564\n      dup2\n      mstore\n      pop\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol\":3453:3458  token */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol\":3445:3472  address(token).functionCall */\n      and\n      tag_69\n      swap1\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol\":3445:3514  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_68:\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol\":3528:3545  returndata.length */\n      dup1\n      mload\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol\":3419:3514  bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap1\n      swap2\n      pop\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol\":3528:3549  returndata.length > 0 */\n      iszero\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol\":3524:3700  if (returndata.length > 0) {... */\n      tag_62\n      jumpi\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol\":3623:3633  returndata */\n      dup1\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol\":3612:3642  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_71\n      swap2\n      swap1\n      tag_72\n      jump\t// in\n    tag_71:\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol\":3604:3689  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_62\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2415:2417   */\n      0x20\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol\":3604:3689  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2397:2418   */\n      mstore\n        /* \"#utility.yul\":2454:2456   */\n      0x2a\n        /* \"#utility.yul\":2434:2452   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2427:2457   */\n      mstore\n        /* \"#utility.yul\":2493:2527   */\n      0x5361666545524332303a204552433230206f7065726174696f6e20646964206e\n        /* \"#utility.yul\":2473:2491   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2466:2528   */\n      mstore\n      shl(0xb2, 0x1bdd081cdd58d8d95959)\n        /* \"#utility.yul\":2544:2562   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":2537:2577   */\n      mstore\n        /* \"#utility.yul\":2594:2613   */\n      0x84\n      add\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol\":3604:3689  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_25\n        /* \"#utility.yul\":2213:2619   */\n      jump\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":4041:4264  function functionCall(... */\n    tag_69:\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":4174:4186  bytes memory */\n      0x60\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":4205:4257  functionCallWithValue(target, data, 0, errorMessage) */\n      tag_77\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":4227:4233  target */\n      dup5\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":4235:4239  data */\n      dup5\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":4241:4242  0 */\n      0x00\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":4244:4256  errorMessage */\n      dup6\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":4205:4226  functionCallWithValue */\n      tag_78\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":4205:4257  functionCallWithValue(target, data, 0, errorMessage) */\n      jump\t// in\n    tag_77:\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":4198:4257  return functionCallWithValue(target, data, 0, errorMessage) */\n      swap5\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":4041:4264  function functionCall(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":5098:5544  function functionCallWithValue(... */\n    tag_78:\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":5263:5275  bytes memory */\n      0x60\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":5320:5325  value */\n      dup3\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":5295:5316  address(this).balance */\n      selfbalance\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":5295:5325  address(this).balance >= value */\n      lt\n      iszero\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":5287:5368  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_80\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2826:2828   */\n      0x20\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":5287:5368  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2808:2829   */\n      mstore\n        /* \"#utility.yul\":2865:2867   */\n      0x26\n        /* \"#utility.yul\":2845:2863   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2838:2868   */\n      mstore\n        /* \"#utility.yul\":2904:2938   */\n      0x416464726573733a20696e73756666696369656e742062616c616e636520666f\n        /* \"#utility.yul\":2884:2902   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2877:2939   */\n      mstore\n      shl(0xd2, 0x1c8818d85b1b)\n        /* \"#utility.yul\":2955:2973   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":2948:2984   */\n      mstore\n        /* \"#utility.yul\":3001:3020   */\n      0x84\n      add\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":5287:5368  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_25\n        /* \"#utility.yul\":2624:3026   */\n      jump\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":5287:5368  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n    tag_80:\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":5379:5391  bool success */\n      0x00\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":5393:5416  bytes memory returndata */\n      dup1\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":5420:5426  target */\n      dup7\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":5420:5431  target.call */\n      and\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":5439:5444  value */\n      dup6\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":5446:5450  data */\n      dup8\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":5420:5451  target.call{value: value}(data) */\n      mload(0x40)\n      tag_83\n      swap2\n      swap1\n      tag_84\n      jump\t// in\n    tag_83:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_87\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_86)\n    tag_87:\n      0x60\n      swap2\n      pop\n    tag_86:\n      pop\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":5378:5451  (bool success, bytes memory returndata) = target.call{value: value}(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":5468:5537  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      tag_88\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":5495:5501  target */\n      dup8\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":5503:5510  success */\n      dup4\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":5512:5522  returndata */\n      dup4\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":5524:5536  errorMessage */\n      dup8\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":5468:5494  verifyCallResultFromTarget */\n      tag_89\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":5468:5537  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      jump\t// in\n    tag_88:\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":5461:5537  return verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      swap8\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":5098:5544  function functionCallWithValue(... */\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":7604:8232  function verifyCallResultFromTarget(... */\n    tag_89:\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":7784:7796  bytes memory */\n      0x60\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":7812:7819  success */\n      dup4\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":7808:8226  if (success) {... */\n      iszero\n      tag_91\n      jumpi\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":7839:7849  returndata */\n      dup3\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":7839:7856  returndata.length */\n      mload\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":7860:7861  0 */\n      0x00\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":7839:7861  returndata.length == 0 */\n      sub\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":7835:8121  if (returndata.length == 0) {... */\n      tag_95\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":1634:1653  account.code.length */\n      dup6\n      and\n      extcodesize\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":8046:8106  require(isContract(target), \"Address: call to non-contract\") */\n      tag_95\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3775:3777   */\n      0x20\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":8046:8106  require(isContract(target), \"Address: call to non-contract\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3757:3778   */\n      mstore\n        /* \"#utility.yul\":3814:3816   */\n      0x1d\n        /* \"#utility.yul\":3794:3812   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3787:3817   */\n      mstore\n        /* \"#utility.yul\":3853:3884   */\n      0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000\n        /* \"#utility.yul\":3833:3851   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3826:3885   */\n      mstore\n        /* \"#utility.yul\":3902:3920   */\n      0x64\n      add\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":8046:8106  require(isContract(target), \"Address: call to non-contract\") */\n      tag_25\n        /* \"#utility.yul\":3573:3926   */\n      jump\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":8046:8106  require(isContract(target), \"Address: call to non-contract\") */\n    tag_95:\n      pop\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":8141:8151  returndata */\n      dup2\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":8134:8151  return returndata */\n      jump(tag_77)\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":7808:8226  if (success) {... */\n    tag_91:\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":8182:8215  _revert(returndata, errorMessage) */\n      tag_77\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":8190:8200  returndata */\n      dup4\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":8202:8214  errorMessage */\n      dup4\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":8913:8930  returndata.length */\n      dup2\n      mload\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":8913:8934  returndata.length > 0 */\n      iszero\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":8909:9288  if (returndata.length > 0) {... */\n      tag_103\n      jumpi\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":9141:9151  returndata */\n      dup2\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":9135:9152  mload(returndata) */\n      mload\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":9197:9212  returndata_size */\n      dup1\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":9184:9194  returndata */\n      dup4\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":9180:9182  32 */\n      0x20\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":9176:9195  add(32, returndata) */\n      add\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":9169:9213  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":8909:9288  if (returndata.length > 0) {... */\n    tag_103:\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":9264:9276  errorMessage */\n      dup1\n        /* \"brownie_projects/bebu_finance/contracts/utils/Address.sol\":9257:9277  revert(errorMessage) */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_25\n      swap2\n      swap1\n      tag_106\n      jump\t// in\n        /* \"#utility.yul\":14:300   */\n    tag_9:\n        /* \"#utility.yul\":73:79   */\n      0x00\n        /* \"#utility.yul\":126:128   */\n      0x20\n        /* \"#utility.yul\":114:123   */\n      dup3\n        /* \"#utility.yul\":105:112   */\n      dup5\n        /* \"#utility.yul\":101:124   */\n      sub\n        /* \"#utility.yul\":97:129   */\n      slt\n        /* \"#utility.yul\":94:146   */\n      iszero\n      tag_110\n      jumpi\n        /* \"#utility.yul\":142:143   */\n      0x00\n        /* \"#utility.yul\":139:140   */\n      dup1\n        /* \"#utility.yul\":132:144   */\n      revert\n        /* \"#utility.yul\":94:146   */\n    tag_110:\n        /* \"#utility.yul\":168:191   */\n      dup2\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":220:251   */\n      dup2\n      and\n        /* \"#utility.yul\":210:252   */\n      dup2\n      eq\n        /* \"#utility.yul\":200:270   */\n      tag_111\n      jumpi\n        /* \"#utility.yul\":266:267   */\n      0x00\n        /* \"#utility.yul\":263:264   */\n      dup1\n        /* \"#utility.yul\":256:268   */\n      revert\n        /* \"#utility.yul\":200:270   */\n    tag_111:\n        /* \"#utility.yul\":289:294   */\n      swap4\n        /* \"#utility.yul\":14:300   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":513:869   */\n    tag_26:\n        /* \"#utility.yul\":715:717   */\n      0x20\n        /* \"#utility.yul\":697:718   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":734:752   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":727:757   */\n      mstore\n        /* \"#utility.yul\":793:827   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":788:790   */\n      0x40\n        /* \"#utility.yul\":773:791   */\n      dup3\n      add\n        /* \"#utility.yul\":766:828   */\n      mstore\n        /* \"#utility.yul\":860:862   */\n      0x60\n        /* \"#utility.yul\":845:863   */\n      add\n      swap1\n        /* \"#utility.yul\":513:869   */\n      jump\t// out\n        /* \"#utility.yul\":874:1058   */\n    tag_36:\n        /* \"#utility.yul\":944:950   */\n      0x00\n        /* \"#utility.yul\":997:999   */\n      0x20\n        /* \"#utility.yul\":985:994   */\n      dup3\n        /* \"#utility.yul\":976:983   */\n      dup5\n        /* \"#utility.yul\":972:995   */\n      sub\n        /* \"#utility.yul\":968:1000   */\n      slt\n        /* \"#utility.yul\":965:1017   */\n      iszero\n      tag_115\n      jumpi\n        /* \"#utility.yul\":1013:1014   */\n      0x00\n        /* \"#utility.yul\":1010:1011   */\n      dup1\n        /* \"#utility.yul\":1003:1015   */\n      revert\n        /* \"#utility.yul\":965:1017   */\n    tag_115:\n      pop\n        /* \"#utility.yul\":1036:1052   */\n      mload\n      swap2\n        /* \"#utility.yul\":874:1058   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1931:2208   */\n    tag_72:\n        /* \"#utility.yul\":1998:2004   */\n      0x00\n        /* \"#utility.yul\":2051:2053   */\n      0x20\n        /* \"#utility.yul\":2039:2048   */\n      dup3\n        /* \"#utility.yul\":2030:2037   */\n      dup5\n        /* \"#utility.yul\":2026:2049   */\n      sub\n        /* \"#utility.yul\":2022:2054   */\n      slt\n        /* \"#utility.yul\":2019:2071   */\n      iszero\n      tag_120\n      jumpi\n        /* \"#utility.yul\":2067:2068   */\n      0x00\n        /* \"#utility.yul\":2064:2065   */\n      dup1\n        /* \"#utility.yul\":2057:2069   */\n      revert\n        /* \"#utility.yul\":2019:2071   */\n    tag_120:\n        /* \"#utility.yul\":2099:2108   */\n      dup2\n        /* \"#utility.yul\":2093:2109   */\n      mload\n        /* \"#utility.yul\":2152:2157   */\n      dup1\n        /* \"#utility.yul\":2145:2158   */\n      iszero\n        /* \"#utility.yul\":2138:2159   */\n      iszero\n        /* \"#utility.yul\":2131:2136   */\n      dup2\n        /* \"#utility.yul\":2128:2160   */\n      eq\n        /* \"#utility.yul\":2118:2178   */\n      tag_111\n      jumpi\n        /* \"#utility.yul\":2174:2175   */\n      0x00\n        /* \"#utility.yul\":2171:2172   */\n      dup1\n        /* \"#utility.yul\":2164:2176   */\n      revert\n        /* \"#utility.yul\":3031:3289   */\n    tag_107:\n        /* \"#utility.yul\":3103:3104   */\n      0x00\n        /* \"#utility.yul\":3113:3226   */\n    tag_125:\n        /* \"#utility.yul\":3127:3133   */\n      dup4\n        /* \"#utility.yul\":3124:3125   */\n      dup2\n        /* \"#utility.yul\":3121:3134   */\n      lt\n        /* \"#utility.yul\":3113:3226   */\n      iszero\n      tag_127\n      jumpi\n        /* \"#utility.yul\":3203:3214   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":3197:3215   */\n      mload\n        /* \"#utility.yul\":3184:3195   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":3177:3216   */\n      mstore\n        /* \"#utility.yul\":3149:3151   */\n      0x20\n        /* \"#utility.yul\":3142:3152   */\n      add\n        /* \"#utility.yul\":3113:3226   */\n      jump(tag_125)\n    tag_127:\n        /* \"#utility.yul\":3244:3250   */\n      dup4\n        /* \"#utility.yul\":3241:3242   */\n      dup2\n        /* \"#utility.yul\":3238:3251   */\n      gt\n        /* \"#utility.yul\":3235:3283   */\n      iszero\n      tag_128\n      jumpi\n        /* \"#utility.yul\":3279:3280   */\n      0x00\n        /* \"#utility.yul\":3270:3276   */\n      dup5\n        /* \"#utility.yul\":3265:3268   */\n      dup5\n        /* \"#utility.yul\":3261:3277   */\n      add\n        /* \"#utility.yul\":3254:3281   */\n      mstore\n        /* \"#utility.yul\":3235:3283   */\n    tag_128:\n      pop\n        /* \"#utility.yul\":3031:3289   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3294:3568   */\n    tag_84:\n        /* \"#utility.yul\":3423:3426   */\n      0x00\n        /* \"#utility.yul\":3461:3467   */\n      dup3\n        /* \"#utility.yul\":3455:3468   */\n      mload\n        /* \"#utility.yul\":3477:3530   */\n      tag_130\n        /* \"#utility.yul\":3523:3529   */\n      dup2\n        /* \"#utility.yul\":3518:3521   */\n      dup5\n        /* \"#utility.yul\":3511:3515   */\n      0x20\n        /* \"#utility.yul\":3503:3509   */\n      dup8\n        /* \"#utility.yul\":3499:3516   */\n      add\n        /* \"#utility.yul\":3477:3530   */\n      tag_107\n      jump\t// in\n    tag_130:\n        /* \"#utility.yul\":3546:3562   */\n      swap2\n      swap1\n      swap2\n      add\n      swap3\n        /* \"#utility.yul\":3294:3568   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3931:4314   */\n    tag_106:\n        /* \"#utility.yul\":4080:4082   */\n      0x20\n        /* \"#utility.yul\":4069:4078   */\n      dup2\n        /* \"#utility.yul\":4062:4083   */\n      mstore\n        /* \"#utility.yul\":4043:4047   */\n      0x00\n        /* \"#utility.yul\":4112:4118   */\n      dup3\n        /* \"#utility.yul\":4106:4119   */\n      mload\n        /* \"#utility.yul\":4155:4161   */\n      dup1\n        /* \"#utility.yul\":4150:4152   */\n      0x20\n        /* \"#utility.yul\":4139:4148   */\n      dup5\n        /* \"#utility.yul\":4135:4153   */\n      add\n        /* \"#utility.yul\":4128:4162   */\n      mstore\n        /* \"#utility.yul\":4171:4237   */\n      tag_133\n        /* \"#utility.yul\":4230:4236   */\n      dup2\n        /* \"#utility.yul\":4225:4227   */\n      0x40\n        /* \"#utility.yul\":4214:4223   */\n      dup6\n        /* \"#utility.yul\":4210:4228   */\n      add\n        /* \"#utility.yul\":4205:4207   */\n      0x20\n        /* \"#utility.yul\":4197:4203   */\n      dup8\n        /* \"#utility.yul\":4193:4208   */\n      add\n        /* \"#utility.yul\":4171:4237   */\n      tag_107\n      jump\t// in\n    tag_133:\n        /* \"#utility.yul\":4298:4300   */\n      0x1f\n        /* \"#utility.yul\":4277:4292   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":4273:4302   */\n      and\n        /* \"#utility.yul\":4258:4303   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":4305:4307   */\n      0x40\n        /* \"#utility.yul\":4254:4308   */\n      add\n      swap3\n        /* \"#utility.yul\":3931:4314   */\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa26469706673582212200012b9f329b20fbc57529cfa9b8d966d93acc2c9e2192352dff1d004ea534d1164736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_375": {
									"entryPoint": null,
									"id": 375,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_341": {
									"entryPoint": null,
									"id": 341,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_455": {
									"entryPoint": 31,
									"id": 455,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61070d8061007e6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806351cff8d914610051578063715018a6146100665780638da5cb5b1461006e578063f2fde38b1461008d575b600080fd5b61006461005f3660046105b8565b6100a0565b005b6100646101de565b600054604080516001600160a01b039092168252519081900360200190f35b61006461009b3660046105b8565b610214565b6000546001600160a01b031633146100d35760405162461bcd60e51b81526004016100ca906105e8565b60405180910390fd5b60006001600160a01b03821661011c575060405130803191339083156108fc029084906000818181858888f19350505050158015610115573d6000803e3d6000fd5b505061019a565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610160573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610184919061061d565b905061019a6001600160a01b03831633836102af565b6040518181526001600160a01b0383169033907f9207361cc2a04b9c7a06691df1eb87c6a63957ae88bf01d0d18c81e3d12720999060200160405180910390a35050565b6000546001600160a01b031633146102085760405162461bcd60e51b81526004016100ca906105e8565b6102126000610306565b565b6000546001600160a01b0316331461023e5760405162461bcd60e51b81526004016100ca906105e8565b6001600160a01b0381166102a35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100ca565b6102ac81610306565b50565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610301908490610356565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006103ab826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166104289092919063ffffffff16565b80519091501561030157808060200190518101906103c99190610636565b6103015760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016100ca565b6060610437848460008561043f565b949350505050565b6060824710156104a05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016100ca565b600080866001600160a01b031685876040516104bc9190610688565b60006040518083038185875af1925050503d80600081146104f9576040519150601f19603f3d011682016040523d82523d6000602084013e6104fe565b606091505b509150915061050f8783838761051a565b979650505050505050565b60608315610589578251600003610582576001600160a01b0385163b6105825760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016100ca565b5081610437565b610437838381511561059e5781518083602001fd5b8060405162461bcd60e51b81526004016100ca91906106a4565b6000602082840312156105ca57600080fd5b81356001600160a01b03811681146105e157600080fd5b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561062f57600080fd5b5051919050565b60006020828403121561064857600080fd5b815180151581146105e157600080fd5b60005b8381101561067357818101518382015260200161065b565b83811115610682576000848401525b50505050565b6000825161069a818460208701610658565b9190910192915050565b60208152600082518060208401526106c3816040850160208701610658565b601f01601f1916919091016040019291505056fea26469706673582212200012b9f329b20fbc57529cfa9b8d966d93acc2c9e2192352dff1d004ea534d1164736f6c634300080d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A CALLER PUSH2 0x1F JUMP JUMPDEST PUSH2 0x6F JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x70D DUP1 PUSH2 0x7E PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x51CFF8D9 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x66 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x6E JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x8D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x64 PUSH2 0x5F CALLDATASIZE PUSH1 0x4 PUSH2 0x5B8 JUMP JUMPDEST PUSH2 0xA0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x64 PUSH2 0x1DE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x64 PUSH2 0x9B CALLDATASIZE PUSH1 0x4 PUSH2 0x5B8 JUMP JUMPDEST PUSH2 0x214 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xD3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCA SWAP1 PUSH2 0x5E8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x11C JUMPI POP PUSH1 0x40 MLOAD ADDRESS DUP1 BALANCE SWAP2 CALLER SWAP1 DUP4 ISZERO PUSH2 0x8FC MUL SWAP1 DUP5 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x115 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH2 0x19A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x160 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x184 SWAP2 SWAP1 PUSH2 0x61D JUMP JUMPDEST SWAP1 POP PUSH2 0x19A PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND CALLER DUP4 PUSH2 0x2AF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 CALLER SWAP1 PUSH32 0x9207361CC2A04B9C7A06691DF1EB87C6A63957AE88BF01D0D18C81E3D1272099 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x208 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCA SWAP1 PUSH2 0x5E8 JUMP JUMPDEST PUSH2 0x212 PUSH1 0x0 PUSH2 0x306 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x23E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCA SWAP1 PUSH2 0x5E8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x2A3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xCA JUMP JUMPDEST PUSH2 0x2AC DUP2 PUSH2 0x306 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x301 SWAP1 DUP5 SWAP1 PUSH2 0x356 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AB DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x428 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x301 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x3C9 SWAP2 SWAP1 PUSH2 0x636 JUMP JUMPDEST PUSH2 0x301 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xCA JUMP JUMPDEST PUSH1 0x60 PUSH2 0x437 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x43F JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x4A0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xCA JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x4BC SWAP2 SWAP1 PUSH2 0x688 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x4F9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4FE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x50F DUP8 DUP4 DUP4 DUP8 PUSH2 0x51A JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x589 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x582 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x582 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCA JUMP JUMPDEST POP DUP2 PUSH2 0x437 JUMP JUMPDEST PUSH2 0x437 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x59E JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCA SWAP2 SWAP1 PUSH2 0x6A4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x5E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x62F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x648 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x5E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x673 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x65B JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x682 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x69A DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x658 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x6C3 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x658 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STOP SLT 0xB9 RETURN 0x29 0xB2 0xF 0xBC JUMPI MSTORE SWAP13 STATICCALL SWAP12 DUP14 SWAP7 PUSH14 0x93ACC2C9E2192352DFF1D004EA53 0x4D GT PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "288:847:3:-:0;;;;;;;;;;;;-1:-1:-1;860:32:2;666:10:1;860:18:2;:32::i;:::-;288:847:3;;2209:187:2;2282:16;2301:6;;-1:-1:-1;;;;;2317:17:2;;;-1:-1:-1;;;;;;2317:17:2;;;;;;2349:40;;2301:6;;;;;;;2349:40;;2282:16;2349:40;2272:124;2209:187;:::o;288:847:3:-;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_callOptionalReturn_1777": {
									"entryPoint": 854,
									"id": 1777,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_341": {
									"entryPoint": null,
									"id": 341,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_revert_328": {
									"entryPoint": null,
									"id": 328,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_transferOwnership_455": {
									"entryPoint": 774,
									"id": 455,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@functionCallWithValue_153": {
									"entryPoint": 1087,
									"id": 153,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@functionCall_89": {
									"entryPoint": 1064,
									"id": 89,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@isContract_17": {
									"entryPoint": null,
									"id": 17,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@owner_384": {
									"entryPoint": null,
									"id": 384,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceOwnership_412": {
									"entryPoint": 478,
									"id": 412,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@safeTransfer_1585": {
									"entryPoint": 687,
									"id": 1585,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@transferOwnership_435": {
									"entryPoint": 532,
									"id": 435,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@verifyCallResultFromTarget_284": {
									"entryPoint": 1306,
									"id": 284,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@withdraw_549": {
									"entryPoint": 160,
									"id": 549,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 1464,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 1590,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256_fromMemory": {
									"entryPoint": 1565,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 1672,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 1700,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 1512,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 1624,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:4316:9",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:9",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "84:216:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "130:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "139:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "142:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "132:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "132:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "132:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "105:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "114:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "101:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "101:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "126:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "97:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "97:32:9"
															},
															"nodeType": "YulIf",
															"src": "94:52:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "155:36:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "181:9:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "168:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "168:23:9"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "159:5:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "254:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "263:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "266:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "256:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "256:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "256:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "213:5:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "224:5:9"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "239:3:9",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "244:1:9",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "235:3:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "235:11:9"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "248:1:9",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "231:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "231:19:9"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "220:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "220:31:9"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "210:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "210:42:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "203:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "203:50:9"
															},
															"nodeType": "YulIf",
															"src": "200:70:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "279:15:9",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "289:5:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "279:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "50:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "61:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "73:6:9",
														"type": ""
													}
												],
												"src": "14:286:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "406:102:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "416:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "428:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "439:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "424:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "424:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "416:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "458:9:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "473:6:9"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "489:3:9",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "494:1:9",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "485:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "485:11:9"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "498:1:9",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "481:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "481:19:9"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "469:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "469:32:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "451:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "451:51:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "451:51:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "375:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "386:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "397:4:9",
														"type": ""
													}
												],
												"src": "305:203:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "687:182:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "704:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "715:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "697:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "697:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "697:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "738:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "749:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "734:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "734:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "754:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "727:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "727:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "727:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "777:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "788:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "773:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "773:18:9"
																	},
																	{
																		"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "793:34:9",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "766:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "766:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "766:62:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "837:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "849:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "860:2:9",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "845:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "845:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "837:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "664:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "678:4:9",
														"type": ""
													}
												],
												"src": "513:356:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "955:103:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1001:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1010:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1013:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1003:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1003:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1003:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "976:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "985:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "972:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "972:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "997:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "968:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "968:32:9"
															},
															"nodeType": "YulIf",
															"src": "965:52:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1026:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1042:9:9"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1036:5:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1036:16:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1026:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "921:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "932:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "944:6:9",
														"type": ""
													}
												],
												"src": "874:184:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1164:76:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1174:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1186:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1197:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1182:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1182:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1174:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1216:9:9"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1227:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1209:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1209:25:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1209:25:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1133:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1144:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1155:4:9",
														"type": ""
													}
												],
												"src": "1063:177:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1419:228:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1436:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1447:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1429:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1429:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1429:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1470:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1481:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1466:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1466:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1486:2:9",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1459:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1459:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1459:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1509:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1520:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1505:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1505:18:9"
																	},
																	{
																		"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "1525:34:9",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1498:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1498:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1498:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1580:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1591:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1576:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1576:18:9"
																	},
																	{
																		"hexValue": "646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "1596:8:9",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1569:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1569:36:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1569:36:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1614:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1626:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1637:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1622:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1622:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1614:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1396:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1410:4:9",
														"type": ""
													}
												],
												"src": "1245:402:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1781:145:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1791:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1803:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1814:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1799:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1799:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1791:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1833:9:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1848:6:9"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1864:3:9",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1869:1:9",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "1860:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1860:11:9"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1873:1:9",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "1856:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1856:19:9"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1844:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1844:32:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1826:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1826:51:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1826:51:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1897:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1908:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1893:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1893:18:9"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "1913:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1886:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1886:34:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1886:34:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1742:9:9",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1753:6:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1761:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1772:4:9",
														"type": ""
													}
												],
												"src": "1652:274:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2009:199:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2055:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2064:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2067:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2057:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2057:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2057:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2030:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2039:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2026:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2026:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2051:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2022:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2022:32:9"
															},
															"nodeType": "YulIf",
															"src": "2019:52:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2080:29:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2099:9:9"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2093:5:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2093:16:9"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "2084:5:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2162:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2171:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2174:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2164:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2164:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2164:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2131:5:9"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "2152:5:9"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "2145:6:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2145:13:9"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "2138:6:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2138:21:9"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "2128:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2128:32:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2121:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2121:40:9"
															},
															"nodeType": "YulIf",
															"src": "2118:60:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2187:15:9",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2197:5:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2187:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1975:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1986:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1998:6:9",
														"type": ""
													}
												],
												"src": "1931:277:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2387:232:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2404:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2415:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2397:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2397:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2397:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2438:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2449:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2434:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2434:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2454:2:9",
																		"type": "",
																		"value": "42"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2427:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2427:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2427:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2477:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2488:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2473:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2473:18:9"
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2493:34:9",
																		"type": "",
																		"value": "SafeERC20: ERC20 operation did n"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2466:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2466:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2466:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2548:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2559:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2544:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2544:18:9"
																	},
																	{
																		"hexValue": "6f742073756363656564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2564:12:9",
																		"type": "",
																		"value": "ot succeed"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2537:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2537:40:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2537:40:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2586:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2598:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2609:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2594:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2594:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2586:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2364:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2378:4:9",
														"type": ""
													}
												],
												"src": "2213:406:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2798:228:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2815:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2826:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2808:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2808:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2808:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2849:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2860:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2845:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2845:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2865:2:9",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2838:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2838:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2838:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2888:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2899:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2884:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2884:18:9"
																	},
																	{
																		"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2904:34:9",
																		"type": "",
																		"value": "Address: insufficient balance fo"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2877:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2877:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2877:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2959:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2970:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2955:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2955:18:9"
																	},
																	{
																		"hexValue": "722063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2975:8:9",
																		"type": "",
																		"value": "r call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2948:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2948:36:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2948:36:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2993:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3005:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3016:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3001:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3001:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2993:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2775:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2789:4:9",
														"type": ""
													}
												],
												"src": "2624:402:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3084:205:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3094:10:9",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3103:1:9",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "3098:1:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3163:63:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "3188:3:9"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "3193:1:9"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "3184:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3184:11:9"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "3207:3:9"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "3212:1:9"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "3203:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "3203:11:9"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "3197:5:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3197:18:9"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "3177:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3177:39:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3177:39:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "3124:1:9"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3127:6:9"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "3121:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3121:13:9"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "3135:19:9",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "3137:15:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "3146:1:9"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3149:2:9",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "3142:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3142:10:9"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "3137:1:9"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "3117:3:9",
																"statements": []
															},
															"src": "3113:113:9"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3252:31:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "3265:3:9"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "3270:6:9"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "3261:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3261:16:9"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3279:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "3254:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3254:27:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3254:27:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "3241:1:9"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3244:6:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3238:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3238:13:9"
															},
															"nodeType": "YulIf",
															"src": "3235:48:9"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "3062:3:9",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "3067:3:9",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "3072:6:9",
														"type": ""
													}
												],
												"src": "3031:258:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3431:137:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3441:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "3461:6:9"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3455:5:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3455:13:9"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "3445:6:9",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3503:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3511:4:9",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3499:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3499:17:9"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3518:3:9"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3523:6:9"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "3477:21:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3477:53:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3477:53:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3539:23:9",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3550:3:9"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3555:6:9"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3546:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3546:16:9"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "3539:3:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3407:3:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3412:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3423:3:9",
														"type": ""
													}
												],
												"src": "3294:274:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3747:179:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3764:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3775:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3757:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3757:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3757:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3798:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3809:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3794:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3794:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3814:2:9",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3787:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3787:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3787:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3837:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3848:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3833:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3833:18:9"
																	},
																	{
																		"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3853:31:9",
																		"type": "",
																		"value": "Address: call to non-contract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3826:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3826:59:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3826:59:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3894:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3906:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3917:2:9",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3902:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3902:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3894:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3724:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3738:4:9",
														"type": ""
													}
												],
												"src": "3573:353:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4052:262:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4069:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4080:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4062:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4062:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4062:21:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4092:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4112:6:9"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4106:5:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4106:13:9"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "4096:6:9",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4139:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4150:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4135:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4135:18:9"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "4155:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4128:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4128:34:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4128:34:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "4197:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4205:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4193:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4193:15:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4214:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4225:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4210:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4210:18:9"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "4230:6:9"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "4171:21:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4171:66:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4171:66:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4246:62:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4262:9:9"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "4281:6:9"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4289:2:9",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "4277:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4277:15:9"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4298:2:9",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "4294:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4294:7:9"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "4273:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4273:29:9"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4258:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4258:45:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4305:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4254:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4254:54:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4246:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4021:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4032:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4043:4:9",
														"type": ""
													}
												],
												"src": "3931:383:9"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n}",
									"id": 9,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506004361061004c5760003560e01c806351cff8d914610051578063715018a6146100665780638da5cb5b1461006e578063f2fde38b1461008d575b600080fd5b61006461005f3660046105b8565b6100a0565b005b6100646101de565b600054604080516001600160a01b039092168252519081900360200190f35b61006461009b3660046105b8565b610214565b6000546001600160a01b031633146100d35760405162461bcd60e51b81526004016100ca906105e8565b60405180910390fd5b60006001600160a01b03821661011c575060405130803191339083156108fc029084906000818181858888f19350505050158015610115573d6000803e3d6000fd5b505061019a565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610160573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610184919061061d565b905061019a6001600160a01b03831633836102af565b6040518181526001600160a01b0383169033907f9207361cc2a04b9c7a06691df1eb87c6a63957ae88bf01d0d18c81e3d12720999060200160405180910390a35050565b6000546001600160a01b031633146102085760405162461bcd60e51b81526004016100ca906105e8565b6102126000610306565b565b6000546001600160a01b0316331461023e5760405162461bcd60e51b81526004016100ca906105e8565b6001600160a01b0381166102a35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100ca565b6102ac81610306565b50565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610301908490610356565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006103ab826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166104289092919063ffffffff16565b80519091501561030157808060200190518101906103c99190610636565b6103015760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016100ca565b6060610437848460008561043f565b949350505050565b6060824710156104a05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016100ca565b600080866001600160a01b031685876040516104bc9190610688565b60006040518083038185875af1925050503d80600081146104f9576040519150601f19603f3d011682016040523d82523d6000602084013e6104fe565b606091505b509150915061050f8783838761051a565b979650505050505050565b60608315610589578251600003610582576001600160a01b0385163b6105825760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016100ca565b5081610437565b610437838381511561059e5781518083602001fd5b8060405162461bcd60e51b81526004016100ca91906106a4565b6000602082840312156105ca57600080fd5b81356001600160a01b03811681146105e157600080fd5b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561062f57600080fd5b5051919050565b60006020828403121561064857600080fd5b815180151581146105e157600080fd5b60005b8381101561067357818101518382015260200161065b565b83811115610682576000848401525b50505050565b6000825161069a818460208701610658565b9190910192915050565b60208152600082518060208401526106c3816040850160208701610658565b601f01601f1916919091016040019291505056fea26469706673582212200012b9f329b20fbc57529cfa9b8d966d93acc2c9e2192352dff1d004ea534d1164736f6c634300080d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x51CFF8D9 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x66 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x6E JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x8D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x64 PUSH2 0x5F CALLDATASIZE PUSH1 0x4 PUSH2 0x5B8 JUMP JUMPDEST PUSH2 0xA0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x64 PUSH2 0x1DE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x64 PUSH2 0x9B CALLDATASIZE PUSH1 0x4 PUSH2 0x5B8 JUMP JUMPDEST PUSH2 0x214 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xD3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCA SWAP1 PUSH2 0x5E8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x11C JUMPI POP PUSH1 0x40 MLOAD ADDRESS DUP1 BALANCE SWAP2 CALLER SWAP1 DUP4 ISZERO PUSH2 0x8FC MUL SWAP1 DUP5 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x115 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH2 0x19A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x160 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x184 SWAP2 SWAP1 PUSH2 0x61D JUMP JUMPDEST SWAP1 POP PUSH2 0x19A PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND CALLER DUP4 PUSH2 0x2AF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 CALLER SWAP1 PUSH32 0x9207361CC2A04B9C7A06691DF1EB87C6A63957AE88BF01D0D18C81E3D1272099 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x208 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCA SWAP1 PUSH2 0x5E8 JUMP JUMPDEST PUSH2 0x212 PUSH1 0x0 PUSH2 0x306 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x23E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCA SWAP1 PUSH2 0x5E8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x2A3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xCA JUMP JUMPDEST PUSH2 0x2AC DUP2 PUSH2 0x306 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x301 SWAP1 DUP5 SWAP1 PUSH2 0x356 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AB DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x428 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x301 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x3C9 SWAP2 SWAP1 PUSH2 0x636 JUMP JUMPDEST PUSH2 0x301 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xCA JUMP JUMPDEST PUSH1 0x60 PUSH2 0x437 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x43F JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x4A0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xCA JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x4BC SWAP2 SWAP1 PUSH2 0x688 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x4F9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4FE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x50F DUP8 DUP4 DUP4 DUP8 PUSH2 0x51A JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x589 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x582 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x582 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCA JUMP JUMPDEST POP DUP2 PUSH2 0x437 JUMP JUMPDEST PUSH2 0x437 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x59E JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCA SWAP2 SWAP1 PUSH2 0x6A4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x5E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x62F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x648 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x5E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x673 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x65B JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x682 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x69A DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x658 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x6C3 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x658 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STOP SLT 0xB9 RETURN 0x29 0xB2 0xF 0xBC JUMPI MSTORE SWAP13 STATICCALL SWAP12 DUP14 SWAP7 PUSH14 0x93ACC2C9E2192352DFF1D004EA53 0x4D GT PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "288:847:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;616:511;;;;;;:::i;:::-;;:::i;:::-;;1607:101:2;;;:::i;975:85::-;1021:7;1047:6;975:85;;;-1:-1:-1;;;;;1047:6:2;;;451:51:9;;975:85:2;;;;;439:2:9;975:85:2;;;1857:198;;;;;;:::i;:::-;;:::i;616:511:3:-;1021:7:2;1047:6;-1:-1:-1;;;;;1047:6:2;666:10:1;1187:23:2;1179:68;;;;-1:-1:-1;;;1179:68:2;;;;;;;:::i;:::-;;;;;;;;;684:17:3::1;-1:-1:-1::0;;;;;715:22:3;::::1;711:343;;-1:-1:-1::0;837:42:3::1;::::0;776:4:::1;811:12:::0;::::1;::::0;845:10:::1;::::0;837:42;::::1;;;::::0;811:12;;753::::1;837:42:::0;753:12;837:42;811:12;845:10;837:42;::::1;;;;;;;;;;;;;::::0;::::1;;;;;;739:151;711:343;;;925:45;::::0;-1:-1:-1;;;925:45:3;;964:4:::1;925:45;::::0;::::1;451:51:9::0;-1:-1:-1;;;;;925:30:3;::::1;::::0;::::1;::::0;424:18:9;;925:45:3::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;910:60:::0;-1:-1:-1;984:59:3::1;-1:-1:-1::0;;;;;984:33:3;::::1;1018:10;910:60:::0;984:33:::1;:59::i;:::-;1068:52;::::0;1209:25:9;;;-1:-1:-1;;;;;1068:52:3;::::1;::::0;1080:10:::1;::::0;1068:52:::1;::::0;1197:2:9;1182:18;1068:52:3::1;;;;;;;674:453;616:511:::0;:::o;1607:101:2:-;1021:7;1047:6;-1:-1:-1;;;;;1047:6:2;666:10:1;1187:23:2;1179:68;;;;-1:-1:-1;;;1179:68:2;;;;;;;:::i;:::-;1671:30:::1;1698:1;1671:18;:30::i;:::-;1607:101::o:0;1857:198::-;1021:7;1047:6;-1:-1:-1;;;;;1047:6:2;666:10:1;1187:23:2;1179:68;;;;-1:-1:-1;;;1179:68:2;;;;;;;:::i;:::-;-1:-1:-1;;;;;1945:22:2;::::1;1937:73;;;::::0;-1:-1:-1;;;1937:73:2;;1447:2:9;1937:73:2::1;::::0;::::1;1429:21:9::0;1486:2;1466:18;;;1459:30;1525:34;1505:18;;;1498:62;-1:-1:-1;;;1576:18:9;;;1569:36;1622:19;;1937:73:2::1;1245:402:9::0;1937:73:2::1;2020:28;2039:8;2020:18;:28::i;:::-;1857:198:::0;:::o;652:175:8:-;761:58;;;-1:-1:-1;;;;;1844:32:9;;761:58:8;;;1826:51:9;1893:18;;;;1886:34;;;761:58:8;;;;;;;;;;1799:18:9;;;;761:58:8;;;;;;;;-1:-1:-1;;;;;761:58:8;-1:-1:-1;;;761:58:8;;;734:86;;754:5;;734:19;:86::i;:::-;652:175;;;:::o;2209:187:2:-;2282:16;2301:6;;-1:-1:-1;;;;;2317:17:2;;;-1:-1:-1;;;;;;2317:17:2;;;;;;2349:40;;2301:6;;;;;;;2349:40;;2282:16;2349:40;2272:124;2209:187;:::o;3000:706:8:-;3419:23;3445:69;3473:4;3445:69;;;;;;;;;;;;;;;;;3453:5;-1:-1:-1;;;;;3445:27:8;;;:69;;;;;:::i;:::-;3528:17;;3419:95;;-1:-1:-1;3528:21:8;3524:176;;3623:10;3612:30;;;;;;;;;;;;:::i;:::-;3604:85;;;;-1:-1:-1;;;3604:85:8;;2415:2:9;3604:85:8;;;2397:21:9;2454:2;2434:18;;;2427:30;2493:34;2473:18;;;2466:62;-1:-1:-1;;;2544:18:9;;;2537:40;2594:19;;3604:85:8;2213:406:9;4041:223:0;4174:12;4205:52;4227:6;4235:4;4241:1;4244:12;4205:21;:52::i;:::-;4198:59;4041:223;-1:-1:-1;;;;4041:223:0:o;5098:446::-;5263:12;5320:5;5295:21;:30;;5287:81;;;;-1:-1:-1;;;5287:81:0;;2826:2:9;5287:81:0;;;2808:21:9;2865:2;2845:18;;;2838:30;2904:34;2884:18;;;2877:62;-1:-1:-1;;;2955:18:9;;;2948:36;3001:19;;5287:81:0;2624:402:9;5287:81:0;5379:12;5393:23;5420:6;-1:-1:-1;;;;;5420:11:0;5439:5;5446:4;5420:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5378:73;;;;5468:69;5495:6;5503:7;5512:10;5524:12;5468:26;:69::i;:::-;5461:76;5098:446;-1:-1:-1;;;;;;;5098:446:0:o;7604:628::-;7784:12;7812:7;7808:418;;;7839:10;:17;7860:1;7839:22;7835:286;;-1:-1:-1;;;;;1634:19:0;;;8046:60;;;;-1:-1:-1;;;8046:60:0;;3775:2:9;8046:60:0;;;3757:21:9;3814:2;3794:18;;;3787:30;3853:31;3833:18;;;3826:59;3902:18;;8046:60:0;3573:353:9;8046:60:0;-1:-1:-1;8141:10:0;8134:17;;7808:418;8182:33;8190:10;8202:12;8913:17;;:21;8909:379;;9141:10;9135:17;9197:15;9184:10;9180:2;9176:19;9169:44;8909:379;9264:12;9257:20;;-1:-1:-1;;;9257:20:0;;;;;;;;:::i;14:286:9:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;168:23;;-1:-1:-1;;;;;220:31:9;;210:42;;200:70;;266:1;263;256:12;200:70;289:5;14:286;-1:-1:-1;;;14:286:9:o;513:356::-;715:2;697:21;;;734:18;;;727:30;793:34;788:2;773:18;;766:62;860:2;845:18;;513:356::o;874:184::-;944:6;997:2;985:9;976:7;972:23;968:32;965:52;;;1013:1;1010;1003:12;965:52;-1:-1:-1;1036:16:9;;874:184;-1:-1:-1;874:184:9:o;1931:277::-;1998:6;2051:2;2039:9;2030:7;2026:23;2022:32;2019:52;;;2067:1;2064;2057:12;2019:52;2099:9;2093:16;2152:5;2145:13;2138:21;2131:5;2128:32;2118:60;;2174:1;2171;2164:12;3031:258;3103:1;3113:113;3127:6;3124:1;3121:13;3113:113;;;3203:11;;;3197:18;3184:11;;;3177:39;3149:2;3142:10;3113:113;;;3244:6;3241:1;3238:13;3235:48;;;3279:1;3270:6;3265:3;3261:16;3254:27;3235:48;;3031:258;;;:::o;3294:274::-;3423:3;3461:6;3455:13;3477:53;3523:6;3518:3;3511:4;3503:6;3499:17;3477:53;:::i;:::-;3546:16;;;;;3294:274;-1:-1:-1;;3294:274:9:o;3931:383::-;4080:2;4069:9;4062:21;4043:4;4112:6;4106:13;4155:6;4150:2;4139:9;4135:18;4128:34;4171:66;4230:6;4225:2;4214:9;4210:18;4205:2;4197:6;4193:15;4171:66;:::i;:::-;4298:2;4277:15;-1:-1:-1;;4273:29:9;4258:45;;;;4305:2;4254:54;;3931:383;-1:-1:-1;;3931:383:9:o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "361000",
								"executionCost": "26240",
								"totalCost": "387240"
							},
							"external": {
								"owner()": "2314",
								"renounceOwnership()": "28114",
								"transferOwnership(address)": "28318",
								"withdraw(address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 288,
									"end": 1135,
									"name": "PUSH",
									"source": 3,
									"value": "80"
								},
								{
									"begin": 288,
									"end": 1135,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 288,
									"end": 1135,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 288,
									"end": 1135,
									"name": "CALLVALUE",
									"source": 3
								},
								{
									"begin": 288,
									"end": 1135,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 288,
									"end": 1135,
									"name": "ISZERO",
									"source": 3
								},
								{
									"begin": 288,
									"end": 1135,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 288,
									"end": 1135,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 288,
									"end": 1135,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 288,
									"end": 1135,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 288,
									"end": 1135,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 288,
									"end": 1135,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 288,
									"end": 1135,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 860,
									"end": 892,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 666,
									"end": 676,
									"name": "CALLER",
									"source": 1
								},
								{
									"begin": 860,
									"end": 878,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "7"
								},
								{
									"begin": 860,
									"end": 892,
									"name": "JUMP",
									"source": 2,
									"value": "[in]"
								},
								{
									"begin": 860,
									"end": 892,
									"name": "tag",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 860,
									"end": 892,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 288,
									"end": 1135,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "8"
								},
								{
									"begin": 288,
									"end": 1135,
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 2209,
									"end": 2396,
									"name": "tag",
									"source": 2,
									"value": "7"
								},
								{
									"begin": 2209,
									"end": 2396,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2282,
									"end": 2298,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 2301,
									"end": 2307,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2301,
									"end": 2307,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2317,
									"end": 2334,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 2317,
									"end": 2334,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2317,
									"end": 2334,
									"name": "AND",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2317,
									"end": 2334,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 2317,
									"end": 2334,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 2317,
									"end": 2334,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2317,
									"end": 2334,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 2317,
									"end": 2334,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 2317,
									"end": 2334,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 2349,
									"end": 2389,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 2349,
									"end": 2389,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2301,
									"end": 2307,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 2301,
									"end": 2307,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2301,
									"end": 2307,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 2301,
									"end": 2307,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 2301,
									"end": 2307,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 2301,
									"end": 2307,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 2301,
									"end": 2307,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 2349,
									"end": 2389,
									"name": "PUSH",
									"source": 2,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2349,
									"end": 2389,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 2282,
									"end": 2298,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2349,
									"end": 2389,
									"name": "LOG3",
									"source": 2
								},
								{
									"begin": 2272,
									"end": 2396,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2209,
									"end": 2396,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2209,
									"end": 2396,
									"name": "JUMP",
									"source": 2,
									"value": "[out]"
								},
								{
									"begin": 288,
									"end": 1135,
									"name": "tag",
									"source": 3,
									"value": "8"
								},
								{
									"begin": 288,
									"end": 1135,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 288,
									"end": 1135,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 288,
									"end": 1135,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 288,
									"end": 1135,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 288,
									"end": 1135,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 288,
									"end": 1135,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 288,
									"end": 1135,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 288,
									"end": 1135,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212200012b9f329b20fbc57529cfa9b8d966d93acc2c9e2192352dff1d004ea534d1164736f6c634300080d0033",
									".code": [
										{
											"begin": 288,
											"end": 1135,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "tag",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "SHR",
											"source": 3
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "PUSH",
											"source": 3,
											"value": "51CFF8D9"
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "PUSH",
											"source": 3,
											"value": "715018A6"
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "PUSH",
											"source": 3,
											"value": "8DA5CB5B"
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "PUSH",
											"source": 3,
											"value": "F2FDE38B"
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "tag",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 288,
											"end": 1135,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 616,
											"end": 1127,
											"name": "tag",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 616,
											"end": 1127,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 616,
											"end": 1127,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "7"
										},
										{
											"begin": 616,
											"end": 1127,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 616,
											"end": 1127,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 616,
											"end": 1127,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 616,
											"end": 1127,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 616,
											"end": 1127,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 616,
											"end": 1127,
											"name": "tag",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 616,
											"end": 1127,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 616,
											"end": 1127,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 616,
											"end": 1127,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 616,
											"end": 1127,
											"name": "tag",
											"source": 3,
											"value": "7"
										},
										{
											"begin": 616,
											"end": 1127,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 616,
											"end": 1127,
											"name": "STOP",
											"source": 3
										},
										{
											"begin": 1607,
											"end": 1708,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1607,
											"end": 1708,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1607,
											"end": 1708,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 1607,
											"end": 1708,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 1607,
											"end": 1708,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 975,
											"end": 1060,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 975,
											"end": 1060,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1021,
											"end": 1028,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1047,
											"end": 1053,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 975,
											"end": 1060,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 975,
											"end": 1060,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 975,
											"end": 1060,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1047,
											"end": 1053,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1047,
											"end": 1053,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1047,
											"end": 1053,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 451,
											"end": 502,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 451,
											"end": 502,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 975,
											"end": 1060,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 975,
											"end": 1060,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 975,
											"end": 1060,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 975,
											"end": 1060,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 975,
											"end": 1060,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 439,
											"end": 441,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 975,
											"end": 1060,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 975,
											"end": 1060,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 975,
											"end": 1060,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 1857,
											"end": 2055,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 1857,
											"end": 2055,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1857,
											"end": 2055,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 1857,
											"end": 2055,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 1857,
											"end": 2055,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1857,
											"end": 2055,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1857,
											"end": 2055,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 1857,
											"end": 2055,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1857,
											"end": 2055,
											"name": "tag",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 1857,
											"end": 2055,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1857,
											"end": 2055,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 1857,
											"end": 2055,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 616,
											"end": 1127,
											"name": "tag",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 616,
											"end": 1127,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1021,
											"end": 1028,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1047,
											"end": 1053,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1047,
											"end": 1053,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 666,
											"end": 676,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 1187,
											"end": 1210,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "tag",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "tag",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 684,
											"end": 701,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 715,
											"end": 737,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 715,
											"end": 737,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 711,
											"end": 1054,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 711,
											"end": 1054,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 837,
											"end": 879,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 837,
											"end": 879,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 776,
											"end": 780,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 811,
											"end": 823,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 811,
											"end": 823,
											"name": "BALANCE",
											"source": 3
										},
										{
											"begin": 811,
											"end": 823,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 845,
											"end": 855,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 845,
											"end": 855,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 837,
											"end": 879,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 837,
											"end": 879,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 837,
											"end": 879,
											"name": "PUSH",
											"source": 3,
											"value": "8FC"
										},
										{
											"begin": 837,
											"end": 879,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 837,
											"end": 879,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 811,
											"end": 823,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 811,
											"end": 823,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 753,
											"end": 765,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 837,
											"end": 879,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 753,
											"end": 765,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 837,
											"end": 879,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 811,
											"end": 823,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 845,
											"end": 855,
											"name": "DUP9",
											"source": 3
										},
										{
											"begin": 837,
											"end": 879,
											"name": "DUP9",
											"source": 3
										},
										{
											"begin": 837,
											"end": 879,
											"name": "CALL",
											"source": 3
										},
										{
											"begin": 837,
											"end": 879,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 837,
											"end": 879,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 837,
											"end": 879,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 837,
											"end": 879,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 837,
											"end": 879,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 837,
											"end": 879,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 837,
											"end": 879,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 837,
											"end": 879,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 837,
											"end": 879,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "30"
										},
										{
											"begin": 837,
											"end": 879,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 837,
											"end": 879,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 837,
											"end": 879,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 837,
											"end": 879,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 837,
											"end": 879,
											"name": "RETURNDATACOPY",
											"source": 3
										},
										{
											"begin": 837,
											"end": 879,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 837,
											"end": 879,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 837,
											"end": 879,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 837,
											"end": 879,
											"name": "tag",
											"source": 3,
											"value": "30"
										},
										{
											"begin": 837,
											"end": 879,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 837,
											"end": 879,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 739,
											"end": 890,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 711,
											"end": 1054,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "37"
										},
										{
											"begin": 711,
											"end": 1054,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 711,
											"end": 1054,
											"name": "tag",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 711,
											"end": 1054,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 925,
											"end": 970,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 925,
											"end": 970,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 964,
											"end": 968,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 925,
											"end": 970,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 451,
											"end": 502,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 925,
											"end": 955,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 925,
											"end": 955,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 925,
											"end": 955,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 925,
											"end": 955,
											"name": "PUSH",
											"source": 3,
											"value": "70A08231"
										},
										{
											"begin": 925,
											"end": 955,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 424,
											"end": 442,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 424,
											"end": 442,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 925,
											"end": 970,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 925,
											"end": 970,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 925,
											"end": 970,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "GAS",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "STATICCALL",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 925,
											"end": 970,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 925,
											"end": 970,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "RETURNDATACOPY",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 925,
											"end": 970,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "tag",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 925,
											"end": 970,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 925,
											"end": 970,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 925,
											"end": 970,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 925,
											"end": 970,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 925,
											"end": 970,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 925,
											"end": 970,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 925,
											"end": 970,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "36"
										},
										{
											"begin": 925,
											"end": 970,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 925,
											"end": 970,
											"name": "tag",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 925,
											"end": 970,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 910,
											"end": 970,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 984,
											"end": 1043,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "37"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 984,
											"end": 1017,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 984,
											"end": 1017,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1018,
											"end": 1028,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 910,
											"end": 970,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 984,
											"end": 1017,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "38"
										},
										{
											"begin": 984,
											"end": 1043,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 984,
											"end": 1043,
											"name": "tag",
											"source": 3,
											"value": "37"
										},
										{
											"begin": 984,
											"end": 1043,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1068,
											"end": 1120,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1068,
											"end": 1120,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1209,
											"end": 1234,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1209,
											"end": 1234,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1209,
											"end": 1234,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1068,
											"end": 1120,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1068,
											"end": 1120,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1068,
											"end": 1120,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1080,
											"end": 1090,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 1080,
											"end": 1090,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1068,
											"end": 1120,
											"name": "PUSH",
											"source": 3,
											"value": "9207361CC2A04B9C7A06691DF1EB87C6A63957AE88BF01D0D18C81E3D1272099"
										},
										{
											"begin": 1068,
											"end": 1120,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1197,
											"end": 1199,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1182,
											"end": 1200,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1068,
											"end": 1120,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1068,
											"end": 1120,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1068,
											"end": 1120,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1068,
											"end": 1120,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1068,
											"end": 1120,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1068,
											"end": 1120,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1068,
											"end": 1120,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 674,
											"end": 1127,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 616,
											"end": 1127,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 616,
											"end": 1127,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1607,
											"end": 1708,
											"name": "tag",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 1607,
											"end": 1708,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1021,
											"end": 1028,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1047,
											"end": 1053,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1047,
											"end": 1053,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 666,
											"end": 676,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 1187,
											"end": 1210,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "tag",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1671,
											"end": 1701,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 1698,
											"end": 1699,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1671,
											"end": 1689,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 1671,
											"end": 1701,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1671,
											"end": 1701,
											"name": "tag",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 1671,
											"end": 1701,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1607,
											"end": 1708,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1857,
											"end": 2055,
											"name": "tag",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 1857,
											"end": 2055,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1021,
											"end": 1028,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1047,
											"end": 1053,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1047,
											"end": 1053,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 666,
											"end": 676,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 1187,
											"end": 1210,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "53"
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "tag",
											"source": 2,
											"value": "53"
										},
										{
											"begin": 1179,
											"end": 1247,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1945,
											"end": 1967,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1945,
											"end": 1967,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1937,
											"end": 2010,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 1937,
											"end": 2010,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1937,
											"end": 2010,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1937,
											"end": 2010,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1937,
											"end": 2010,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1937,
											"end": 2010,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1447,
											"end": 1449,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1937,
											"end": 2010,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1937,
											"end": 2010,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1937,
											"end": 2010,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1429,
											"end": 1450,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1486,
											"end": 1488,
											"name": "PUSH",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 1466,
											"end": 1484,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 1466,
											"end": 1484,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1466,
											"end": 1484,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1459,
											"end": 1489,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1525,
											"end": 1559,
											"name": "PUSH",
											"source": 9,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 1505,
											"end": 1523,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 1505,
											"end": 1523,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1505,
											"end": 1523,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1498,
											"end": 1560,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1576,
											"end": 1594,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 1576,
											"end": 1594,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1576,
											"end": 1594,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1569,
											"end": 1605,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1622,
											"end": 1641,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 1622,
											"end": 1641,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1937,
											"end": 2010,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 1245,
											"end": 1647,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1937,
											"end": 2010,
											"name": "tag",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 1937,
											"end": 2010,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2020,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 2039,
											"end": 2047,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2020,
											"end": 2038,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 2020,
											"end": 2048,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2020,
											"end": 2048,
											"name": "tag",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 2020,
											"end": 2048,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1857,
											"end": 2055,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1857,
											"end": 2055,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 652,
											"end": 827,
											"name": "tag",
											"source": 8,
											"value": "38"
										},
										{
											"begin": 652,
											"end": 827,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 761,
											"end": 819,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 761,
											"end": 819,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 761,
											"end": 819,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1844,
											"end": 1876,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1844,
											"end": 1876,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 761,
											"end": 819,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 761,
											"end": 819,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 761,
											"end": 819,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1826,
											"end": 1877,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1893,
											"end": 1911,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 1893,
											"end": 1911,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1893,
											"end": 1911,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1893,
											"end": 1911,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1886,
											"end": 1920,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1886,
											"end": 1920,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1886,
											"end": 1920,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 761,
											"end": 819,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 761,
											"end": 819,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 761,
											"end": 819,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 761,
											"end": 819,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 761,
											"end": 819,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 761,
											"end": 819,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 761,
											"end": 819,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 761,
											"end": 819,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 761,
											"end": 819,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 761,
											"end": 819,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1799,
											"end": 1817,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 1799,
											"end": 1817,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1799,
											"end": 1817,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1799,
											"end": 1817,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 761,
											"end": 819,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 761,
											"end": 819,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 761,
											"end": 819,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 761,
											"end": 819,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 761,
											"end": 819,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 761,
											"end": 819,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 761,
											"end": 819,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 761,
											"end": 819,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 761,
											"end": 819,
											"name": "AND",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 761,
											"end": 819,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 761,
											"end": 819,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 761,
											"end": 819,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 734,
											"end": 820,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "62"
										},
										{
											"begin": 734,
											"end": 820,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 754,
											"end": 759,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 754,
											"end": 759,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 734,
											"end": 753,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "65"
										},
										{
											"begin": 734,
											"end": 820,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 734,
											"end": 820,
											"name": "tag",
											"source": 8,
											"value": "62"
										},
										{
											"begin": 734,
											"end": 820,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 652,
											"end": 827,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 652,
											"end": 827,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 652,
											"end": 827,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 652,
											"end": 827,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2209,
											"end": 2396,
											"name": "tag",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 2209,
											"end": 2396,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2282,
											"end": 2298,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2301,
											"end": 2307,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2301,
											"end": 2307,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2317,
											"end": 2334,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2317,
											"end": 2334,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2317,
											"end": 2334,
											"name": "AND",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2317,
											"end": 2334,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2317,
											"end": 2334,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2317,
											"end": 2334,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2317,
											"end": 2334,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 2317,
											"end": 2334,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2317,
											"end": 2334,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 2349,
											"end": 2389,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2349,
											"end": 2389,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2301,
											"end": 2307,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2301,
											"end": 2307,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2301,
											"end": 2307,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2301,
											"end": 2307,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2301,
											"end": 2307,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2301,
											"end": 2307,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2301,
											"end": 2307,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2349,
											"end": 2389,
											"name": "PUSH",
											"source": 2,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2349,
											"end": 2389,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2282,
											"end": 2298,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2349,
											"end": 2389,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 2272,
											"end": 2396,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2209,
											"end": 2396,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2209,
											"end": 2396,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3000,
											"end": 3706,
											"name": "tag",
											"source": 8,
											"value": "65"
										},
										{
											"begin": 3000,
											"end": 3706,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3419,
											"end": 3442,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3445,
											"end": 3514,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "68"
										},
										{
											"begin": 3473,
											"end": 3477,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3445,
											"end": 3514,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3445,
											"end": 3514,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3445,
											"end": 3514,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3445,
											"end": 3514,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3445,
											"end": 3514,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3445,
											"end": 3514,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3445,
											"end": 3514,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3445,
											"end": 3514,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3445,
											"end": 3514,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3445,
											"end": 3514,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3445,
											"end": 3514,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3445,
											"end": 3514,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3445,
											"end": 3514,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3445,
											"end": 3514,
											"name": "PUSH",
											"source": 8,
											"value": "5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
										},
										{
											"begin": 3445,
											"end": 3514,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3445,
											"end": 3514,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3445,
											"end": 3514,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3453,
											"end": 3458,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3445,
											"end": 3472,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3445,
											"end": 3472,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "69"
										},
										{
											"begin": 3445,
											"end": 3472,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3445,
											"end": 3514,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3445,
											"end": 3514,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3445,
											"end": 3514,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3445,
											"end": 3514,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3445,
											"end": 3514,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3445,
											"end": 3514,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3445,
											"end": 3514,
											"name": "tag",
											"source": 8,
											"value": "68"
										},
										{
											"begin": 3445,
											"end": 3514,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3528,
											"end": 3545,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3528,
											"end": 3545,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3419,
											"end": 3514,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3419,
											"end": 3514,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3528,
											"end": 3549,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3524,
											"end": 3700,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "62"
										},
										{
											"begin": 3524,
											"end": 3700,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3623,
											"end": 3633,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3612,
											"end": 3642,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3612,
											"end": 3642,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3612,
											"end": 3642,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3612,
											"end": 3642,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3612,
											"end": 3642,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3612,
											"end": 3642,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3612,
											"end": 3642,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3612,
											"end": 3642,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3612,
											"end": 3642,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "71"
										},
										{
											"begin": 3612,
											"end": 3642,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3612,
											"end": 3642,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3612,
											"end": 3642,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "72"
										},
										{
											"begin": 3612,
											"end": 3642,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3612,
											"end": 3642,
											"name": "tag",
											"source": 8,
											"value": "71"
										},
										{
											"begin": 3612,
											"end": 3642,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3604,
											"end": 3689,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "62"
										},
										{
											"begin": 3604,
											"end": 3689,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3604,
											"end": 3689,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3604,
											"end": 3689,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3604,
											"end": 3689,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3604,
											"end": 3689,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2415,
											"end": 2417,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3604,
											"end": 3689,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 3604,
											"end": 3689,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3604,
											"end": 3689,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2397,
											"end": 2418,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2454,
											"end": 2456,
											"name": "PUSH",
											"source": 9,
											"value": "2A"
										},
										{
											"begin": 2434,
											"end": 2452,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 2434,
											"end": 2452,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2434,
											"end": 2452,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2427,
											"end": 2457,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2493,
											"end": 2527,
											"name": "PUSH",
											"source": 9,
											"value": "5361666545524332303A204552433230206F7065726174696F6E20646964206E"
										},
										{
											"begin": 2473,
											"end": 2491,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 2473,
											"end": 2491,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2473,
											"end": 2491,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2466,
											"end": 2528,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1BDD081CDD58D8D95959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2544,
											"end": 2562,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 2544,
											"end": 2562,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2544,
											"end": 2562,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2537,
											"end": 2577,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2594,
											"end": 2613,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 2594,
											"end": 2613,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3604,
											"end": 3689,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "25"
										},
										{
											"begin": 2213,
											"end": 2619,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4041,
											"end": 4264,
											"name": "tag",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 4041,
											"end": 4264,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4174,
											"end": 4186,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 4205,
											"end": 4257,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 4227,
											"end": 4233,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 4235,
											"end": 4239,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 4241,
											"end": 4242,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4244,
											"end": 4256,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 4205,
											"end": 4226,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 4205,
											"end": 4257,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4205,
											"end": 4257,
											"name": "tag",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 4205,
											"end": 4257,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4198,
											"end": 4257,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 4041,
											"end": 4264,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4041,
											"end": 4264,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 5098,
											"end": 5544,
											"name": "tag",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 5098,
											"end": 5544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5263,
											"end": 5275,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 5320,
											"end": 5325,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5295,
											"end": 5316,
											"name": "SELFBALANCE",
											"source": 0
										},
										{
											"begin": 5295,
											"end": 5325,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 5295,
											"end": 5325,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5287,
											"end": 5368,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 5287,
											"end": 5368,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5287,
											"end": 5368,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5287,
											"end": 5368,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5287,
											"end": 5368,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5287,
											"end": 5368,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2826,
											"end": 2828,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 5287,
											"end": 5368,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5287,
											"end": 5368,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5287,
											"end": 5368,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2808,
											"end": 2829,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2865,
											"end": 2867,
											"name": "PUSH",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 2845,
											"end": 2863,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 2845,
											"end": 2863,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2845,
											"end": 2863,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2838,
											"end": 2868,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2904,
											"end": 2938,
											"name": "PUSH",
											"source": 9,
											"value": "416464726573733A20696E73756666696369656E742062616C616E636520666F"
										},
										{
											"begin": 2884,
											"end": 2902,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 2884,
											"end": 2902,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2884,
											"end": 2902,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2877,
											"end": 2939,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1C8818D85B1B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2955,
											"end": 2973,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 2955,
											"end": 2973,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2955,
											"end": 2973,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2948,
											"end": 2984,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3001,
											"end": 3020,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 3001,
											"end": 3020,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5287,
											"end": 5368,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 2624,
											"end": 3026,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5287,
											"end": 5368,
											"name": "tag",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 5287,
											"end": 5368,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5379,
											"end": 5391,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5393,
											"end": 5416,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5426,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5420,
											"end": 5431,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5439,
											"end": 5444,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5446,
											"end": 5450,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "tag",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "PUSH",
											"source": 0,
											"value": "3F"
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "tag",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "tag",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5420,
											"end": 5451,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5378,
											"end": 5451,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5378,
											"end": 5451,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5378,
											"end": 5451,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5378,
											"end": 5451,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5468,
											"end": 5537,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 5495,
											"end": 5501,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 5503,
											"end": 5510,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5512,
											"end": 5522,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5524,
											"end": 5536,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 5468,
											"end": 5494,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 5468,
											"end": 5537,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5468,
											"end": 5537,
											"name": "tag",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 5468,
											"end": 5537,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5461,
											"end": 5537,
											"name": "SWAP8",
											"source": 0
										},
										{
											"begin": 5098,
											"end": 5544,
											"name": "SWAP7",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5098,
											"end": 5544,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 7604,
											"end": 8232,
											"name": "tag",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 7604,
											"end": 8232,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7784,
											"end": 7796,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 7812,
											"end": 7819,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7808,
											"end": 8226,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7808,
											"end": 8226,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 7808,
											"end": 8226,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7839,
											"end": 7849,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7839,
											"end": 7856,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 7860,
											"end": 7861,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7839,
											"end": 7861,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 7835,
											"end": 8121,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 7835,
											"end": 8121,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1634,
											"end": 1653,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 1634,
											"end": 1653,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1634,
											"end": 1653,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 8046,
											"end": 8106,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 8046,
											"end": 8106,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 8046,
											"end": 8106,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8046,
											"end": 8106,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8046,
											"end": 8106,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8046,
											"end": 8106,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3775,
											"end": 3777,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 8046,
											"end": 8106,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 8046,
											"end": 8106,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8046,
											"end": 8106,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3757,
											"end": 3778,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3814,
											"end": 3816,
											"name": "PUSH",
											"source": 9,
											"value": "1D"
										},
										{
											"begin": 3794,
											"end": 3812,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 3794,
											"end": 3812,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3794,
											"end": 3812,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3787,
											"end": 3817,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3853,
											"end": 3884,
											"name": "PUSH",
											"source": 9,
											"value": "416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
										},
										{
											"begin": 3833,
											"end": 3851,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 3833,
											"end": 3851,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3833,
											"end": 3851,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3826,
											"end": 3885,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3902,
											"end": 3920,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 3902,
											"end": 3920,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8046,
											"end": 8106,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 3573,
											"end": 3926,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8046,
											"end": 8106,
											"name": "tag",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 8046,
											"end": 8106,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8141,
											"end": 8151,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8134,
											"end": 8151,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 8134,
											"end": 8151,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7808,
											"end": 8226,
											"name": "tag",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 7808,
											"end": 8226,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8182,
											"end": 8215,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 8190,
											"end": 8200,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 8202,
											"end": 8214,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 8913,
											"end": 8930,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8913,
											"end": 8930,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8913,
											"end": 8934,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 8909,
											"end": 9288,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 8909,
											"end": 9288,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 9141,
											"end": 9151,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9135,
											"end": 9152,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 9197,
											"end": 9212,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 9184,
											"end": 9194,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 9180,
											"end": 9182,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 9176,
											"end": 9195,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9169,
											"end": 9213,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 8909,
											"end": 9288,
											"name": "tag",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 8909,
											"end": 9288,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9264,
											"end": 9276,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 9257,
											"end": 9277,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 9257,
											"end": 9277,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9257,
											"end": 9277,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9257,
											"end": 9277,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 9257,
											"end": 9277,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 9257,
											"end": 9277,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9257,
											"end": 9277,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 9257,
											"end": 9277,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 9257,
											"end": 9277,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9257,
											"end": 9277,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 9257,
											"end": 9277,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 14,
											"end": 300,
											"name": "tag",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 14,
											"end": 300,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 73,
											"end": 79,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 126,
											"end": 128,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 114,
											"end": 123,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 105,
											"end": 112,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 101,
											"end": 124,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 97,
											"end": 129,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 94,
											"end": 146,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 94,
											"end": 146,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "110"
										},
										{
											"begin": 94,
											"end": 146,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 142,
											"end": 143,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 139,
											"end": 140,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 132,
											"end": 144,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 94,
											"end": 146,
											"name": "tag",
											"source": 9,
											"value": "110"
										},
										{
											"begin": 94,
											"end": 146,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 168,
											"end": 191,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 168,
											"end": 191,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 220,
											"end": 251,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 220,
											"end": 251,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 210,
											"end": 252,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 210,
											"end": 252,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 200,
											"end": 270,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "111"
										},
										{
											"begin": 200,
											"end": 270,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 266,
											"end": 267,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 264,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 256,
											"end": 268,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 200,
											"end": 270,
											"name": "tag",
											"source": 9,
											"value": "111"
										},
										{
											"begin": 200,
											"end": 270,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 289,
											"end": 294,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 14,
											"end": 300,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 300,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 513,
											"end": 869,
											"name": "tag",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 513,
											"end": 869,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 715,
											"end": 717,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 697,
											"end": 718,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 697,
											"end": 718,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 697,
											"end": 718,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 734,
											"end": 752,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 734,
											"end": 752,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 734,
											"end": 752,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 727,
											"end": 757,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 793,
											"end": 827,
											"name": "PUSH",
											"source": 9,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 788,
											"end": 790,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 773,
											"end": 791,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 773,
											"end": 791,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 766,
											"end": 828,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 860,
											"end": 862,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 845,
											"end": 863,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 845,
											"end": 863,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 513,
											"end": 869,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 874,
											"end": 1058,
											"name": "tag",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 874,
											"end": 1058,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 944,
											"end": 950,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 997,
											"end": 999,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 985,
											"end": 994,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 976,
											"end": 983,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 972,
											"end": 995,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 968,
											"end": 1000,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 965,
											"end": 1017,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 965,
											"end": 1017,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "115"
										},
										{
											"begin": 965,
											"end": 1017,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1013,
											"end": 1014,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1010,
											"end": 1011,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1003,
											"end": 1015,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 965,
											"end": 1017,
											"name": "tag",
											"source": 9,
											"value": "115"
										},
										{
											"begin": 965,
											"end": 1017,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1036,
											"end": 1052,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1036,
											"end": 1052,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 874,
											"end": 1058,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 874,
											"end": 1058,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 1931,
											"end": 2208,
											"name": "tag",
											"source": 9,
											"value": "72"
										},
										{
											"begin": 1931,
											"end": 2208,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1998,
											"end": 2004,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2051,
											"end": 2053,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2039,
											"end": 2048,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2030,
											"end": 2037,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2026,
											"end": 2049,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2022,
											"end": 2054,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 2019,
											"end": 2071,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2019,
											"end": 2071,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "120"
										},
										{
											"begin": 2019,
											"end": 2071,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2068,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2064,
											"end": 2065,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2057,
											"end": 2069,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2019,
											"end": 2071,
											"name": "tag",
											"source": 9,
											"value": "120"
										},
										{
											"begin": 2019,
											"end": 2071,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2099,
											"end": 2108,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2093,
											"end": 2109,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2152,
											"end": 2157,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2145,
											"end": 2158,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2138,
											"end": 2159,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2131,
											"end": 2136,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2128,
											"end": 2160,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2118,
											"end": 2178,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "111"
										},
										{
											"begin": 2118,
											"end": 2178,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2174,
											"end": 2175,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2171,
											"end": 2172,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2164,
											"end": 2176,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 3031,
											"end": 3289,
											"name": "tag",
											"source": 9,
											"value": "107"
										},
										{
											"begin": 3031,
											"end": 3289,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3103,
											"end": 3104,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3113,
											"end": 3226,
											"name": "tag",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 3113,
											"end": 3226,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3127,
											"end": 3133,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3124,
											"end": 3125,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3121,
											"end": 3134,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 3113,
											"end": 3226,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3113,
											"end": 3226,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "127"
										},
										{
											"begin": 3113,
											"end": 3226,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3203,
											"end": 3214,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3203,
											"end": 3214,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3203,
											"end": 3214,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3197,
											"end": 3215,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3184,
											"end": 3195,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3184,
											"end": 3195,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3184,
											"end": 3195,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3177,
											"end": 3216,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3149,
											"end": 3151,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3142,
											"end": 3152,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3113,
											"end": 3226,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 3113,
											"end": 3226,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3113,
											"end": 3226,
											"name": "tag",
											"source": 9,
											"value": "127"
										},
										{
											"begin": 3113,
											"end": 3226,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3244,
											"end": 3250,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3242,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3238,
											"end": 3251,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 3235,
											"end": 3283,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3235,
											"end": 3283,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "128"
										},
										{
											"begin": 3235,
											"end": 3283,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3279,
											"end": 3280,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3270,
											"end": 3276,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3265,
											"end": 3268,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3261,
											"end": 3277,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3254,
											"end": 3281,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3235,
											"end": 3283,
											"name": "tag",
											"source": 9,
											"value": "128"
										},
										{
											"begin": 3235,
											"end": 3283,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3235,
											"end": 3283,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3031,
											"end": 3289,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3031,
											"end": 3289,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3031,
											"end": 3289,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3031,
											"end": 3289,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 3294,
											"end": 3568,
											"name": "tag",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 3294,
											"end": 3568,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3423,
											"end": 3426,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3461,
											"end": 3467,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3455,
											"end": 3468,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3477,
											"end": 3530,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "130"
										},
										{
											"begin": 3523,
											"end": 3529,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3518,
											"end": 3521,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3511,
											"end": 3515,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3503,
											"end": 3509,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 3499,
											"end": 3516,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3477,
											"end": 3530,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "107"
										},
										{
											"begin": 3477,
											"end": 3530,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3477,
											"end": 3530,
											"name": "tag",
											"source": 9,
											"value": "130"
										},
										{
											"begin": 3477,
											"end": 3530,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3546,
											"end": 3562,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3546,
											"end": 3562,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3546,
											"end": 3562,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3546,
											"end": 3562,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3546,
											"end": 3562,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3294,
											"end": 3568,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3294,
											"end": 3568,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 3931,
											"end": 4314,
											"name": "tag",
											"source": 9,
											"value": "106"
										},
										{
											"begin": 3931,
											"end": 4314,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4080,
											"end": 4082,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4069,
											"end": 4078,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4062,
											"end": 4083,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4043,
											"end": 4047,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4112,
											"end": 4118,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4106,
											"end": 4119,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 4155,
											"end": 4161,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4150,
											"end": 4152,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4139,
											"end": 4148,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 4135,
											"end": 4153,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4128,
											"end": 4162,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4171,
											"end": 4237,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "133"
										},
										{
											"begin": 4230,
											"end": 4236,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4225,
											"end": 4227,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4214,
											"end": 4223,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 4210,
											"end": 4228,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4205,
											"end": 4207,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4197,
											"end": 4203,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 4193,
											"end": 4208,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4171,
											"end": 4237,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "107"
										},
										{
											"begin": 4171,
											"end": 4237,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4171,
											"end": 4237,
											"name": "tag",
											"source": 9,
											"value": "133"
										},
										{
											"begin": 4171,
											"end": 4237,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4298,
											"end": 4300,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 4277,
											"end": 4292,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4273,
											"end": 4302,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4258,
											"end": 4303,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4258,
											"end": 4303,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4258,
											"end": 4303,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4258,
											"end": 4303,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4305,
											"end": 4307,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4254,
											"end": 4308,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4254,
											"end": 4308,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3931,
											"end": 4314,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3931,
											"end": 4314,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b",
							"withdraw(address)": "51cff8d9"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetAddress\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address)\":{\"details\":\"Withdraw asset.\",\"params\":{\"_assetAddress\":\"Asset to be withdrawn.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Ensures that any contract that inherits from this contract is able to withdraw funds that are accidentally received or stuck.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":\"Withdrawable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"brownie_projects/bebu_finance/contracts/utils/Address.sol\":{\"keccak256\":\"0x2254ff0365cbc4f80af2433d10890e0d4816c14f38a6e9e0c746f861ad434f1b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://17ecd670c7f9522306389b638a01d0b0e93156ec0e9c2cbe798b091e89474a32\",\"dweb:/ipfs/QmUzZpE98hpS8J4KtqcLxxTzdrP2rKeUWssF5GJA1e3dYw\"]},\"brownie_projects/bebu_finance/contracts/utils/Context.sol\":{\"keccak256\":\"0x1cc748b2446aafb4c362edda845ca05b3b9994ebafc2c0ddbc894982c21305f0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://076e714ffbbacde572851624994b9457f6765136fa8f5613fd082f607ec1924b\",\"dweb:/ipfs/QmPZJrP5BSYeMe4ajmpbNS1p3nsfJbTbo7hBwHxJA133Uv\"]},\"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol\":{\"keccak256\":\"0x43180eb9b0777a7f0b7ecfcae76c0e083c783a96119c9d8f1ffe3df9499968d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d408370b21bcea7451dae0b39224f27cccedc9a8056de889bcb676e41ae057b9\",\"dweb:/ipfs/QmeZ6z6zrNMoUNAVjPhUqCompoBoe2LSpqHrJrnr7WJUP6\"]},\"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol\":{\"keccak256\":\"0xbd7713515e6c88d72dce209649f82f693324aaa939acda0e9ee48720cba9e2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://60d88744b8422b6e4e5682a3481649bf2c734b0d13a0fe6f0693e8f1ed850fc8\",\"dweb:/ipfs/QmcJFBLAtVZmt2NShi7BfPVS8ymDKTgxU8apigUbZaET9g\"]},\"brownie_projects/bebu_finance/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x9abfb3888eb1535805fd1ce80be0738b5fc57c7aece52b85bd925d2e1d22bab1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7bae47c4219dfdc2aa9c3a38f76c0bb249a077ad55d79ec23ed43beb03a89916\",\"dweb:/ipfs/QmP2fK7qHCjJ9RKqMmCifPdP3LwWfEEzZTne84AGyCkRrg\"]},\"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":{\"keccak256\":\"0x9336c439b650ed30b53a5c9cb26d7efa34ee4f6a3359e789810c170f916928af\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://57a1cbb4dfe75b31c8b548ab65a22e20b9a2f88603c493704500ccedc894f5bd\",\"dweb:/ipfs/QmPs4jM1ot85vw9V6vUp1J7tWpbB9gfEgCkVjRJ39jJEYh\"]},\"brownie_projects/bebu_finance/contracts/utils/token/IERC20.sol\":{\"keccak256\":\"0xbb468cd9676a6fdae71b903143d44854a9b4082b703613463644b828e9b7a400\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://21c8b22a3e1b54ef211bc17afb71f5a91ab26360133c7f835c9d0e89706bfb52\",\"dweb:/ipfs/QmNwhncwZbdRfqpJe5fVH2S2KkZQrnLGXQsWdHnEfXVrFd\"]},\"brownie_projects/bebu_finance/contracts/utils/token/IERC20Metadata.sol\":{\"keccak256\":\"0x5e436570a8cc3b9b0e1ee9496474d65302af6a380728e561324288e468db645d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b8c39aff9aad1fcbf6a9c2f70e9e358ca551e9b9fc847c97a5f3d42cfeb6cc4f\",\"dweb:/ipfs/QmUyrQTncAJRnuefm2D97cdzMohdEb6qpxDpnR9pnQyeaH\"]},\"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol\":{\"keccak256\":\"0x593692219f7f58fc3dd89dc0271eaf2b459fd7515bbf53dcdb799bcce79c97b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5dcb333da0bda5db19dacbc438f214d8e8408c210605baba683ce4af33ba525d\",\"dweb:/ipfs/QmRjDL9cN4qKGozcoN34EscZZesPqsa9E5qggHRihUZxkB\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 359,
								"contract": "brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol:Withdrawable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Ensures that any contract that inherits from this contract is able to withdraw funds that are accidentally received or stuck.",
						"version": 1
					}
				}
			},
			"brownie_projects/bebu_finance/contracts/utils/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"brownie_projects/bebu_finance/contracts/utils/math/SafeMath.sol\":409:6710  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"brownie_projects/bebu_finance/contracts/utils/math/SafeMath.sol\":409:6710  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212204d6a778f4bf8e6a8f98caaf85f98359ae04ff12a9397f2adae281557dc97afd164736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204d6a778f4bf8e6a8f98caaf85f98359ae04ff12a9397f2adae281557dc97afd164736f6c634300080d0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4D PUSH11 0x778F4BF8E6A8F98CAAF85F SWAP9 CALLDATALOAD SWAP11 0xE0 0x4F CALL 0x2A SWAP4 SWAP8 CALLCODE 0xAD 0xAE 0x28 ISZERO JUMPI 0xDC SWAP8 0xAF 0xD1 PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "409:6301:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;409:6301:4;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204d6a778f4bf8e6a8f98caaf85f98359ae04ff12a9397f2adae281557dc97afd164736f6c634300080d0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4D PUSH11 0x778F4BF8E6A8F98CAAF85F SWAP9 CALLDATALOAD SWAP11 0xE0 0x4F CALL 0x2A SWAP4 SWAP8 CALLCODE 0xAD 0xAE 0x28 ISZERO JUMPI 0xDC SWAP8 0xAF 0xD1 PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "409:6301:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 409,
									"end": 6710,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 409,
									"end": 6710,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212204d6a778f4bf8e6a8f98caaf85f98359ae04ff12a9397f2adae281557dc97afd164736f6c634300080d0033",
									".code": [
										{
											"begin": 409,
											"end": 6710,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 409,
											"end": 6710,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 409,
											"end": 6710,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 409,
											"end": 6710,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 409,
											"end": 6710,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 409,
											"end": 6710,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 409,
											"end": 6710,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 409,
											"end": 6710,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 409,
											"end": 6710,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"brownie_projects/bebu_finance/contracts/utils/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"brownie_projects/bebu_finance/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x9abfb3888eb1535805fd1ce80be0738b5fc57c7aece52b85bd925d2e1d22bab1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7bae47c4219dfdc2aa9c3a38f76c0bb249a077ad55d79ec23ed43beb03a89916\",\"dweb:/ipfs/QmP2fK7qHCjJ9RKqMmCifPdP3LwWfEEzZTne84AGyCkRrg\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name_",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol_",
									"type": "string"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":1312:12535  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  mstore(0x40, 0x80)\n    /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":1887:2000  constructor(string memory name_, string memory symbol_) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":1953:1966  _name = name_ */\n  dup2\n  mload\n  tag_6\n  swap1\n    /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":1953:1958  _name */\n  0x03\n  swap1\n    /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":1953:1966  _name = name_ */\n  0x20\n  dup6\n  add\n  swap1\n  tag_7\n  jump\t// in\ntag_6:\n  pop\n    /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":1976:1993  _symbol = symbol_ */\n  dup1\n  mload\n  tag_8\n  swap1\n    /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":1976:1983  _symbol */\n  0x04\n  swap1\n    /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":1976:1993  _symbol = symbol_ */\n  0x20\n  dup5\n  add\n  swap1\n  tag_7\n  jump\t// in\ntag_8:\n  pop\n    /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":1887:2000  constructor(string memory name_, string memory symbol_) {... */\n  pop\n  pop\n    /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":1312:12535  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  jump(tag_23)\ntag_7:\n  dup3\n  dup1\n  sload\n  tag_10\n  swap1\n  tag_11\n  jump\t// in\ntag_10:\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  0x1f\n  add\n  0x20\n  swap1\n  div\n  dup2\n  add\n  swap3\n  dup3\n  tag_13\n  jumpi\n  0x00\n  dup6\n  sstore\n  jump(tag_16)\ntag_13:\n  dup3\n  0x1f\n  lt\n  tag_14\n  jumpi\n  dup1\n  mload\n  not(0xff)\n  and\n  dup4\n  dup1\n  add\n  or\n  dup6\n  sstore\n  jump(tag_16)\ntag_14:\n  dup3\n  dup1\n  add\n  0x01\n  add\n  dup6\n  sstore\n  dup3\n  iszero\n  tag_16\n  jumpi\n  swap2\n  dup3\n  add\ntag_15:\n  dup3\n  dup2\n  gt\n  iszero\n  tag_16\n  jumpi\n  dup3\n  mload\n  dup3\n  sstore\n  swap2\n  0x20\n  add\n  swap2\n  swap1\n  0x01\n  add\n  swap1\n  jump(tag_15)\ntag_16:\n  pop\n  tag_17\n  swap3\n  swap2\n  pop\n  tag_18\n  jump\t// in\ntag_17:\n  pop\n  swap1\n  jump\t// out\ntag_18:\ntag_19:\n  dup1\n  dup3\n  gt\n  iszero\n  tag_17\n  jumpi\n  0x00\n  dup2\n  sstore\n  0x01\n  add\n  jump(tag_19)\n    /* \"#utility.yul\":14:141   */\ntag_21:\n    /* \"#utility.yul\":75:85   */\n  0x4e487b71\n    /* \"#utility.yul\":70:73   */\n  0xe0\n    /* \"#utility.yul\":66:86   */\n  shl\n    /* \"#utility.yul\":63:64   */\n  0x00\n    /* \"#utility.yul\":56:87   */\n  mstore\n    /* \"#utility.yul\":106:110   */\n  0x41\n    /* \"#utility.yul\":103:104   */\n  0x04\n    /* \"#utility.yul\":96:111   */\n  mstore\n    /* \"#utility.yul\":130:134   */\n  0x24\n    /* \"#utility.yul\":127:128   */\n  0x00\n    /* \"#utility.yul\":120:135   */\n  revert\n    /* \"#utility.yul\":146:1031   */\ntag_22:\n    /* \"#utility.yul\":200:205   */\n  0x00\n    /* \"#utility.yul\":253:256   */\n  dup3\n    /* \"#utility.yul\":246:250   */\n  0x1f\n    /* \"#utility.yul\":238:244   */\n  dup4\n    /* \"#utility.yul\":234:251   */\n  add\n    /* \"#utility.yul\":230:257   */\n  slt\n    /* \"#utility.yul\":220:275   */\n  tag_26\n  jumpi\n    /* \"#utility.yul\":271:272   */\n  0x00\n    /* \"#utility.yul\":268:269   */\n  dup1\n    /* \"#utility.yul\":261:273   */\n  revert\n    /* \"#utility.yul\":220:275   */\ntag_26:\n    /* \"#utility.yul\":294:307   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":356:366   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":353:389   */\n  iszero\n  tag_28\n  jumpi\n    /* \"#utility.yul\":369:387   */\n  tag_28\n  tag_21\n  jump\t// in\ntag_28:\n    /* \"#utility.yul\":444:446   */\n  0x40\n    /* \"#utility.yul\":438:447   */\n  mload\n    /* \"#utility.yul\":412:414   */\n  0x1f\n    /* \"#utility.yul\":498:511   */\n  dup4\n  add\n  not(0x1f)\n    /* \"#utility.yul\":494:516   */\n  swap1\n  dup2\n  and\n    /* \"#utility.yul\":518:520   */\n  0x3f\n    /* \"#utility.yul\":490:521   */\n  add\n    /* \"#utility.yul\":486:526   */\n  and\n    /* \"#utility.yul\":474:527   */\n  dup2\n  add\n  swap1\n    /* \"#utility.yul\":542:560   */\n  dup3\n  dup3\n  gt\n    /* \"#utility.yul\":562:584   */\n  dup2\n  dup4\n  lt\n    /* \"#utility.yul\":539:585   */\n  or\n    /* \"#utility.yul\":536:608   */\n  iszero\n  tag_30\n  jumpi\n    /* \"#utility.yul\":588:606   */\n  tag_30\n  tag_21\n  jump\t// in\ntag_30:\n    /* \"#utility.yul\":628:638   */\n  dup2\n    /* \"#utility.yul\":624:626   */\n  0x40\n    /* \"#utility.yul\":617:639   */\n  mstore\n    /* \"#utility.yul\":663:665   */\n  dup4\n    /* \"#utility.yul\":655:661   */\n  dup2\n    /* \"#utility.yul\":648:666   */\n  mstore\n    /* \"#utility.yul\":685:689   */\n  0x20\n    /* \"#utility.yul\":675:689   */\n  swap3\n  pop\n    /* \"#utility.yul\":730:733   */\n  dup7\n    /* \"#utility.yul\":725:727   */\n  dup4\n    /* \"#utility.yul\":720:722   */\n  dup6\n    /* \"#utility.yul\":712:718   */\n  dup9\n    /* \"#utility.yul\":708:723   */\n  add\n    /* \"#utility.yul\":704:728   */\n  add\n    /* \"#utility.yul\":701:734   */\n  gt\n    /* \"#utility.yul\":698:751   */\n  iszero\n  tag_31\n  jumpi\n    /* \"#utility.yul\":747:748   */\n  0x00\n    /* \"#utility.yul\":744:745   */\n  dup1\n    /* \"#utility.yul\":737:749   */\n  revert\n    /* \"#utility.yul\":698:751   */\ntag_31:\n    /* \"#utility.yul\":769:770   */\n  0x00\n    /* \"#utility.yul\":760:770   */\n  swap2\n  pop\n    /* \"#utility.yul\":779:912   */\ntag_32:\n    /* \"#utility.yul\":793:795   */\n  dup4\n    /* \"#utility.yul\":790:791   */\n  dup3\n    /* \"#utility.yul\":787:796   */\n  lt\n    /* \"#utility.yul\":779:912   */\n  iszero\n  tag_34\n  jumpi\n    /* \"#utility.yul\":881:895   */\n  dup6\n  dup3\n  add\n    /* \"#utility.yul\":877:900   */\n  dup4\n  add\n    /* \"#utility.yul\":871:901   */\n  mload\n    /* \"#utility.yul\":850:864   */\n  dup2\n  dup4\n  add\n    /* \"#utility.yul\":846:869   */\n  dup5\n  add\n    /* \"#utility.yul\":839:902   */\n  mstore\n    /* \"#utility.yul\":804:814   */\n  swap1\n  dup3\n  add\n  swap1\n    /* \"#utility.yul\":779:912   */\n  jump(tag_32)\ntag_34:\n    /* \"#utility.yul\":930:932   */\n  dup4\n    /* \"#utility.yul\":927:928   */\n  dup3\n    /* \"#utility.yul\":924:933   */\n  gt\n    /* \"#utility.yul\":921:1001   */\n  iszero\n  tag_35\n  jumpi\n    /* \"#utility.yul\":989:990   */\n  0x00\n    /* \"#utility.yul\":984:986   */\n  dup4\n    /* \"#utility.yul\":979:981   */\n  dup6\n    /* \"#utility.yul\":971:977   */\n  dup4\n    /* \"#utility.yul\":967:982   */\n  add\n    /* \"#utility.yul\":963:987   */\n  add\n    /* \"#utility.yul\":956:991   */\n  mstore\n    /* \"#utility.yul\":921:1001   */\ntag_35:\n    /* \"#utility.yul\":1019:1025   */\n  swap7\n    /* \"#utility.yul\":146:1031   */\n  swap6\n  pop\n  pop\n  pop\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1036:1598   */\ntag_3:\n    /* \"#utility.yul\":1135:1141   */\n  0x00\n    /* \"#utility.yul\":1143:1149   */\n  dup1\n    /* \"#utility.yul\":1196:1198   */\n  0x40\n    /* \"#utility.yul\":1184:1193   */\n  dup4\n    /* \"#utility.yul\":1175:1182   */\n  dup6\n    /* \"#utility.yul\":1171:1194   */\n  sub\n    /* \"#utility.yul\":1167:1199   */\n  slt\n    /* \"#utility.yul\":1164:1216   */\n  iszero\n  tag_37\n  jumpi\n    /* \"#utility.yul\":1212:1213   */\n  0x00\n    /* \"#utility.yul\":1209:1210   */\n  dup1\n    /* \"#utility.yul\":1202:1214   */\n  revert\n    /* \"#utility.yul\":1164:1216   */\ntag_37:\n    /* \"#utility.yul\":1239:1255   */\n  dup3\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":1304:1318   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":1301:1335   */\n  iszero\n  tag_38\n  jumpi\n    /* \"#utility.yul\":1331:1332   */\n  0x00\n    /* \"#utility.yul\":1328:1329   */\n  dup1\n    /* \"#utility.yul\":1321:1333   */\n  revert\n    /* \"#utility.yul\":1301:1335   */\ntag_38:\n    /* \"#utility.yul\":1354:1415   */\n  tag_39\n    /* \"#utility.yul\":1407:1414   */\n  dup7\n    /* \"#utility.yul\":1398:1404   */\n  dup4\n    /* \"#utility.yul\":1387:1396   */\n  dup8\n    /* \"#utility.yul\":1383:1405   */\n  add\n    /* \"#utility.yul\":1354:1415   */\n  tag_22\n  jump\t// in\ntag_39:\n    /* \"#utility.yul\":1344:1415   */\n  swap4\n  pop\n    /* \"#utility.yul\":1461:1463   */\n  0x20\n    /* \"#utility.yul\":1450:1459   */\n  dup6\n    /* \"#utility.yul\":1446:1464   */\n  add\n    /* \"#utility.yul\":1440:1465   */\n  mload\n    /* \"#utility.yul\":1424:1465   */\n  swap2\n  pop\n    /* \"#utility.yul\":1490:1492   */\n  dup1\n    /* \"#utility.yul\":1480:1488   */\n  dup3\n    /* \"#utility.yul\":1477:1493   */\n  gt\n    /* \"#utility.yul\":1474:1510   */\n  iszero\n  tag_40\n  jumpi\n    /* \"#utility.yul\":1506:1507   */\n  0x00\n    /* \"#utility.yul\":1503:1504   */\n  dup1\n    /* \"#utility.yul\":1496:1508   */\n  revert\n    /* \"#utility.yul\":1474:1510   */\ntag_40:\n  pop\n    /* \"#utility.yul\":1529:1592   */\n  tag_41\n    /* \"#utility.yul\":1584:1591   */\n  dup6\n    /* \"#utility.yul\":1573:1581   */\n  dup3\n    /* \"#utility.yul\":1562:1571   */\n  dup7\n    /* \"#utility.yul\":1558:1582   */\n  add\n    /* \"#utility.yul\":1529:1592   */\n  tag_22\n  jump\t// in\ntag_41:\n    /* \"#utility.yul\":1519:1592   */\n  swap2\n  pop\n  pop\n    /* \"#utility.yul\":1036:1598   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1603:1983   */\ntag_11:\n    /* \"#utility.yul\":1682:1683   */\n  0x01\n    /* \"#utility.yul\":1678:1690   */\n  dup2\n  dup2\n  shr\n  swap1\n    /* \"#utility.yul\":1725:1737   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":1746:1807   */\n  tag_43\n  jumpi\n    /* \"#utility.yul\":1800:1804   */\n  0x7f\n    /* \"#utility.yul\":1792:1798   */\n  dup3\n    /* \"#utility.yul\":1788:1805   */\n  and\n    /* \"#utility.yul\":1778:1805   */\n  swap2\n  pop\n    /* \"#utility.yul\":1746:1807   */\ntag_43:\n    /* \"#utility.yul\":1853:1855   */\n  0x20\n    /* \"#utility.yul\":1845:1851   */\n  dup3\n    /* \"#utility.yul\":1842:1856   */\n  lt\n    /* \"#utility.yul\":1822:1840   */\n  dup2\n    /* \"#utility.yul\":1819:1857   */\n  sub\n    /* \"#utility.yul\":1816:1977   */\n  tag_44\n  jumpi\n    /* \"#utility.yul\":1899:1909   */\n  0x4e487b71\n    /* \"#utility.yul\":1894:1897   */\n  0xe0\n    /* \"#utility.yul\":1890:1910   */\n  shl\n    /* \"#utility.yul\":1887:1888   */\n  0x00\n    /* \"#utility.yul\":1880:1911   */\n  mstore\n    /* \"#utility.yul\":1934:1938   */\n  0x22\n    /* \"#utility.yul\":1931:1932   */\n  0x04\n    /* \"#utility.yul\":1924:1939   */\n  mstore\n    /* \"#utility.yul\":1962:1966   */\n  0x24\n    /* \"#utility.yul\":1959:1960   */\n  0x00\n    /* \"#utility.yul\":1952:1967   */\n  revert\n    /* \"#utility.yul\":1816:1977   */\ntag_44:\n  pop\n    /* \"#utility.yul\":1603:1983   */\n  swap2\n  swap1\n  pop\n  jump\t// out\ntag_23:\n    /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":1312:12535  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":1312:12535  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x39509351\n      gt\n      tag_14\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_14:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":2065:2163  function name() public view virtual override returns (string memory) {... */\n    tag_3:\n      tag_15\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_17:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":4342:4539  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_4:\n      tag_19\n      tag_20\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_20:\n      tag_22\n      jump\t// in\n    tag_19:\n      mload(0x40)\n        /* \"#utility.yul\":1218:1232   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1211:1233   */\n      iszero\n        /* \"#utility.yul\":1193:1234   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1181:1183   */\n      0x20\n        /* \"#utility.yul\":1166:1184   */\n      add\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":4342:4539  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      tag_17\n        /* \"#utility.yul\":1053:1240   */\n      jump\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":3153:3259  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_5:\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":3240:3252  _totalSupply */\n      sload(0x02)\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":3153:3259  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_25:\n      mload(0x40)\n        /* \"#utility.yul\":1391:1416   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1379:1381   */\n      0x20\n        /* \"#utility.yul\":1364:1382   */\n      add\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":3153:3259  function totalSupply() public view virtual override returns (uint256) {... */\n      tag_17\n        /* \"#utility.yul\":1245:1422   */\n      jump\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":5101:5387  function transferFrom(... */\n    tag_6:\n      tag_19\n      tag_30\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":3002:3093  function decimals() public view virtual override returns (uint8) {... */\n    tag_7:\n      mload(0x40)\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":3084:3086  18 */\n      0x12\n        /* \"#utility.yul\":1902:1938   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1890:1892   */\n      0x20\n        /* \"#utility.yul\":1875:1893   */\n      add\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":3002:3093  function decimals() public view virtual override returns (uint8) {... */\n      tag_17\n        /* \"#utility.yul\":1760:1944   */\n      jump\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":5782:6018  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_8:\n      tag_19\n      tag_39\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_39:\n      tag_40\n      jump\t// in\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":3317:3442  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_9:\n      tag_25\n      tag_43\n      calldatasize\n      0x04\n      tag_44\n      jump\t// in\n    tag_43:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":3417:3435  _balances[account] */\n      and\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":3391:3398  uint256 */\n      0x00\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":3417:3435  _balances[account] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":3317:3442  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      jump\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":2276:2378  function symbol() public view virtual override returns (string memory) {... */\n    tag_10:\n      tag_15\n      tag_48\n      jump\t// in\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":6505:6934  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_11:\n      tag_19\n      tag_51\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_51:\n      tag_52\n      jump\t// in\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":3638:3827  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_12:\n      tag_19\n      tag_55\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_55:\n      tag_56\n      jump\t// in\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":3885:4034  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_13:\n      tag_25\n      tag_59\n      calldatasize\n      0x04\n      tag_60\n      jump\t// in\n    tag_59:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":4000:4018  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":3974:3981  uint256 */\n      0x00\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":4000:4018  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":4000:4011  _allowances */\n      0x01\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":4000:4018  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":4000:4027  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":3885:4034  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      jump\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":2065:2163  function name() public view virtual override returns (string memory) {... */\n    tag_16:\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":2119:2132  string memory */\n      0x60\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":2151:2156  _name */\n      0x03\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":2144:2156  return _name */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n    tag_64:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_66\n      swap1\n      tag_65\n      jump\t// in\n    tag_66:\n      dup1\n      iszero\n      tag_67\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_68\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_67)\n    tag_68:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_69:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_69\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_67:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":2065:2163  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":4342:4539  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_22:\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":4425:4429  bool */\n      0x00\n        /* \"brownie_projects/bebu_finance/contracts/utils/Context.sol\":666:676  msg.sender */\n      caller\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":4479:4511  _approve(owner, spender, amount) */\n      tag_73\n        /* \"brownie_projects/bebu_finance/contracts/utils/Context.sol\":666:676  msg.sender */\n      dup2\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":4495:4502  spender */\n      dup6\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":4504:4510  amount */\n      dup6\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":4479:4487  _approve */\n      tag_74\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":4479:4511  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_73:\n      pop\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":4528:4532  true */\n      0x01\n      swap4\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":4342:4539  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":5101:5387  function transferFrom(... */\n    tag_32:\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":5228:5232  bool */\n      0x00\n        /* \"brownie_projects/bebu_finance/contracts/utils/Context.sol\":666:676  msg.sender */\n      caller\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":5284:5322  _spendAllowance(from, spender, amount) */\n      tag_78\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":5300:5304  from */\n      dup6\n        /* \"brownie_projects/bebu_finance/contracts/utils/Context.sol\":666:676  msg.sender */\n      dup3\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":5315:5321  amount */\n      dup6\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":5284:5299  _spendAllowance */\n      tag_79\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":5284:5322  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_78:\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":5332:5359  _transfer(from, to, amount) */\n      tag_80\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":5342:5346  from */\n      dup6\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":5348:5350  to */\n      dup6\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":5352:5358  amount */\n      dup6\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":5332:5341  _transfer */\n      tag_81\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":5332:5359  _transfer(from, to, amount) */\n      jump\t// in\n    tag_80:\n      pop\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":5376:5380  true */\n      0x01\n      swap5\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":5101:5387  function transferFrom(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":5782:6018  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_40:\n        /* \"brownie_projects/bebu_finance/contracts/utils/Context.sol\":666:676  msg.sender */\n      caller\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":5870:5874  bool */\n      0x00\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":5949:5967  _allowances[owner] */\n      dup2\n      dup2\n      mstore\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":5949:5960  _allowances */\n      0x01\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":5949:5967  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":5949:5976  _allowances[owner][spender] */\n      dup8\n      and\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      dup2\n      keccak256\n      sload\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":5870:5874  bool */\n      swap1\n      swap2\n        /* \"brownie_projects/bebu_finance/contracts/utils/Context.sol\":666:676  msg.sender */\n      swap1\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":5924:5990  _approve(owner, spender, _allowances[owner][spender] + addedValue) */\n      tag_73\n      swap1\n        /* \"brownie_projects/bebu_finance/contracts/utils/Context.sol\":666:676  msg.sender */\n      dup3\n      swap1\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":5949:5976  _allowances[owner][spender] */\n      dup7\n      swap1\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":5949:5989  _allowances[owner][spender] + addedValue */\n      tag_86\n      swap1\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":5979:5989  addedValue */\n      dup8\n      swap1\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":5949:5989  _allowances[owner][spender] + addedValue */\n      tag_87\n      jump\t// in\n    tag_86:\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":5924:5932  _approve */\n      tag_74\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":5924:5990  _approve(owner, spender, _allowances[owner][spender] + addedValue) */\n      jump\t// in\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":2276:2378  function symbol() public view virtual override returns (string memory) {... */\n    tag_48:\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":2332:2345  string memory */\n      0x60\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":2364:2371  _symbol */\n      0x04\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":2357:2371  return _symbol */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":6505:6934  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_52:\n        /* \"brownie_projects/bebu_finance/contracts/utils/Context.sol\":666:676  msg.sender */\n      caller\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":6598:6602  bool */\n      0x00\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":6679:6697  _allowances[owner] */\n      dup2\n      dup2\n      mstore\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":6679:6690  _allowances */\n      0x01\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":6679:6697  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":6679:6706  _allowances[owner][spender] */\n      dup8\n      and\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      dup2\n      keccak256\n      sload\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":6598:6602  bool */\n      swap1\n      swap2\n        /* \"brownie_projects/bebu_finance/contracts/utils/Context.sol\":666:676  msg.sender */\n      swap1\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":6724:6759  currentAllowance >= subtractedValue */\n      dup4\n      dup2\n      lt\n      iszero\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":6716:6801  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_97\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3222:3224   */\n      0x20\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":6716:6801  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3204:3225   */\n      mstore\n        /* \"#utility.yul\":3261:3263   */\n      0x25\n        /* \"#utility.yul\":3241:3259   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3234:3264   */\n      mstore\n        /* \"#utility.yul\":3300:3334   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":3280:3298   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3273:3335   */\n      mstore\n      shl(0xd8, 0x207a65726f)\n        /* \"#utility.yul\":3351:3369   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3344:3379   */\n      mstore\n        /* \"#utility.yul\":3396:3415   */\n      0x84\n      add\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":6716:6801  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n    tag_98:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_97:\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":6835:6895  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_80\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":6844:6849  owner */\n      dup3\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":6851:6858  spender */\n      dup7\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":6879:6894  subtractedValue */\n      dup7\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":6860:6876  currentAllowance */\n      dup5\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":6860:6894  currentAllowance - subtractedValue */\n      sub\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":6835:6843  _approve */\n      tag_74\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":6835:6895  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":3638:3827  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_56:\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":3717:3721  bool */\n      0x00\n        /* \"brownie_projects/bebu_finance/contracts/utils/Context.sol\":666:676  msg.sender */\n      caller\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":3771:3799  _transfer(owner, to, amount) */\n      tag_73\n        /* \"brownie_projects/bebu_finance/contracts/utils/Context.sol\":666:676  msg.sender */\n      dup2\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":3788:3790  to */\n      dup6\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":3792:3798  amount */\n      dup6\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":3771:3780  _transfer */\n      tag_81\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":3771:3799  _transfer(owner, to, amount) */\n      jump\t// in\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10032:10402  function _approve(... */\n    tag_74:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10163:10182  owner != address(0) */\n      dup4\n      and\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10155:10223  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_107\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3628:3630   */\n      0x20\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10155:10223  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3610:3631   */\n      mstore\n        /* \"#utility.yul\":3667:3669   */\n      0x24\n        /* \"#utility.yul\":3647:3665   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":3640:3670   */\n      mstore\n        /* \"#utility.yul\":3706:3740   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":3686:3704   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3679:3741   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":3757:3775   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3750:3784   */\n      mstore\n        /* \"#utility.yul\":3801:3820   */\n      0x84\n      add\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10155:10223  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_98\n        /* \"#utility.yul\":3426:3826   */\n      jump\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10155:10223  require(owner != address(0), \"ERC20: approve from the zero address\") */\n    tag_107:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10241:10262  spender != address(0) */\n      dup3\n      and\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10233:10301  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_110\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4033:4035   */\n      0x20\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10233:10301  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4015:4036   */\n      mstore\n        /* \"#utility.yul\":4072:4074   */\n      0x22\n        /* \"#utility.yul\":4052:4070   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4045:4075   */\n      mstore\n        /* \"#utility.yul\":4111:4145   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":4091:4109   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4084:4146   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":4162:4180   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4155:4187   */\n      mstore\n        /* \"#utility.yul\":4204:4223   */\n      0x84\n      add\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10233:10301  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_98\n        /* \"#utility.yul\":3831:4229   */\n      jump\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10233:10301  require(spender != address(0), \"ERC20: approve to the zero address\") */\n    tag_110:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10312:10330  _allowances[owner] */\n      dup4\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10312:10323  _allowances */\n      0x01\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10312:10330  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10312:10339  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10312:10348  _allowances[owner][spender] = amount */\n      dup6\n      swap1\n      sstore\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10363:10395  Approval(owner, spender, amount) */\n      swap1\n      mload\n        /* \"#utility.yul\":1391:1416   */\n      dup5\n      dup2\n      mstore\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10363:10395  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n        /* \"#utility.yul\":1364:1382   */\n      add\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10363:10395  Approval(owner, spender, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10032:10402  function _approve(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10679:11120  function _spendAllowance(... */\n    tag_79:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":4000:4018  _allowances[owner] */\n      dup4\n      dup2\n      and\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10809:10833  uint256 currentAllowance */\n      0x00\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":4000:4018  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":4000:4011  _allowances */\n      0x01\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":4000:4018  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":4000:4027  _allowances[owner][spender] */\n      swap4\n      dup7\n      and\n      dup4\n      mstore\n      swap3\n      swap1\n      mstore\n      keccak256\n      sload\n      not(0x00)\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10875:10912  currentAllowance != type(uint256).max */\n      dup2\n      eq\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10871:11114  if (currentAllowance != type(uint256).max) {... */\n      tag_120\n      jumpi\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10956:10962  amount */\n      dup2\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10936:10952  currentAllowance */\n      dup2\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10936:10962  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10928:10996  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_117\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4436:4438   */\n      0x20\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10928:10996  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4418:4439   */\n      mstore\n        /* \"#utility.yul\":4475:4477   */\n      0x1d\n        /* \"#utility.yul\":4455:4473   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4448:4478   */\n      mstore\n        /* \"#utility.yul\":4514:4545   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":4494:4512   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4487:4546   */\n      mstore\n        /* \"#utility.yul\":4563:4581   */\n      0x64\n      add\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10928:10996  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_98\n        /* \"#utility.yul\":4234:4587   */\n      jump\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10928:10996  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n    tag_117:\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":11038:11089  _approve(owner, spender, currentAllowance - amount) */\n      tag_120\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":11047:11052  owner */\n      dup5\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":11054:11061  spender */\n      dup5\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":11082:11088  amount */\n      dup5\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":11063:11079  currentAllowance */\n      dup5\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":11063:11088  currentAllowance - amount */\n      sub\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":11038:11046  _approve */\n      tag_74\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":11038:11089  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n    tag_120:\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10799:11120  {... */\n      pop\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":10679:11120  function _spendAllowance(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7397:8048  function _transfer(... */\n    tag_81:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7523:7541  from != address(0) */\n      dup4\n      and\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7515:7583  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_122\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4794:4796   */\n      0x20\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7515:7583  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4776:4797   */\n      mstore\n        /* \"#utility.yul\":4833:4835   */\n      0x25\n        /* \"#utility.yul\":4813:4831   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4806:4836   */\n      mstore\n        /* \"#utility.yul\":4872:4906   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":4852:4870   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4845:4907   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":4923:4941   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4916:4951   */\n      mstore\n        /* \"#utility.yul\":4968:4987   */\n      0x84\n      add\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7515:7583  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_98\n        /* \"#utility.yul\":4592:4993   */\n      jump\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7515:7583  require(from != address(0), \"ERC20: transfer from the zero address\") */\n    tag_122:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7601:7617  to != address(0) */\n      dup3\n      and\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7593:7657  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_125\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5200:5202   */\n      0x20\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7593:7657  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5182:5203   */\n      mstore\n        /* \"#utility.yul\":5239:5241   */\n      0x23\n        /* \"#utility.yul\":5219:5237   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5212:5242   */\n      mstore\n        /* \"#utility.yul\":5278:5312   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":5258:5276   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5251:5313   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":5329:5347   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5322:5355   */\n      mstore\n        /* \"#utility.yul\":5372:5391   */\n      0x84\n      add\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7593:7657  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_98\n        /* \"#utility.yul\":4998:5397   */\n      jump\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7593:7657  require(to != address(0), \"ERC20: transfer to the zero address\") */\n    tag_125:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7739:7754  _balances[from] */\n      dup4\n      and\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7717:7736  uint256 fromBalance */\n      0x00\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7739:7754  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7772:7793  fromBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7764:7836  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_130\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5604:5606   */\n      0x20\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7764:7836  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5586:5607   */\n      mstore\n        /* \"#utility.yul\":5643:5645   */\n      0x26\n        /* \"#utility.yul\":5623:5641   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5616:5646   */\n      mstore\n        /* \"#utility.yul\":5682:5716   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":5662:5680   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5655:5717   */\n      mstore\n      shl(0xd0, 0x616c616e6365)\n        /* \"#utility.yul\":5733:5751   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5726:5762   */\n      mstore\n        /* \"#utility.yul\":5779:5798   */\n      0x84\n      add\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7764:7836  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_98\n        /* \"#utility.yul\":5402:5804   */\n      jump\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7764:7836  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n    tag_130:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7870:7885  _balances[from] */\n      dup1\n      dup6\n      and\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7870:7879  _balances */\n      0x00\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7870:7885  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7888:7908  fromBalance - amount */\n      dup6\n      dup6\n      sub\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7870:7908  _balances[from] = fromBalance - amount */\n      swap1\n      sstore\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7928:7941  _balances[to] */\n      swap2\n      dup6\n      and\n      dup2\n      mstore\n      swap1\n      dup2\n      keccak256\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7928:7951  _balances[to] += amount */\n      dup1\n      sload\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7902:7908  amount */\n      dup5\n      swap3\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7870:7879  _balances */\n      swap1\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7928:7951  _balances[to] += amount */\n      tag_133\n      swap1\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7902:7908  amount */\n      dup5\n      swap1\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7928:7951  _balances[to] += amount */\n      tag_87\n      jump\t// in\n    tag_133:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7982:7984  to */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7967:7993  Transfer(from, to, amount) */\n      and\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7976:7980  from */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7967:7993  Transfer(from, to, amount) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7986:7992  amount */\n      dup5\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7967:7993  Transfer(from, to, amount) */\n      mload(0x40)\n      tag_134\n      swap2\n        /* \"#utility.yul\":1391:1416   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1379:1381   */\n      0x20\n        /* \"#utility.yul\":1364:1382   */\n      add\n      swap1\n        /* \"#utility.yul\":1245:1422   */\n      jump\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":7967:7993  Transfer(from, to, amount) */\n    tag_134:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":8004:8041  _afterTokenTransfer(from, to, amount) */\n      tag_120\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":11704:11825  function _beforeTokenTransfer(... */\n      jump\n        /* \"#utility.yul\":14:611   */\n    tag_18:\n        /* \"#utility.yul\":126:130   */\n      0x00\n        /* \"#utility.yul\":155:157   */\n      0x20\n        /* \"#utility.yul\":184:186   */\n      dup1\n        /* \"#utility.yul\":173:182   */\n      dup4\n        /* \"#utility.yul\":166:187   */\n      mstore\n        /* \"#utility.yul\":216:222   */\n      dup4\n        /* \"#utility.yul\":210:223   */\n      mload\n        /* \"#utility.yul\":259:265   */\n      dup1\n        /* \"#utility.yul\":254:256   */\n      dup3\n        /* \"#utility.yul\":243:252   */\n      dup6\n        /* \"#utility.yul\":239:257   */\n      add\n        /* \"#utility.yul\":232:266   */\n      mstore\n        /* \"#utility.yul\":284:285   */\n      0x00\n        /* \"#utility.yul\":294:434   */\n    tag_142:\n        /* \"#utility.yul\":308:314   */\n      dup2\n        /* \"#utility.yul\":305:306   */\n      dup2\n        /* \"#utility.yul\":302:315   */\n      lt\n        /* \"#utility.yul\":294:434   */\n      iszero\n      tag_144\n      jumpi\n        /* \"#utility.yul\":403:417   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":399:422   */\n      dup4\n      add\n        /* \"#utility.yul\":393:423   */\n      mload\n        /* \"#utility.yul\":369:386   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":388:390   */\n      0x40\n        /* \"#utility.yul\":365:391   */\n      add\n        /* \"#utility.yul\":358:424   */\n      mstore\n        /* \"#utility.yul\":323:333   */\n      dup3\n      add\n        /* \"#utility.yul\":294:434   */\n      jump(tag_142)\n    tag_144:\n        /* \"#utility.yul\":452:458   */\n      dup2\n        /* \"#utility.yul\":449:450   */\n      dup2\n        /* \"#utility.yul\":446:459   */\n      gt\n        /* \"#utility.yul\":443:534   */\n      iszero\n      tag_145\n      jumpi\n        /* \"#utility.yul\":522:523   */\n      0x00\n        /* \"#utility.yul\":517:519   */\n      0x40\n        /* \"#utility.yul\":508:514   */\n      dup4\n        /* \"#utility.yul\":497:506   */\n      dup8\n        /* \"#utility.yul\":493:515   */\n      add\n        /* \"#utility.yul\":489:520   */\n      add\n        /* \"#utility.yul\":482:524   */\n      mstore\n        /* \"#utility.yul\":443:534   */\n    tag_145:\n      pop\n        /* \"#utility.yul\":595:597   */\n      0x1f\n        /* \"#utility.yul\":574:589   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":570:599   */\n      and\n        /* \"#utility.yul\":555:600   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":602:604   */\n      0x40\n        /* \"#utility.yul\":551:605   */\n      add\n      swap4\n        /* \"#utility.yul\":14:611   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":616:789   */\n    tag_139:\n        /* \"#utility.yul\":684:704   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":733:764   */\n      dup2\n      and\n        /* \"#utility.yul\":723:765   */\n      dup2\n      eq\n        /* \"#utility.yul\":713:783   */\n      tag_147\n      jumpi\n        /* \"#utility.yul\":779:780   */\n      0x00\n        /* \"#utility.yul\":776:777   */\n      dup1\n        /* \"#utility.yul\":769:781   */\n      revert\n        /* \"#utility.yul\":713:783   */\n    tag_147:\n        /* \"#utility.yul\":616:789   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":794:1048   */\n    tag_21:\n        /* \"#utility.yul\":862:868   */\n      0x00\n        /* \"#utility.yul\":870:876   */\n      dup1\n        /* \"#utility.yul\":923:925   */\n      0x40\n        /* \"#utility.yul\":911:920   */\n      dup4\n        /* \"#utility.yul\":902:909   */\n      dup6\n        /* \"#utility.yul\":898:921   */\n      sub\n        /* \"#utility.yul\":894:926   */\n      slt\n        /* \"#utility.yul\":891:943   */\n      iszero\n      tag_149\n      jumpi\n        /* \"#utility.yul\":939:940   */\n      0x00\n        /* \"#utility.yul\":936:937   */\n      dup1\n        /* \"#utility.yul\":929:941   */\n      revert\n        /* \"#utility.yul\":891:943   */\n    tag_149:\n        /* \"#utility.yul\":962:991   */\n      tag_150\n        /* \"#utility.yul\":981:990   */\n      dup4\n        /* \"#utility.yul\":962:991   */\n      tag_139\n      jump\t// in\n    tag_150:\n        /* \"#utility.yul\":952:991   */\n      swap5\n        /* \"#utility.yul\":1038:1040   */\n      0x20\n        /* \"#utility.yul\":1023:1041   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":1010:1042   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":794:1048   */\n      jump\t// out\n        /* \"#utility.yul\":1427:1755   */\n    tag_31:\n        /* \"#utility.yul\":1504:1510   */\n      0x00\n        /* \"#utility.yul\":1512:1518   */\n      dup1\n        /* \"#utility.yul\":1520:1526   */\n      0x00\n        /* \"#utility.yul\":1573:1575   */\n      0x60\n        /* \"#utility.yul\":1561:1570   */\n      dup5\n        /* \"#utility.yul\":1552:1559   */\n      dup7\n        /* \"#utility.yul\":1548:1571   */\n      sub\n        /* \"#utility.yul\":1544:1576   */\n      slt\n        /* \"#utility.yul\":1541:1593   */\n      iszero\n      tag_154\n      jumpi\n        /* \"#utility.yul\":1589:1590   */\n      0x00\n        /* \"#utility.yul\":1586:1587   */\n      dup1\n        /* \"#utility.yul\":1579:1591   */\n      revert\n        /* \"#utility.yul\":1541:1593   */\n    tag_154:\n        /* \"#utility.yul\":1612:1641   */\n      tag_155\n        /* \"#utility.yul\":1631:1640   */\n      dup5\n        /* \"#utility.yul\":1612:1641   */\n      tag_139\n      jump\t// in\n    tag_155:\n        /* \"#utility.yul\":1602:1641   */\n      swap3\n      pop\n        /* \"#utility.yul\":1660:1698   */\n      tag_156\n        /* \"#utility.yul\":1694:1696   */\n      0x20\n        /* \"#utility.yul\":1683:1692   */\n      dup6\n        /* \"#utility.yul\":1679:1697   */\n      add\n        /* \"#utility.yul\":1660:1698   */\n      tag_139\n      jump\t// in\n    tag_156:\n        /* \"#utility.yul\":1650:1698   */\n      swap2\n      pop\n        /* \"#utility.yul\":1745:1747   */\n      0x40\n        /* \"#utility.yul\":1734:1743   */\n      dup5\n        /* \"#utility.yul\":1730:1748   */\n      add\n        /* \"#utility.yul\":1717:1749   */\n      calldataload\n        /* \"#utility.yul\":1707:1749   */\n      swap1\n      pop\n        /* \"#utility.yul\":1427:1755   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1949:2135   */\n    tag_44:\n        /* \"#utility.yul\":2008:2014   */\n      0x00\n        /* \"#utility.yul\":2061:2063   */\n      0x20\n        /* \"#utility.yul\":2049:2058   */\n      dup3\n        /* \"#utility.yul\":2040:2047   */\n      dup5\n        /* \"#utility.yul\":2036:2059   */\n      sub\n        /* \"#utility.yul\":2032:2064   */\n      slt\n        /* \"#utility.yul\":2029:2081   */\n      iszero\n      tag_159\n      jumpi\n        /* \"#utility.yul\":2077:2078   */\n      0x00\n        /* \"#utility.yul\":2074:2075   */\n      dup1\n        /* \"#utility.yul\":2067:2079   */\n      revert\n        /* \"#utility.yul\":2029:2081   */\n    tag_159:\n        /* \"#utility.yul\":2100:2129   */\n      tag_160\n        /* \"#utility.yul\":2119:2128   */\n      dup3\n        /* \"#utility.yul\":2100:2129   */\n      tag_139\n      jump\t// in\n    tag_160:\n        /* \"#utility.yul\":2090:2129   */\n      swap4\n        /* \"#utility.yul\":1949:2135   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2140:2400   */\n    tag_60:\n        /* \"#utility.yul\":2208:2214   */\n      0x00\n        /* \"#utility.yul\":2216:2222   */\n      dup1\n        /* \"#utility.yul\":2269:2271   */\n      0x40\n        /* \"#utility.yul\":2257:2266   */\n      dup4\n        /* \"#utility.yul\":2248:2255   */\n      dup6\n        /* \"#utility.yul\":2244:2267   */\n      sub\n        /* \"#utility.yul\":2240:2272   */\n      slt\n        /* \"#utility.yul\":2237:2289   */\n      iszero\n      tag_162\n      jumpi\n        /* \"#utility.yul\":2285:2286   */\n      0x00\n        /* \"#utility.yul\":2282:2283   */\n      dup1\n        /* \"#utility.yul\":2275:2287   */\n      revert\n        /* \"#utility.yul\":2237:2289   */\n    tag_162:\n        /* \"#utility.yul\":2308:2337   */\n      tag_163\n        /* \"#utility.yul\":2327:2336   */\n      dup4\n        /* \"#utility.yul\":2308:2337   */\n      tag_139\n      jump\t// in\n    tag_163:\n        /* \"#utility.yul\":2298:2337   */\n      swap2\n      pop\n        /* \"#utility.yul\":2356:2394   */\n      tag_164\n        /* \"#utility.yul\":2390:2392   */\n      0x20\n        /* \"#utility.yul\":2379:2388   */\n      dup5\n        /* \"#utility.yul\":2375:2393   */\n      add\n        /* \"#utility.yul\":2356:2394   */\n      tag_139\n      jump\t// in\n    tag_164:\n        /* \"#utility.yul\":2346:2394   */\n      swap1\n      pop\n        /* \"#utility.yul\":2140:2400   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2405:2785   */\n    tag_65:\n        /* \"#utility.yul\":2484:2485   */\n      0x01\n        /* \"#utility.yul\":2480:2492   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":2527:2539   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":2548:2609   */\n      tag_166\n      jumpi\n        /* \"#utility.yul\":2602:2606   */\n      0x7f\n        /* \"#utility.yul\":2594:2600   */\n      dup3\n        /* \"#utility.yul\":2590:2607   */\n      and\n        /* \"#utility.yul\":2580:2607   */\n      swap2\n      pop\n        /* \"#utility.yul\":2548:2609   */\n    tag_166:\n        /* \"#utility.yul\":2655:2657   */\n      0x20\n        /* \"#utility.yul\":2647:2653   */\n      dup3\n        /* \"#utility.yul\":2644:2658   */\n      lt\n        /* \"#utility.yul\":2624:2642   */\n      dup2\n        /* \"#utility.yul\":2621:2659   */\n      sub\n        /* \"#utility.yul\":2618:2779   */\n      tag_167\n      jumpi\n        /* \"#utility.yul\":2701:2711   */\n      0x4e487b71\n        /* \"#utility.yul\":2696:2699   */\n      0xe0\n        /* \"#utility.yul\":2692:2712   */\n      shl\n        /* \"#utility.yul\":2689:2690   */\n      0x00\n        /* \"#utility.yul\":2682:2713   */\n      mstore\n        /* \"#utility.yul\":2736:2740   */\n      0x22\n        /* \"#utility.yul\":2733:2734   */\n      0x04\n        /* \"#utility.yul\":2726:2741   */\n      mstore\n        /* \"#utility.yul\":2764:2768   */\n      0x24\n        /* \"#utility.yul\":2761:2762   */\n      0x00\n        /* \"#utility.yul\":2754:2769   */\n      revert\n        /* \"#utility.yul\":2618:2779   */\n    tag_167:\n      pop\n        /* \"#utility.yul\":2405:2785   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2790:3015   */\n    tag_87:\n        /* \"#utility.yul\":2830:2833   */\n      0x00\n        /* \"#utility.yul\":2861:2862   */\n      dup3\n        /* \"#utility.yul\":2857:2863   */\n      not\n        /* \"#utility.yul\":2854:2855   */\n      dup3\n        /* \"#utility.yul\":2851:2864   */\n      gt\n        /* \"#utility.yul\":2848:2984   */\n      iszero\n      tag_169\n      jumpi\n        /* \"#utility.yul\":2906:2916   */\n      0x4e487b71\n        /* \"#utility.yul\":2901:2904   */\n      0xe0\n        /* \"#utility.yul\":2897:2917   */\n      shl\n        /* \"#utility.yul\":2894:2895   */\n      0x00\n        /* \"#utility.yul\":2887:2918   */\n      mstore\n        /* \"#utility.yul\":2941:2945   */\n      0x11\n        /* \"#utility.yul\":2938:2939   */\n      0x04\n        /* \"#utility.yul\":2931:2946   */\n      mstore\n        /* \"#utility.yul\":2969:2973   */\n      0x24\n        /* \"#utility.yul\":2966:2967   */\n      0x00\n        /* \"#utility.yul\":2959:2974   */\n      revert\n        /* \"#utility.yul\":2848:2984   */\n    tag_169:\n      pop\n        /* \"#utility.yul\":3000:3009   */\n      add\n      swap1\n        /* \"#utility.yul\":2790:3015   */\n      jump\t// out\n\n    auxdata: 0xa26469706673582212201586af800a92829c007b1e9beadde15d1ec74d77c12024266c5cac675e687a2664736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_907": {
									"entryPoint": null,
									"id": 907,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_decode_string_fromMemory": {
									"entryPoint": 292,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory": {
									"entryPoint": 475,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"extract_byte_array_length": {
									"entryPoint": 581,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x41": {
									"entryPoint": 270,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:1985:9",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:9",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "46:95:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "63:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "70:3:9",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "75:10:9",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "66:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "66:20:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "56:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "56:31:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "56:31:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "103:1:9",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "106:4:9",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "96:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "96:15:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "96:15:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "127:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "130:4:9",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "120:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "120:15:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "120:15:9"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "14:127:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "210:821:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "259:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "268:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "271:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "261:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "261:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "261:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "238:6:9"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "246:4:9",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "234:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "234:17:9"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "253:3:9"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "230:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "230:27:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "223:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "223:35:9"
															},
															"nodeType": "YulIf",
															"src": "220:55:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "284:23:9",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "300:6:9"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "294:5:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "294:13:9"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "288:2:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "316:28:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "334:2:9",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "338:1:9",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "330:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "330:10:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "342:1:9",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "326:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "326:18:9"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "320:2:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "367:22:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "369:16:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "369:18:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "369:18:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "359:2:9"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "363:2:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "356:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "356:10:9"
															},
															"nodeType": "YulIf",
															"src": "353:36:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "398:17:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "412:2:9",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "408:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "408:7:9"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "402:2:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "424:23:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "444:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "438:5:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "438:9:9"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "428:6:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "456:71:9",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "478:6:9"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "_1",
																										"nodeType": "YulIdentifier",
																										"src": "502:2:9"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "506:4:9",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "498:3:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "498:13:9"
																							},
																							{
																								"name": "_3",
																								"nodeType": "YulIdentifier",
																								"src": "513:2:9"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "494:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "494:22:9"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "518:2:9",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "490:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "490:31:9"
																			},
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "523:2:9"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "486:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "486:40:9"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "474:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "474:53:9"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "460:10:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "586:22:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "588:16:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "588:18:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "588:18:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "545:10:9"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "557:2:9"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "542:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "542:18:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "565:10:9"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "577:6:9"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "562:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "562:22:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "539:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "539:46:9"
															},
															"nodeType": "YulIf",
															"src": "536:72:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "624:2:9",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "628:10:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "617:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "617:22:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "617:22:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "655:6:9"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "663:2:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "648:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "648:18:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "648:18:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "675:14:9",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "685:4:9",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "679:2:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "735:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "744:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "747:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "737:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "737:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "737:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "712:6:9"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "720:2:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "708:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "708:15:9"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "725:2:9"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "704:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "704:24:9"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "730:3:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "701:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "701:33:9"
															},
															"nodeType": "YulIf",
															"src": "698:53:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "760:10:9",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "769:1:9",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "764:1:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "825:87:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "854:6:9"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "862:1:9"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "850:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "850:14:9"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "866:2:9"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "846:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "846:23:9"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "offset",
																											"nodeType": "YulIdentifier",
																											"src": "885:6:9"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "893:1:9"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "881:3:9"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "881:14:9"
																								},
																								{
																									"name": "_4",
																									"nodeType": "YulIdentifier",
																									"src": "897:2:9"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "877:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "877:23:9"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "871:5:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "871:30:9"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "839:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "839:63:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "839:63:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "790:1:9"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "793:2:9"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "787:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "787:9:9"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "797:19:9",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "799:15:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "808:1:9"
																				},
																				{
																					"name": "_4",
																					"nodeType": "YulIdentifier",
																					"src": "811:2:9"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "804:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "804:10:9"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "799:1:9"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "783:3:9",
																"statements": []
															},
															"src": "779:133:9"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "942:59:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "971:6:9"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "979:2:9"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "967:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "967:15:9"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "984:2:9"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "963:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "963:24:9"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "989:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "956:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "956:35:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "956:35:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "927:1:9"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "930:2:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "924:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "924:9:9"
															},
															"nodeType": "YulIf",
															"src": "921:80:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1010:15:9",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "1019:6:9"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "1010:5:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_string_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "184:6:9",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "192:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "200:5:9",
														"type": ""
													}
												],
												"src": "146:885:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1154:444:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1200:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1209:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1212:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1202:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1202:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1202:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1175:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1184:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1171:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1171:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1196:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1167:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1167:32:9"
															},
															"nodeType": "YulIf",
															"src": "1164:52:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1225:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1245:9:9"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1239:5:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1239:16:9"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "1229:6:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1264:28:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1282:2:9",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1286:1:9",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1278:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1278:10:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1290:1:9",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "1274:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1274:18:9"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1268:2:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1319:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1328:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1331:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1321:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1321:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1321:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1307:6:9"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1315:2:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1304:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1304:14:9"
															},
															"nodeType": "YulIf",
															"src": "1301:34:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1344:71:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1387:9:9"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "1398:6:9"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1383:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1383:22:9"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1407:7:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1354:28:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1354:61:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1344:6:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1424:41:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1450:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1461:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1446:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1446:18:9"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1440:5:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1440:25:9"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "1428:8:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1494:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1503:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1506:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1496:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1496:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1496:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "1480:8:9"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1490:2:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1477:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1477:16:9"
															},
															"nodeType": "YulIf",
															"src": "1474:36:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1519:73:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1562:9:9"
																			},
																			{
																				"name": "offset_1",
																				"nodeType": "YulIdentifier",
																				"src": "1573:8:9"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1558:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1558:24:9"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1584:7:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1529:28:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1529:63:9"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1519:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1112:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1123:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1135:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1143:6:9",
														"type": ""
													}
												],
												"src": "1036:562:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1658:325:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1668:22:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1682:1:9",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1685:4:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "1678:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1678:12:9"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "1668:6:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1699:38:9",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1729:4:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1735:1:9",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1725:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1725:12:9"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "1703:18:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1776:31:9",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1778:27:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "1792:6:9"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1800:4:9",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "1788:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1788:17:9"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1778:6:9"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1756:18:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1749:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1749:26:9"
															},
															"nodeType": "YulIf",
															"src": "1746:61:9"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1866:111:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1887:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1894:3:9",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1899:10:9",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "1890:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1890:20:9"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1880:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1880:31:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1880:31:9"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1931:1:9",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1934:4:9",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1924:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1924:15:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1924:15:9"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1959:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1962:4:9",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1952:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1952:15:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1952:15:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1822:18:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1845:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1853:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1842:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1842:14:9"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "1819:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1819:38:9"
															},
															"nodeType": "YulIf",
															"src": "1816:161:9"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "1638:4:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1647:6:9",
														"type": ""
													}
												],
												"src": "1603:380:9"
											}
										]
									},
									"contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        if gt(i, _1)\n        {\n            mstore(add(add(memPtr, _1), _4), 0)\n        }\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}",
									"id": 9,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b5060405162000b5e38038062000b5e8339810160408190526200003491620001db565b81516200004990600390602085019062000068565b5080516200005f90600490602084019062000068565b50505062000281565b828054620000769062000245565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013657600080fd5b81516001600160401b03808211156200015357620001536200010e565b604051601f8301601f19908116603f011681019082821181831017156200017e576200017e6200010e565b816040528381526020925086838588010111156200019b57600080fd5b600091505b83821015620001bf5785820183015181830184015290820190620001a0565b83821115620001d15760008385830101525b9695505050505050565b60008060408385031215620001ef57600080fd5b82516001600160401b03808211156200020757600080fd5b620002158683870162000124565b935060208501519150808211156200022c57600080fd5b506200023b8582860162000124565b9150509250929050565b600181811c908216806200025a57607f821691505b6020821081036200027b57634e487b7160e01b600052602260045260246000fd5b50919050565b6108cd80620002916000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101c6565b6040516100c3919061070b565b60405180910390f35b6100df6100da36600461077c565b610258565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f3660046107a6565b610270565b604051601281526020016100c3565b6100df61013136600461077c565b610294565b6100f36101443660046107e2565b6001600160a01b031660009081526020819052604090205490565b6100b66102d3565b6100df61017536600461077c565b6102e2565b6100df61018836600461077c565b610379565b6100f361019b366004610804565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101d590610837565b80601f016020809104026020016040519081016040528092919081815260200182805461020190610837565b801561024e5780601f106102235761010080835404028352916020019161024e565b820191906000526020600020905b81548152906001019060200180831161023157829003601f168201915b5050505050905090565b600033610266818585610387565b5060019392505050565b60003361027e8582856104ab565b61028985858561053d565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061026690829086906102ce908790610871565b610387565b6060600480546101d590610837565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091908381101561036c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102898286868403610387565b60003361026681858561053d565b6001600160a01b0383166103e95760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610363565b6001600160a01b03821661044a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610363565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114610537578181101561052a5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610363565b6105378484848403610387565b50505050565b6001600160a01b0383166105a15760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610363565b6001600160a01b0382166106035760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610363565b6001600160a01b0383166000908152602081905260409020548181101561067b5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610363565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106b2908490610871565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106fe91815260200190565b60405180910390a3610537565b600060208083528351808285015260005b818110156107385785810183015185820160400152820161071c565b8181111561074a576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461077757600080fd5b919050565b6000806040838503121561078f57600080fd5b61079883610760565b946020939093013593505050565b6000806000606084860312156107bb57600080fd5b6107c484610760565b92506107d260208501610760565b9150604084013590509250925092565b6000602082840312156107f457600080fd5b6107fd82610760565b9392505050565b6000806040838503121561081757600080fd5b61082083610760565b915061082e60208401610760565b90509250929050565b600181811c9082168061084b57607f821691505b60208210810361086b57634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561089257634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212201586af800a92829c007b1e9beadde15d1ec74d77c12024266c5cac675e687a2664736f6c634300080d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xB5E CODESIZE SUB DUP1 PUSH3 0xB5E DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1DB JUMP JUMPDEST DUP2 MLOAD PUSH3 0x49 SWAP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x68 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x5F SWAP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x68 JUMP JUMPDEST POP POP POP PUSH3 0x281 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x76 SWAP1 PUSH3 0x245 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x9A JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xE5 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xB5 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xE5 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xE5 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xE5 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xC8 JUMP JUMPDEST POP PUSH3 0xF3 SWAP3 SWAP2 POP PUSH3 0xF7 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0xF3 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0xF8 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x136 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x153 JUMPI PUSH3 0x153 PUSH3 0x10E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x17E JUMPI PUSH3 0x17E PUSH3 0x10E JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x19B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x1BF JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x1A0 JUMP JUMPDEST DUP4 DUP3 GT ISZERO PUSH3 0x1D1 JUMPI PUSH1 0x0 DUP4 DUP6 DUP4 ADD ADD MSTORE JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x215 DUP7 DUP4 DUP8 ADD PUSH3 0x124 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x22C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x23B DUP6 DUP3 DUP7 ADD PUSH3 0x124 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x25A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x27B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x8CD DUP1 PUSH3 0x291 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x70B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x77C JUMP JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x7A6 JUMP JUMPDEST PUSH2 0x270 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x77C JUMP JUMPDEST PUSH2 0x294 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x7E2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x2D3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x77C JUMP JUMPDEST PUSH2 0x2E2 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x77C JUMP JUMPDEST PUSH2 0x379 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x804 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1D5 SWAP1 PUSH2 0x837 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x201 SWAP1 PUSH2 0x837 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x24E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x223 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x24E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x231 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x266 DUP2 DUP6 DUP6 PUSH2 0x387 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x27E DUP6 DUP3 DUP6 PUSH2 0x4AB JUMP JUMPDEST PUSH2 0x289 DUP6 DUP6 DUP6 PUSH2 0x53D JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x266 SWAP1 DUP3 SWAP1 DUP7 SWAP1 PUSH2 0x2CE SWAP1 DUP8 SWAP1 PUSH2 0x871 JUMP JUMPDEST PUSH2 0x387 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x1D5 SWAP1 PUSH2 0x837 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 DUP2 LT ISZERO PUSH2 0x36C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x289 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x387 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x266 DUP2 DUP6 DUP6 PUSH2 0x53D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3E9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x44A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0x537 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x52A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x363 JUMP JUMPDEST PUSH2 0x537 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x387 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x5A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x603 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x67B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x6B2 SWAP1 DUP5 SWAP1 PUSH2 0x871 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x6FE SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x537 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x738 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x71C JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x74A JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x777 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x78F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x798 DUP4 PUSH2 0x760 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x7BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7C4 DUP5 PUSH2 0x760 JUMP JUMPDEST SWAP3 POP PUSH2 0x7D2 PUSH1 0x20 DUP6 ADD PUSH2 0x760 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7FD DUP3 PUSH2 0x760 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x817 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x820 DUP4 PUSH2 0x760 JUMP JUMPDEST SWAP2 POP PUSH2 0x82E PUSH1 0x20 DUP5 ADD PUSH2 0x760 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x84B JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x86B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x892 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ISZERO DUP7 0xAF DUP1 EXP SWAP3 DUP3 SWAP13 STOP PUSH28 0x1E9BEADDE15D1EC74D77C12024266C5CAC675E687A2664736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "1312:11223:5:-:0;;;1887:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1953:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;1976:17:5;;;;:7;;:17;;;;;:::i;:::-;;1887:113;;1312:11223;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1312:11223:5;;;-1:-1:-1;1312:11223:5;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:9;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:885;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:9;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:9;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;930:2;927:1;924:9;921:80;;;989:1;984:2;979;971:6;967:15;963:24;956:35;921:80;1019:6;146:885;-1:-1:-1;;;;;;146:885:9:o;1036:562::-;1135:6;1143;1196:2;1184:9;1175:7;1171:23;1167:32;1164:52;;;1212:1;1209;1202:12;1164:52;1239:16;;-1:-1:-1;;;;;1304:14:9;;;1301:34;;;1331:1;1328;1321:12;1301:34;1354:61;1407:7;1398:6;1387:9;1383:22;1354:61;:::i;:::-;1344:71;;1461:2;1450:9;1446:18;1440:25;1424:41;;1490:2;1480:8;1477:16;1474:36;;;1506:1;1503;1496:12;1474:36;;1529:63;1584:7;1573:8;1562:9;1558:24;1529:63;:::i;:::-;1519:73;;;1036:562;;;;;:::o;1603:380::-;1682:1;1678:12;;;;1725;;;1746:61;;1800:4;1792:6;1788:17;1778:27;;1746:61;1853:2;1845:6;1842:14;1822:18;1819:38;1816:161;;1899:10;1894:3;1890:20;1887:1;1880:31;1934:4;1931:1;1924:15;1962:4;1959:1;1952:15;1816:161;;1603:380;;;:::o;:::-;1312:11223:5;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_afterTokenTransfer_1449": {
									"entryPoint": null,
									"id": 1449,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_1384": {
									"entryPoint": 903,
									"id": 1384,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_1438": {
									"entryPoint": null,
									"id": 1438,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_msgSender_341": {
									"entryPoint": null,
									"id": 341,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_spendAllowance_1427": {
									"entryPoint": 1195,
									"id": 1427,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transfer_1211": {
									"entryPoint": 1341,
									"id": 1211,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@allowance_1004": {
									"entryPoint": null,
									"id": 1004,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_1029": {
									"entryPoint": 600,
									"id": 1029,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_961": {
									"entryPoint": null,
									"id": 961,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_937": {
									"entryPoint": null,
									"id": 937,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@decreaseAllowance_1134": {
									"entryPoint": 738,
									"id": 1134,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@increaseAllowance_1092": {
									"entryPoint": 660,
									"id": 1092,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@name_917": {
									"entryPoint": 454,
									"id": 917,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@symbol_927": {
									"entryPoint": 723,
									"id": 927,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalSupply_947": {
									"entryPoint": null,
									"id": 947,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_1062": {
									"entryPoint": 624,
									"id": 1062,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transfer_986": {
									"entryPoint": 889,
									"id": 986,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_address": {
									"entryPoint": 1888,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 2018,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 2052,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 1958,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 1916,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 1803,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 2161,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 2103,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:5806:9",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:9",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "135:476:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "145:12:9",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "155:2:9",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "149:2:9",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "173:9:9"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "184:2:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "166:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "166:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "166:21:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "196:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "216:6:9"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "210:5:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "210:13:9"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "200:6:9",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "243:9:9"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "254:2:9"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "239:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "239:18:9"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "259:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "232:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "232:34:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "232:34:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "275:10:9",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "284:1:9",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "279:1:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "344:90:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "373:9:9"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "384:1:9"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "369:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "369:17:9"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "388:2:9",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "365:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "365:26:9"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "407:6:9"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "415:1:9"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "403:3:9"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "403:14:9"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "419:2:9"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "399:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "399:23:9"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "393:5:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "393:30:9"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "358:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "358:66:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "358:66:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "305:1:9"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "308:6:9"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "302:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "302:13:9"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "316:19:9",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "318:15:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "327:1:9"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "330:2:9"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "323:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "323:10:9"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "318:1:9"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "298:3:9",
																"statements": []
															},
															"src": "294:140:9"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "468:66:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "497:9:9"
																								},
																								{
																									"name": "length",
																									"nodeType": "YulIdentifier",
																									"src": "508:6:9"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "493:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "493:22:9"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "517:2:9",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "489:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "489:31:9"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "522:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "482:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "482:42:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "482:42:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "449:1:9"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "452:6:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "446:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "446:13:9"
															},
															"nodeType": "YulIf",
															"src": "443:91:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "543:62:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "559:9:9"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "578:6:9"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "586:2:9",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "574:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "574:15:9"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "595:2:9",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "591:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "591:7:9"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "570:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "570:29:9"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "555:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "555:45:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "602:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "551:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "551:54:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "543:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "104:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "115:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "126:4:9",
														"type": ""
													}
												],
												"src": "14:597:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "665:124:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "675:29:9",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "697:6:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "684:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "684:20:9"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "675:5:9"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "767:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "776:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "779:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "769:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "769:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "769:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "726:5:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "737:5:9"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "752:3:9",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "757:1:9",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "748:3:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "748:11:9"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "761:1:9",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "744:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "744:19:9"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "733:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "733:31:9"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "723:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "723:42:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "716:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "716:50:9"
															},
															"nodeType": "YulIf",
															"src": "713:70:9"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "644:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "655:5:9",
														"type": ""
													}
												],
												"src": "616:173:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "881:167:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "927:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "936:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "939:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "929:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "929:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "929:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "902:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "911:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "898:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "898:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "923:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "894:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "894:32:9"
															},
															"nodeType": "YulIf",
															"src": "891:52:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "952:39:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "981:9:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "962:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "962:29:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "952:6:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1000:42:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1027:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1038:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1023:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1023:18:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1010:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1010:32:9"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1000:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "839:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "850:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "862:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "870:6:9",
														"type": ""
													}
												],
												"src": "794:254:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1148:92:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1158:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1170:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1181:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1166:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1166:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1158:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1200:9:9"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1225:6:9"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1218:6:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1218:14:9"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1211:6:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1211:22:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1193:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1193:41:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1193:41:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1117:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1128:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1139:4:9",
														"type": ""
													}
												],
												"src": "1053:187:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1346:76:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1356:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1368:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1379:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1364:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1364:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1356:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1398:9:9"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1409:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1391:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1391:25:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1391:25:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1315:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1326:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1337:4:9",
														"type": ""
													}
												],
												"src": "1245:177:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1531:224:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1577:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1586:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1589:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1579:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1579:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1579:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1552:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1561:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1548:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1548:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1573:2:9",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1544:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1544:32:9"
															},
															"nodeType": "YulIf",
															"src": "1541:52:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1602:39:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1631:9:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1612:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1612:29:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1602:6:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1650:48:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1683:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1694:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1679:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1679:18:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1660:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1660:38:9"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1650:6:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1707:42:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1734:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1745:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1730:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1730:18:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1717:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1717:32:9"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "1707:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1481:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1492:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1504:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1512:6:9",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1520:6:9",
														"type": ""
													}
												],
												"src": "1427:328:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1857:87:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1867:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1879:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1890:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1875:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1875:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1867:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1909:9:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1924:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1932:4:9",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1920:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1920:17:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1902:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1902:36:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1902:36:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1826:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1837:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1848:4:9",
														"type": ""
													}
												],
												"src": "1760:184:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2019:116:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2065:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2074:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2077:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2067:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2067:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2067:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2040:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2049:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2036:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2036:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2061:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2032:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2032:32:9"
															},
															"nodeType": "YulIf",
															"src": "2029:52:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2090:39:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2119:9:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2100:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2100:29:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2090:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1985:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1996:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2008:6:9",
														"type": ""
													}
												],
												"src": "1949:186:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2227:173:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2273:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2282:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2285:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2275:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2275:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2275:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2248:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2257:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2244:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2244:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2269:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2240:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2240:32:9"
															},
															"nodeType": "YulIf",
															"src": "2237:52:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2298:39:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2327:9:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2308:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2308:29:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2298:6:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2346:48:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2379:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2390:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2375:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2375:18:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2356:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2356:38:9"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2346:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2185:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2196:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2208:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2216:6:9",
														"type": ""
													}
												],
												"src": "2140:260:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2460:325:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2470:22:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2484:1:9",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "2487:4:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "2480:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2480:12:9"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "2470:6:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2501:38:9",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "2531:4:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2537:1:9",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2527:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2527:12:9"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "2505:18:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2578:31:9",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2580:27:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "2594:6:9"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2602:4:9",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "2590:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2590:17:9"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2580:6:9"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "2558:18:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2551:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2551:26:9"
															},
															"nodeType": "YulIf",
															"src": "2548:61:9"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2668:111:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2689:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2696:3:9",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2701:10:9",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "2692:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2692:20:9"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2682:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2682:31:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2682:31:9"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2733:1:9",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2736:4:9",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2726:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2726:15:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2726:15:9"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2761:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2764:4:9",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2754:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2754:15:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2754:15:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "2624:18:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2647:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2655:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "2644:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2644:14:9"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "2621:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2621:38:9"
															},
															"nodeType": "YulIf",
															"src": "2618:161:9"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "2440:4:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "2449:6:9",
														"type": ""
													}
												],
												"src": "2405:380:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2838:177:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2873:111:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2894:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2901:3:9",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2906:10:9",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "2897:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2897:20:9"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2887:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2887:31:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2887:31:9"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2938:1:9",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2941:4:9",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2931:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2931:15:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2931:15:9"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2966:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2969:4:9",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2959:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2959:15:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2959:15:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2854:1:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2861:1:9"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "2857:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2857:6:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2851:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2851:13:9"
															},
															"nodeType": "YulIf",
															"src": "2848:136:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2993:16:9",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3004:1:9"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3007:1:9"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3000:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3000:9:9"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "2993:3:9"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2821:1:9",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2824:1:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "2830:3:9",
														"type": ""
													}
												],
												"src": "2790:225:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3194:227:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3211:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3222:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3204:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3204:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3204:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3245:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3256:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3241:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3241:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3261:2:9",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3234:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3234:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3234:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3284:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3295:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3280:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3280:18:9"
																	},
																	{
																		"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3300:34:9",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3273:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3273:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3273:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3355:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3366:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3351:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3351:18:9"
																	},
																	{
																		"hexValue": "207a65726f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3371:7:9",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3344:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3344:35:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3344:35:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3388:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3400:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3411:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3396:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3396:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3388:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3171:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3185:4:9",
														"type": ""
													}
												],
												"src": "3020:401:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3600:226:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3617:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3628:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3610:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3610:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3610:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3651:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3662:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3647:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3647:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3667:2:9",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3640:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3640:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3640:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3690:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3701:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3686:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3686:18:9"
																	},
																	{
																		"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f20616464",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3706:34:9",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3679:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3679:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3679:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3761:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3772:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3757:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3757:18:9"
																	},
																	{
																		"hexValue": "72657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3777:6:9",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3750:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3750:34:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3750:34:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3793:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3805:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3816:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3801:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3801:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3793:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3577:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3591:4:9",
														"type": ""
													}
												],
												"src": "3426:400:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4005:224:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4022:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4033:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4015:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4015:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4015:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4056:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4067:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4052:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4052:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4072:2:9",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4045:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4045:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4045:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4095:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4106:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4091:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4091:18:9"
																	},
																	{
																		"hexValue": "45524332303a20617070726f766520746f20746865207a65726f206164647265",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4111:34:9",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4084:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4084:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4084:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4166:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4177:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4162:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4162:18:9"
																	},
																	{
																		"hexValue": "7373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4182:4:9",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4155:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4155:32:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4155:32:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4196:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4208:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4219:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4204:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4204:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4196:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3982:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3996:4:9",
														"type": ""
													}
												],
												"src": "3831:398:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4408:179:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4425:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4436:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4418:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4418:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4418:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4459:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4470:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4455:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4455:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4475:2:9",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4448:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4448:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4448:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4498:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4509:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4494:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4494:18:9"
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4514:31:9",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4487:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4487:59:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4487:59:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4555:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4567:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4578:2:9",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4563:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4563:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4555:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4385:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4399:4:9",
														"type": ""
													}
												],
												"src": "4234:353:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4766:227:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4783:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4794:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4776:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4776:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4776:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4817:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4828:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4813:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4813:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4833:2:9",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4806:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4806:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4806:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4856:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4867:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4852:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4852:18:9"
																	},
																	{
																		"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f206164",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4872:34:9",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4845:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4845:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4845:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4927:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4938:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4923:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4923:18:9"
																	},
																	{
																		"hexValue": "6472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4943:7:9",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4916:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4916:35:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4916:35:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4960:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4972:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4983:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4968:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4968:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4960:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4743:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4757:4:9",
														"type": ""
													}
												],
												"src": "4592:401:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5172:225:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5189:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5200:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5182:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5182:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5182:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5223:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5234:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5219:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5219:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5239:2:9",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5212:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5212:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5212:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5262:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5273:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5258:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5258:18:9"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5278:34:9",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5251:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5251:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5251:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5333:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5344:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5329:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5329:18:9"
																	},
																	{
																		"hexValue": "657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5349:5:9",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5322:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5322:33:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5322:33:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5364:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5376:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5387:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5372:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5372:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5364:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5149:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5163:4:9",
														"type": ""
													}
												],
												"src": "4998:399:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5576:228:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5593:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5604:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5586:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5586:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5586:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5627:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5638:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5623:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5623:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5643:2:9",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5616:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5616:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5616:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5666:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5677:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5662:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5662:18:9"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5682:34:9",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5655:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5655:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5655:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5737:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5748:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5733:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5733:18:9"
																	},
																	{
																		"hexValue": "616c616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5753:8:9",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5726:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5726:36:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5726:36:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5771:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5783:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5794:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5779:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5779:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5771:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5553:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5567:4:9",
														"type": ""
													}
												],
												"src": "5402:402:9"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), 0)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n}",
									"id": 9,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101c6565b6040516100c3919061070b565b60405180910390f35b6100df6100da36600461077c565b610258565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f3660046107a6565b610270565b604051601281526020016100c3565b6100df61013136600461077c565b610294565b6100f36101443660046107e2565b6001600160a01b031660009081526020819052604090205490565b6100b66102d3565b6100df61017536600461077c565b6102e2565b6100df61018836600461077c565b610379565b6100f361019b366004610804565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101d590610837565b80601f016020809104026020016040519081016040528092919081815260200182805461020190610837565b801561024e5780601f106102235761010080835404028352916020019161024e565b820191906000526020600020905b81548152906001019060200180831161023157829003601f168201915b5050505050905090565b600033610266818585610387565b5060019392505050565b60003361027e8582856104ab565b61028985858561053d565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061026690829086906102ce908790610871565b610387565b6060600480546101d590610837565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091908381101561036c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102898286868403610387565b60003361026681858561053d565b6001600160a01b0383166103e95760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610363565b6001600160a01b03821661044a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610363565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114610537578181101561052a5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610363565b6105378484848403610387565b50505050565b6001600160a01b0383166105a15760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610363565b6001600160a01b0382166106035760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610363565b6001600160a01b0383166000908152602081905260409020548181101561067b5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610363565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106b2908490610871565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106fe91815260200190565b60405180910390a3610537565b600060208083528351808285015260005b818110156107385785810183015185820160400152820161071c565b8181111561074a576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461077757600080fd5b919050565b6000806040838503121561078f57600080fd5b61079883610760565b946020939093013593505050565b6000806000606084860312156107bb57600080fd5b6107c484610760565b92506107d260208501610760565b9150604084013590509250925092565b6000602082840312156107f457600080fd5b6107fd82610760565b9392505050565b6000806040838503121561081757600080fd5b61082083610760565b915061082e60208401610760565b90509250929050565b600181811c9082168061084b57607f821691505b60208210810361086b57634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561089257634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212201586af800a92829c007b1e9beadde15d1ec74d77c12024266c5cac675e687a2664736f6c634300080d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x70B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x77C JUMP JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x7A6 JUMP JUMPDEST PUSH2 0x270 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x77C JUMP JUMPDEST PUSH2 0x294 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x7E2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x2D3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x77C JUMP JUMPDEST PUSH2 0x2E2 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x77C JUMP JUMPDEST PUSH2 0x379 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x804 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1D5 SWAP1 PUSH2 0x837 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x201 SWAP1 PUSH2 0x837 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x24E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x223 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x24E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x231 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x266 DUP2 DUP6 DUP6 PUSH2 0x387 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x27E DUP6 DUP3 DUP6 PUSH2 0x4AB JUMP JUMPDEST PUSH2 0x289 DUP6 DUP6 DUP6 PUSH2 0x53D JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x266 SWAP1 DUP3 SWAP1 DUP7 SWAP1 PUSH2 0x2CE SWAP1 DUP8 SWAP1 PUSH2 0x871 JUMP JUMPDEST PUSH2 0x387 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x1D5 SWAP1 PUSH2 0x837 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 DUP2 LT ISZERO PUSH2 0x36C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x289 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x387 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x266 DUP2 DUP6 DUP6 PUSH2 0x53D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3E9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x44A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0x537 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x52A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x363 JUMP JUMPDEST PUSH2 0x537 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x387 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x5A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x603 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x67B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x6B2 SWAP1 DUP5 SWAP1 PUSH2 0x871 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x6FE SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x537 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x738 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x71C JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x74A JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x777 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x78F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x798 DUP4 PUSH2 0x760 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x7BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7C4 DUP5 PUSH2 0x760 JUMP JUMPDEST SWAP3 POP PUSH2 0x7D2 PUSH1 0x20 DUP6 ADD PUSH2 0x760 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7FD DUP3 PUSH2 0x760 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x817 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x820 DUP4 PUSH2 0x760 JUMP JUMPDEST SWAP2 POP PUSH2 0x82E PUSH1 0x20 DUP5 ADD PUSH2 0x760 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x84B JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x86B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x892 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ISZERO DUP7 0xAF DUP1 EXP SWAP3 DUP3 SWAP13 STOP PUSH28 0x1E9BEADDE15D1EC74D77C12024266C5CAC675E687A2664736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "1312:11223:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2065:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4342:197;;;;;;:::i;:::-;;:::i;:::-;;;1218:14:9;;1211:22;1193:41;;1181:2;1166:18;4342:197:5;1053:187:9;3153:106:5;3240:12;;3153:106;;;1391:25:9;;;1379:2;1364:18;3153:106:5;1245:177:9;5101:286:5;;;;;;:::i;:::-;;:::i;3002:91::-;;;3084:2;1902:36:9;;1890:2;1875:18;3002:91:5;1760:184:9;5782:236:5;;;;;;:::i;:::-;;:::i;3317:125::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3417:18:5;3391:7;3417:18;;;;;;;;;;;;3317:125;2276:102;;;:::i;6505:429::-;;;;;;:::i;:::-;;:::i;3638:189::-;;;;;;:::i;:::-;;:::i;3885:149::-;;;;;;:::i;:::-;-1:-1:-1;;;;;4000:18:5;;;3974:7;4000:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3885:149;2065:98;2119:13;2151:5;2144:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2065:98;:::o;4342:197::-;4425:4;666:10:1;4479:32:5;666:10:1;4495:7:5;4504:6;4479:8;:32::i;:::-;-1:-1:-1;4528:4:5;;4342:197;-1:-1:-1;;;4342:197:5:o;5101:286::-;5228:4;666:10:1;5284:38:5;5300:4;666:10:1;5315:6:5;5284:15;:38::i;:::-;5332:27;5342:4;5348:2;5352:6;5332:9;:27::i;:::-;-1:-1:-1;5376:4:5;;5101:286;-1:-1:-1;;;;5101:286:5:o;5782:236::-;666:10:1;5870:4:5;5949:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;5949:27:5;;;;;;;;;;5870:4;;666:10:1;5924:66:5;;666:10:1;;5949:27:5;;:40;;5979:10;;5949:40;:::i;:::-;5924:8;:66::i;2276:102::-;2332:13;2364:7;2357:14;;;;;:::i;6505:429::-;666:10:1;6598:4:5;6679:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;6679:27:5;;;;;;;;;;6598:4;;666:10:1;6724:35:5;;;;6716:85;;;;-1:-1:-1;;;6716:85:5;;3222:2:9;6716:85:5;;;3204:21:9;3261:2;3241:18;;;3234:30;3300:34;3280:18;;;3273:62;-1:-1:-1;;;3351:18:9;;;3344:35;3396:19;;6716:85:5;;;;;;;;;6835:60;6844:5;6851:7;6879:15;6860:16;:34;6835:8;:60::i;3638:189::-;3717:4;666:10:1;3771:28:5;666:10:1;3788:2:5;3792:6;3771:9;:28::i;10032:370::-;-1:-1:-1;;;;;10163:19:5;;10155:68;;;;-1:-1:-1;;;10155:68:5;;3628:2:9;10155:68:5;;;3610:21:9;3667:2;3647:18;;;3640:30;3706:34;3686:18;;;3679:62;-1:-1:-1;;;3757:18:9;;;3750:34;3801:19;;10155:68:5;3426:400:9;10155:68:5;-1:-1:-1;;;;;10241:21:5;;10233:68;;;;-1:-1:-1;;;10233:68:5;;4033:2:9;10233:68:5;;;4015:21:9;4072:2;4052:18;;;4045:30;4111:34;4091:18;;;4084:62;-1:-1:-1;;;4162:18:9;;;4155:32;4204:19;;10233:68:5;3831:398:9;10233:68:5;-1:-1:-1;;;;;10312:18:5;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10363:32;;1391:25:9;;;10363:32:5;;1364:18:9;10363:32:5;;;;;;;10032:370;;;:::o;10679:441::-;-1:-1:-1;;;;;4000:18:5;;;10809:24;4000:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;-1:-1:-1;;10875:37:5;;10871:243;;10956:6;10936:16;:26;;10928:68;;;;-1:-1:-1;;;10928:68:5;;4436:2:9;10928:68:5;;;4418:21:9;4475:2;4455:18;;;4448:30;4514:31;4494:18;;;4487:59;4563:18;;10928:68:5;4234:353:9;10928:68:5;11038:51;11047:5;11054:7;11082:6;11063:16;:25;11038:8;:51::i;:::-;10799:321;10679:441;;;:::o;7397:651::-;-1:-1:-1;;;;;7523:18:5;;7515:68;;;;-1:-1:-1;;;7515:68:5;;4794:2:9;7515:68:5;;;4776:21:9;4833:2;4813:18;;;4806:30;4872:34;4852:18;;;4845:62;-1:-1:-1;;;4923:18:9;;;4916:35;4968:19;;7515:68:5;4592:401:9;7515:68:5;-1:-1:-1;;;;;7601:16:5;;7593:64;;;;-1:-1:-1;;;7593:64:5;;5200:2:9;7593:64:5;;;5182:21:9;5239:2;5219:18;;;5212:30;5278:34;5258:18;;;5251:62;-1:-1:-1;;;5329:18:9;;;5322:33;5372:19;;7593:64:5;4998:399:9;7593:64:5;-1:-1:-1;;;;;7739:15:5;;7717:19;7739:15;;;;;;;;;;;7772:21;;;;7764:72;;;;-1:-1:-1;;;7764:72:5;;5604:2:9;7764:72:5;;;5586:21:9;5643:2;5623:18;;;5616:30;5682:34;5662:18;;;5655:62;-1:-1:-1;;;5733:18:9;;;5726:36;5779:19;;7764:72:5;5402:402:9;7764:72:5;-1:-1:-1;;;;;7870:15:5;;;:9;:15;;;;;;;;;;;7888:20;;;7870:38;;7928:13;;;;;;;;:23;;7902:6;;7870:9;7928:23;;7902:6;;7928:23;:::i;:::-;;;;;;;;7982:2;-1:-1:-1;;;;;7967:26:5;7976:4;-1:-1:-1;;;;;7967:26:5;;7986:6;7967:26;;;;1391:25:9;;1379:2;1364:18;;1245:177;7967:26:5;;;;;;;;8004:37;11704:121;14:597:9;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;452:6;449:1;446:13;443:91;;;522:1;517:2;508:6;497:9;493:22;489:31;482:42;443:91;-1:-1:-1;595:2:9;574:15;-1:-1:-1;;570:29:9;555:45;;;;602:2;551:54;;14:597;-1:-1:-1;;;14:597:9:o;616:173::-;684:20;;-1:-1:-1;;;;;733:31:9;;723:42;;713:70;;779:1;776;769:12;713:70;616:173;;;:::o;794:254::-;862:6;870;923:2;911:9;902:7;898:23;894:32;891:52;;;939:1;936;929:12;891:52;962:29;981:9;962:29;:::i;:::-;952:39;1038:2;1023:18;;;;1010:32;;-1:-1:-1;;;794:254:9:o;1427:328::-;1504:6;1512;1520;1573:2;1561:9;1552:7;1548:23;1544:32;1541:52;;;1589:1;1586;1579:12;1541:52;1612:29;1631:9;1612:29;:::i;:::-;1602:39;;1660:38;1694:2;1683:9;1679:18;1660:38;:::i;:::-;1650:48;;1745:2;1734:9;1730:18;1717:32;1707:42;;1427:328;;;;;:::o;1949:186::-;2008:6;2061:2;2049:9;2040:7;2036:23;2032:32;2029:52;;;2077:1;2074;2067:12;2029:52;2100:29;2119:9;2100:29;:::i;:::-;2090:39;1949:186;-1:-1:-1;;;1949:186:9:o;2140:260::-;2208:6;2216;2269:2;2257:9;2248:7;2244:23;2240:32;2237:52;;;2285:1;2282;2275:12;2237:52;2308:29;2327:9;2308:29;:::i;:::-;2298:39;;2356:38;2390:2;2379:9;2375:18;2356:38;:::i;:::-;2346:48;;2140:260;;;;;:::o;2405:380::-;2484:1;2480:12;;;;2527;;;2548:61;;2602:4;2594:6;2590:17;2580:27;;2548:61;2655:2;2647:6;2644:14;2624:18;2621:38;2618:161;;2701:10;2696:3;2692:20;2689:1;2682:31;2736:4;2733:1;2726:15;2764:4;2761:1;2754:15;2618:161;;2405:380;;;:::o;2790:225::-;2830:3;2861:1;2857:6;2854:1;2851:13;2848:136;;;2906:10;2901:3;2897:20;2894:1;2887:31;2941:4;2938:1;2931:15;2969:4;2966:1;2959:15;2848:136;-1:-1:-1;3000:9:9;;2790:225::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "450600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "24624",
								"balanceOf(address)": "2562",
								"decimals()": "266",
								"decreaseAllowance(address,uint256)": "26966",
								"increaseAllowance(address,uint256)": "26945",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2326",
								"transfer(address,uint256)": "51270",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"_afterTokenTransfer(address,address,uint256)": "infinite",
								"_approve(address,address,uint256)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "infinite",
								"_burn(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_spendAllowance(address,address,uint256)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH",
									"source": 5,
									"value": "80"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "CALLVALUE",
									"source": 5
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "PUSHSIZE",
									"source": 5
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "CODESIZE",
									"source": 5
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "SUB",
									"source": 5
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "PUSHSIZE",
									"source": 5
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "2"
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "3"
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "JUMP",
									"source": 5,
									"value": "[in]"
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "tag",
									"source": 5,
									"value": "2"
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1953,
									"end": 1966,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1953,
									"end": 1966,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 1953,
									"end": 1966,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "6"
								},
								{
									"begin": 1953,
									"end": 1966,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1953,
									"end": 1958,
									"name": "PUSH",
									"source": 5,
									"value": "3"
								},
								{
									"begin": 1953,
									"end": 1958,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1953,
									"end": 1966,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 1953,
									"end": 1966,
									"name": "DUP6",
									"source": 5
								},
								{
									"begin": 1953,
									"end": 1966,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 1953,
									"end": 1966,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1953,
									"end": 1966,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "7"
								},
								{
									"begin": 1953,
									"end": 1966,
									"name": "JUMP",
									"source": 5,
									"value": "[in]"
								},
								{
									"begin": 1953,
									"end": 1966,
									"name": "tag",
									"source": 5,
									"value": "6"
								},
								{
									"begin": 1953,
									"end": 1966,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1976,
									"end": 1993,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1976,
									"end": 1993,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 1976,
									"end": 1993,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "8"
								},
								{
									"begin": 1976,
									"end": 1993,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1976,
									"end": 1983,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 1976,
									"end": 1983,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1976,
									"end": 1993,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 1976,
									"end": 1993,
									"name": "DUP5",
									"source": 5
								},
								{
									"begin": 1976,
									"end": 1993,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 1976,
									"end": 1993,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1976,
									"end": 1993,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "7"
								},
								{
									"begin": 1976,
									"end": 1993,
									"name": "JUMP",
									"source": 5,
									"value": "[in]"
								},
								{
									"begin": 1976,
									"end": 1993,
									"name": "tag",
									"source": 5,
									"value": "8"
								},
								{
									"begin": 1976,
									"end": 1993,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1976,
									"end": 1993,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 1887,
									"end": 2000,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "23"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "tag",
									"source": 5,
									"value": "7"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "SLOAD",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "10"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "11"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "JUMP",
									"source": 5,
									"value": "[in]"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "tag",
									"source": 5,
									"value": "10"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "KECCAK256",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH",
									"source": 5,
									"value": "1F"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "DIV",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "SWAP3",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "13"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "DUP6",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "SSTORE",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "16"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "tag",
									"source": 5,
									"value": "13"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH",
									"source": 5,
									"value": "1F"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "LT",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "14"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH",
									"source": 5,
									"value": "FF"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "NOT",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "OR",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "DUP6",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "SSTORE",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "16"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "tag",
									"source": 5,
									"value": "14"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "DUP6",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "SSTORE",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "16"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "tag",
									"source": 5,
									"value": "15"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "GT",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "16"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "SSTORE",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "15"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "tag",
									"source": 5,
									"value": "16"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "17"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "SWAP3",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "18"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "JUMP",
									"source": 5,
									"value": "[in]"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "tag",
									"source": 5,
									"value": "17"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "JUMP",
									"source": 5,
									"value": "[out]"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "tag",
									"source": 5,
									"value": "18"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "tag",
									"source": 5,
									"value": "19"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "GT",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "17"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "SSTORE",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "19"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 14,
									"end": 141,
									"name": "tag",
									"source": 9,
									"value": "21"
								},
								{
									"begin": 14,
									"end": 141,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 75,
									"end": 85,
									"name": "PUSH",
									"source": 9,
									"value": "4E487B71"
								},
								{
									"begin": 70,
									"end": 73,
									"name": "PUSH",
									"source": 9,
									"value": "E0"
								},
								{
									"begin": 66,
									"end": 86,
									"name": "SHL",
									"source": 9
								},
								{
									"begin": 63,
									"end": 64,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 56,
									"end": 87,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 106,
									"end": 110,
									"name": "PUSH",
									"source": 9,
									"value": "41"
								},
								{
									"begin": 103,
									"end": 104,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 96,
									"end": 111,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 130,
									"end": 134,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 127,
									"end": 128,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 120,
									"end": 135,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "tag",
									"source": 9,
									"value": "22"
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 200,
									"end": 205,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 253,
									"end": 256,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 246,
									"end": 250,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 238,
									"end": 244,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 234,
									"end": 251,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 230,
									"end": 257,
									"name": "SLT",
									"source": 9
								},
								{
									"begin": 220,
									"end": 275,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "26"
								},
								{
									"begin": 220,
									"end": 275,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 271,
									"end": 272,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 268,
									"end": 269,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 261,
									"end": 273,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 220,
									"end": 275,
									"name": "tag",
									"source": 9,
									"value": "26"
								},
								{
									"begin": 220,
									"end": 275,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 294,
									"end": 307,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 294,
									"end": 307,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 356,
									"end": 366,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 356,
									"end": 366,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 356,
									"end": 366,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 353,
									"end": 389,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 353,
									"end": 389,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "28"
								},
								{
									"begin": 353,
									"end": 389,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 369,
									"end": 387,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "28"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "21"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "JUMP",
									"source": 9,
									"value": "[in]"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "tag",
									"source": 9,
									"value": "28"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 444,
									"end": 446,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 438,
									"end": 447,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 412,
									"end": 414,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 498,
									"end": 511,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 498,
									"end": 511,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 494,
									"end": 516,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 494,
									"end": 516,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 494,
									"end": 516,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 518,
									"end": 520,
									"name": "PUSH",
									"source": 9,
									"value": "3F"
								},
								{
									"begin": 490,
									"end": 521,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 486,
									"end": 526,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 474,
									"end": 527,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 474,
									"end": 527,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 474,
									"end": 527,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 542,
									"end": 560,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 542,
									"end": 560,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 542,
									"end": 560,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 562,
									"end": 584,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 562,
									"end": 584,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 562,
									"end": 584,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 539,
									"end": 585,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 536,
									"end": 608,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 536,
									"end": 608,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "30"
								},
								{
									"begin": 536,
									"end": 608,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 588,
									"end": 606,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "30"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "21"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "JUMP",
									"source": 9,
									"value": "[in]"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "tag",
									"source": 9,
									"value": "30"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 628,
									"end": 638,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 624,
									"end": 626,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 617,
									"end": 639,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 663,
									"end": 665,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 655,
									"end": 661,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 648,
									"end": 666,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 685,
									"end": 689,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 675,
									"end": 689,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 675,
									"end": 689,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 730,
									"end": 733,
									"name": "DUP7",
									"source": 9
								},
								{
									"begin": 725,
									"end": 727,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 720,
									"end": 722,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 712,
									"end": 718,
									"name": "DUP9",
									"source": 9
								},
								{
									"begin": 708,
									"end": 723,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 704,
									"end": 728,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 701,
									"end": 734,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 698,
									"end": 751,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 698,
									"end": 751,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "31"
								},
								{
									"begin": 698,
									"end": 751,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 747,
									"end": 748,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 744,
									"end": 745,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 737,
									"end": 749,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 698,
									"end": 751,
									"name": "tag",
									"source": 9,
									"value": "31"
								},
								{
									"begin": 698,
									"end": 751,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 769,
									"end": 770,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 760,
									"end": 770,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 760,
									"end": 770,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 779,
									"end": 912,
									"name": "tag",
									"source": 9,
									"value": "32"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 793,
									"end": 795,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 790,
									"end": 791,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 787,
									"end": 796,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 779,
									"end": 912,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 779,
									"end": 912,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "34"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 881,
									"end": 895,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 881,
									"end": 895,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 881,
									"end": 895,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 877,
									"end": 900,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 877,
									"end": 900,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 871,
									"end": 901,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 850,
									"end": 864,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 850,
									"end": 864,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 850,
									"end": 864,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 846,
									"end": 869,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 846,
									"end": 869,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 839,
									"end": 902,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 804,
									"end": 814,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 804,
									"end": 814,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 804,
									"end": 814,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 804,
									"end": 814,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 779,
									"end": 912,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "32"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 779,
									"end": 912,
									"name": "tag",
									"source": 9,
									"value": "34"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 930,
									"end": 932,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 927,
									"end": 928,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 924,
									"end": 933,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "35"
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 989,
									"end": 990,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 984,
									"end": 986,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 979,
									"end": 981,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 971,
									"end": 977,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 967,
									"end": 982,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 963,
									"end": 987,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 956,
									"end": 991,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "tag",
									"source": 9,
									"value": "35"
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1019,
									"end": 1025,
									"name": "SWAP7",
									"source": 9
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "SWAP6",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "JUMP",
									"source": 9,
									"value": "[out]"
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "tag",
									"source": 9,
									"value": "3"
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1135,
									"end": 1141,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1143,
									"end": 1149,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1196,
									"end": 1198,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 1184,
									"end": 1193,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 1175,
									"end": 1182,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 1171,
									"end": 1194,
									"name": "SUB",
									"source": 9
								},
								{
									"begin": 1167,
									"end": 1199,
									"name": "SLT",
									"source": 9
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "37"
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 1212,
									"end": 1213,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1209,
									"end": 1210,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1202,
									"end": 1214,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "tag",
									"source": 9,
									"value": "37"
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1239,
									"end": 1255,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1239,
									"end": 1255,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1304,
									"end": 1318,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1304,
									"end": 1318,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1304,
									"end": 1318,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "38"
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 1331,
									"end": 1332,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1328,
									"end": 1329,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1321,
									"end": 1333,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "tag",
									"source": 9,
									"value": "38"
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "39"
								},
								{
									"begin": 1407,
									"end": 1414,
									"name": "DUP7",
									"source": 9
								},
								{
									"begin": 1398,
									"end": 1404,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 1387,
									"end": 1396,
									"name": "DUP8",
									"source": 9
								},
								{
									"begin": 1383,
									"end": 1405,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "22"
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "JUMP",
									"source": 9,
									"value": "[in]"
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "tag",
									"source": 9,
									"value": "39"
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1344,
									"end": 1415,
									"name": "SWAP4",
									"source": 9
								},
								{
									"begin": 1344,
									"end": 1415,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1461,
									"end": 1463,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 1450,
									"end": 1459,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 1446,
									"end": 1464,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1440,
									"end": 1465,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 1424,
									"end": 1465,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1424,
									"end": 1465,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1490,
									"end": 1492,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1480,
									"end": 1488,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1477,
									"end": 1493,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 1506,
									"end": 1507,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1503,
									"end": 1504,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1496,
									"end": 1508,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "tag",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "41"
								},
								{
									"begin": 1584,
									"end": 1591,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 1573,
									"end": 1581,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1562,
									"end": 1571,
									"name": "DUP7",
									"source": 9
								},
								{
									"begin": 1558,
									"end": 1582,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "22"
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "JUMP",
									"source": 9,
									"value": "[in]"
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "tag",
									"source": 9,
									"value": "41"
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1519,
									"end": 1592,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1519,
									"end": 1592,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1519,
									"end": 1592,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "JUMP",
									"source": 9,
									"value": "[out]"
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "tag",
									"source": 9,
									"value": "11"
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1682,
									"end": 1683,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 1678,
									"end": 1690,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1678,
									"end": 1690,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1678,
									"end": 1690,
									"name": "SHR",
									"source": 9
								},
								{
									"begin": 1678,
									"end": 1690,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1725,
									"end": 1737,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1725,
									"end": 1737,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 1725,
									"end": 1737,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1746,
									"end": 1807,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "43"
								},
								{
									"begin": 1746,
									"end": 1807,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 1800,
									"end": 1804,
									"name": "PUSH",
									"source": 9,
									"value": "7F"
								},
								{
									"begin": 1792,
									"end": 1798,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1788,
									"end": 1805,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 1778,
									"end": 1805,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1778,
									"end": 1805,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1746,
									"end": 1807,
									"name": "tag",
									"source": 9,
									"value": "43"
								},
								{
									"begin": 1746,
									"end": 1807,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1853,
									"end": 1855,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 1845,
									"end": 1851,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1842,
									"end": 1856,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 1822,
									"end": 1840,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1819,
									"end": 1857,
									"name": "SUB",
									"source": 9
								},
								{
									"begin": 1816,
									"end": 1977,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "44"
								},
								{
									"begin": 1816,
									"end": 1977,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 1899,
									"end": 1909,
									"name": "PUSH",
									"source": 9,
									"value": "4E487B71"
								},
								{
									"begin": 1894,
									"end": 1897,
									"name": "PUSH",
									"source": 9,
									"value": "E0"
								},
								{
									"begin": 1890,
									"end": 1910,
									"name": "SHL",
									"source": 9
								},
								{
									"begin": 1887,
									"end": 1888,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1880,
									"end": 1911,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 1934,
									"end": 1938,
									"name": "PUSH",
									"source": 9,
									"value": "22"
								},
								{
									"begin": 1931,
									"end": 1932,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 1924,
									"end": 1939,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 1962,
									"end": 1966,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 1959,
									"end": 1960,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1952,
									"end": 1967,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 1816,
									"end": 1977,
									"name": "tag",
									"source": 9,
									"value": "44"
								},
								{
									"begin": 1816,
									"end": 1977,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1816,
									"end": 1977,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "JUMP",
									"source": 9,
									"value": "[out]"
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "tag",
									"source": 9,
									"value": "23"
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1312,
									"end": 12535,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212201586af800a92829c007b1e9beadde15d1ec74d77c12024266c5cac675e687a2664736f6c634300080d0033",
									".code": [
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "tag",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "CALLDATALOAD",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "SHR",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH",
											"source": 5,
											"value": "39509351"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "14"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH",
											"source": 5,
											"value": "39509351"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "8"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH",
											"source": 5,
											"value": "70A08231"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "9"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH",
											"source": 5,
											"value": "95D89B41"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "10"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH",
											"source": 5,
											"value": "A457C2D7"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "11"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH",
											"source": 5,
											"value": "A9059CBB"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH",
											"source": 5,
											"value": "DD62ED3E"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "13"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "tag",
											"source": 5,
											"value": "14"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH",
											"source": 5,
											"value": "6FDDE03"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH",
											"source": 5,
											"value": "95EA7B3"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH",
											"source": 5,
											"value": "18160DDD"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH",
											"source": 5,
											"value": "23B872DD"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "6"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH",
											"source": 5,
											"value": "313CE567"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "tag",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1312,
											"end": 12535,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 2065,
											"end": 2163,
											"name": "tag",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 2065,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2065,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "15"
										},
										{
											"begin": 2065,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "16"
										},
										{
											"begin": 2065,
											"end": 2163,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 2065,
											"end": 2163,
											"name": "tag",
											"source": 5,
											"value": "15"
										},
										{
											"begin": 2065,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2065,
											"end": 2163,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2065,
											"end": 2163,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2065,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "17"
										},
										{
											"begin": 2065,
											"end": 2163,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2065,
											"end": 2163,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2065,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "18"
										},
										{
											"begin": 2065,
											"end": 2163,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 2065,
											"end": 2163,
											"name": "tag",
											"source": 5,
											"value": "17"
										},
										{
											"begin": 2065,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2065,
											"end": 2163,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2065,
											"end": 2163,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2065,
											"end": 2163,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2065,
											"end": 2163,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2065,
											"end": 2163,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2065,
											"end": 2163,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2065,
											"end": 2163,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 4342,
											"end": 4539,
											"name": "tag",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 4342,
											"end": 4539,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4342,
											"end": 4539,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "19"
										},
										{
											"begin": 4342,
											"end": 4539,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4342,
											"end": 4539,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 4342,
											"end": 4539,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 4342,
											"end": 4539,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "21"
										},
										{
											"begin": 4342,
											"end": 4539,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 4342,
											"end": 4539,
											"name": "tag",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4342,
											"end": 4539,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4342,
											"end": 4539,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "22"
										},
										{
											"begin": 4342,
											"end": 4539,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 4342,
											"end": 4539,
											"name": "tag",
											"source": 5,
											"value": "19"
										},
										{
											"begin": 4342,
											"end": 4539,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4342,
											"end": 4539,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4342,
											"end": 4539,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1218,
											"end": 1232,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1218,
											"end": 1232,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1193,
											"end": 1234,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1193,
											"end": 1234,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1181,
											"end": 1183,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4342,
											"end": 4539,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "17"
										},
										{
											"begin": 1053,
											"end": 1240,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3153,
											"end": 3259,
											"name": "tag",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 3153,
											"end": 3259,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3240,
											"end": 3252,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 3240,
											"end": 3252,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 3153,
											"end": 3259,
											"name": "tag",
											"source": 5,
											"value": "25"
										},
										{
											"begin": 3153,
											"end": 3259,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3153,
											"end": 3259,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3153,
											"end": 3259,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1379,
											"end": 1381,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3153,
											"end": 3259,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "17"
										},
										{
											"begin": 1245,
											"end": 1422,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5101,
											"end": 5387,
											"name": "tag",
											"source": 5,
											"value": "6"
										},
										{
											"begin": 5101,
											"end": 5387,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5101,
											"end": 5387,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "19"
										},
										{
											"begin": 5101,
											"end": 5387,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "30"
										},
										{
											"begin": 5101,
											"end": 5387,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 5101,
											"end": 5387,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 5101,
											"end": 5387,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "31"
										},
										{
											"begin": 5101,
											"end": 5387,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 5101,
											"end": 5387,
											"name": "tag",
											"source": 5,
											"value": "30"
										},
										{
											"begin": 5101,
											"end": 5387,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5101,
											"end": 5387,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "32"
										},
										{
											"begin": 5101,
											"end": 5387,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 3002,
											"end": 3093,
											"name": "tag",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 3002,
											"end": 3093,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3002,
											"end": 3093,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3002,
											"end": 3093,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3084,
											"end": 3086,
											"name": "PUSH",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 1902,
											"end": 1938,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1902,
											"end": 1938,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1890,
											"end": 1892,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1875,
											"end": 1893,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3002,
											"end": 3093,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "17"
										},
										{
											"begin": 1760,
											"end": 1944,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 6018,
											"name": "tag",
											"source": 5,
											"value": "8"
										},
										{
											"begin": 5782,
											"end": 6018,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5782,
											"end": 6018,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "19"
										},
										{
											"begin": 5782,
											"end": 6018,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "39"
										},
										{
											"begin": 5782,
											"end": 6018,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 5782,
											"end": 6018,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 5782,
											"end": 6018,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "21"
										},
										{
											"begin": 5782,
											"end": 6018,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 5782,
											"end": 6018,
											"name": "tag",
											"source": 5,
											"value": "39"
										},
										{
											"begin": 5782,
											"end": 6018,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5782,
											"end": 6018,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5782,
											"end": 6018,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 3317,
											"end": 3442,
											"name": "tag",
											"source": 5,
											"value": "9"
										},
										{
											"begin": 3317,
											"end": 3442,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3317,
											"end": 3442,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "25"
										},
										{
											"begin": 3317,
											"end": 3442,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "43"
										},
										{
											"begin": 3317,
											"end": 3442,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 3317,
											"end": 3442,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 3317,
											"end": 3442,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "44"
										},
										{
											"begin": 3317,
											"end": 3442,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 3317,
											"end": 3442,
											"name": "tag",
											"source": 5,
											"value": "43"
										},
										{
											"begin": 3317,
											"end": 3442,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3417,
											"end": 3435,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3391,
											"end": 3398,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3417,
											"end": 3435,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3417,
											"end": 3435,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3417,
											"end": 3435,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3417,
											"end": 3435,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3417,
											"end": 3435,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3417,
											"end": 3435,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3417,
											"end": 3435,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3417,
											"end": 3435,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3417,
											"end": 3435,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3417,
											"end": 3435,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 3417,
											"end": 3435,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 3417,
											"end": 3435,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3317,
											"end": 3442,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2276,
											"end": 2378,
											"name": "tag",
											"source": 5,
											"value": "10"
										},
										{
											"begin": 2276,
											"end": 2378,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2276,
											"end": 2378,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "15"
										},
										{
											"begin": 2276,
											"end": 2378,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "48"
										},
										{
											"begin": 2276,
											"end": 2378,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 6505,
											"end": 6934,
											"name": "tag",
											"source": 5,
											"value": "11"
										},
										{
											"begin": 6505,
											"end": 6934,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6505,
											"end": 6934,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "19"
										},
										{
											"begin": 6505,
											"end": 6934,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "51"
										},
										{
											"begin": 6505,
											"end": 6934,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 6505,
											"end": 6934,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 6505,
											"end": 6934,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "21"
										},
										{
											"begin": 6505,
											"end": 6934,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 6505,
											"end": 6934,
											"name": "tag",
											"source": 5,
											"value": "51"
										},
										{
											"begin": 6505,
											"end": 6934,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6505,
											"end": 6934,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "52"
										},
										{
											"begin": 6505,
											"end": 6934,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 3638,
											"end": 3827,
											"name": "tag",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 3638,
											"end": 3827,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3638,
											"end": 3827,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "19"
										},
										{
											"begin": 3638,
											"end": 3827,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "55"
										},
										{
											"begin": 3638,
											"end": 3827,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 3638,
											"end": 3827,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 3638,
											"end": 3827,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "21"
										},
										{
											"begin": 3638,
											"end": 3827,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 3638,
											"end": 3827,
											"name": "tag",
											"source": 5,
											"value": "55"
										},
										{
											"begin": 3638,
											"end": 3827,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3638,
											"end": 3827,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "56"
										},
										{
											"begin": 3638,
											"end": 3827,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 3885,
											"end": 4034,
											"name": "tag",
											"source": 5,
											"value": "13"
										},
										{
											"begin": 3885,
											"end": 4034,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3885,
											"end": 4034,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "25"
										},
										{
											"begin": 3885,
											"end": 4034,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "59"
										},
										{
											"begin": 3885,
											"end": 4034,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 3885,
											"end": 4034,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 3885,
											"end": 4034,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 3885,
											"end": 4034,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 3885,
											"end": 4034,
											"name": "tag",
											"source": 5,
											"value": "59"
										},
										{
											"begin": 3885,
											"end": 4034,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3974,
											"end": 3981,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4011,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4027,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4027,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4027,
											"name": "SWAP5",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4027,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4027,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4027,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4027,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4027,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4027,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4027,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4027,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4027,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4027,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3885,
											"end": 4034,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2065,
											"end": 2163,
											"name": "tag",
											"source": 5,
											"value": "16"
										},
										{
											"begin": 2065,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2119,
											"end": 2132,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 2151,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "65"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "66"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "65"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 5,
											"value": "66"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "67"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "68"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "67"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 5,
											"value": "68"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 5,
											"value": "69"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "69"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 5,
											"value": "67"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2065,
											"end": 2163,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2065,
											"end": 2163,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 4342,
											"end": 4539,
											"name": "tag",
											"source": 5,
											"value": "22"
										},
										{
											"begin": 4342,
											"end": 4539,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4425,
											"end": 4429,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 666,
											"end": 676,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 4479,
											"end": 4511,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "73"
										},
										{
											"begin": 666,
											"end": 676,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4495,
											"end": 4502,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 4504,
											"end": 4510,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 4479,
											"end": 4487,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "74"
										},
										{
											"begin": 4479,
											"end": 4511,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 4479,
											"end": 4511,
											"name": "tag",
											"source": 5,
											"value": "73"
										},
										{
											"begin": 4479,
											"end": 4511,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4528,
											"end": 4532,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 4528,
											"end": 4532,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 4342,
											"end": 4539,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4342,
											"end": 4539,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 5101,
											"end": 5387,
											"name": "tag",
											"source": 5,
											"value": "32"
										},
										{
											"begin": 5101,
											"end": 5387,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5228,
											"end": 5232,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 666,
											"end": 676,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 5284,
											"end": 5322,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "78"
										},
										{
											"begin": 5300,
											"end": 5304,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 666,
											"end": 676,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5315,
											"end": 5321,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 5284,
											"end": 5299,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "79"
										},
										{
											"begin": 5284,
											"end": 5322,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 5284,
											"end": 5322,
											"name": "tag",
											"source": 5,
											"value": "78"
										},
										{
											"begin": 5284,
											"end": 5322,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5332,
											"end": 5359,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 5342,
											"end": 5346,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 5348,
											"end": 5350,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5358,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 5332,
											"end": 5341,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "81"
										},
										{
											"begin": 5332,
											"end": 5359,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 5332,
											"end": 5359,
											"name": "tag",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 5332,
											"end": 5359,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5376,
											"end": 5380,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 5376,
											"end": 5380,
											"name": "SWAP5",
											"source": 5
										},
										{
											"begin": 5101,
											"end": 5387,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5101,
											"end": 5387,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 5782,
											"end": 6018,
											"name": "tag",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5782,
											"end": 6018,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 666,
											"end": 676,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 5870,
											"end": 5874,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5949,
											"end": 5967,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5949,
											"end": 5967,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5949,
											"end": 5967,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5949,
											"end": 5960,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 5949,
											"end": 5967,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5949,
											"end": 5967,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5949,
											"end": 5967,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5949,
											"end": 5967,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5949,
											"end": 5967,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5949,
											"end": 5967,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5949,
											"end": 5967,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5949,
											"end": 5967,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5949,
											"end": 5976,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 5949,
											"end": 5976,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 5949,
											"end": 5976,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 5949,
											"end": 5976,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5949,
											"end": 5976,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5949,
											"end": 5976,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5949,
											"end": 5976,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5949,
											"end": 5976,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5949,
											"end": 5976,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 5949,
											"end": 5976,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 5870,
											"end": 5874,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5870,
											"end": 5874,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 666,
											"end": 676,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5924,
											"end": 5990,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "73"
										},
										{
											"begin": 5924,
											"end": 5990,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 666,
											"end": 676,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 666,
											"end": 676,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5949,
											"end": 5976,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 5949,
											"end": 5976,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5949,
											"end": 5989,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "86"
										},
										{
											"begin": 5949,
											"end": 5989,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5979,
											"end": 5989,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 5979,
											"end": 5989,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5949,
											"end": 5989,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "87"
										},
										{
											"begin": 5949,
											"end": 5989,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 5949,
											"end": 5989,
											"name": "tag",
											"source": 5,
											"value": "86"
										},
										{
											"begin": 5949,
											"end": 5989,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5924,
											"end": 5932,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "74"
										},
										{
											"begin": 5924,
											"end": 5990,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 2276,
											"end": 2378,
											"name": "tag",
											"source": 5,
											"value": "48"
										},
										{
											"begin": 2276,
											"end": 2378,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2332,
											"end": 2345,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 2364,
											"end": 2371,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2357,
											"end": 2371,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2357,
											"end": 2371,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2357,
											"end": 2371,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 2357,
											"end": 2371,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2357,
											"end": 2371,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "65"
										},
										{
											"begin": 2357,
											"end": 2371,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 6505,
											"end": 6934,
											"name": "tag",
											"source": 5,
											"value": "52"
										},
										{
											"begin": 6505,
											"end": 6934,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 666,
											"end": 676,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 6598,
											"end": 6602,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 6679,
											"end": 6697,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6679,
											"end": 6697,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6679,
											"end": 6697,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 6679,
											"end": 6690,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 6679,
											"end": 6697,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 6679,
											"end": 6697,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6679,
											"end": 6697,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6679,
											"end": 6697,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 6679,
											"end": 6697,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6679,
											"end": 6697,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 6679,
											"end": 6697,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 6679,
											"end": 6697,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6679,
											"end": 6706,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 6679,
											"end": 6706,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 6679,
											"end": 6706,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 6679,
											"end": 6706,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 6679,
											"end": 6706,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6679,
											"end": 6706,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6679,
											"end": 6706,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 6679,
											"end": 6706,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6679,
											"end": 6706,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 6679,
											"end": 6706,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 6598,
											"end": 6602,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6598,
											"end": 6602,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 666,
											"end": 676,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6724,
											"end": 6759,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 6724,
											"end": 6759,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6724,
											"end": 6759,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 6724,
											"end": 6759,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 6716,
											"end": 6801,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "97"
										},
										{
											"begin": 6716,
											"end": 6801,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 6716,
											"end": 6801,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6716,
											"end": 6801,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6716,
											"end": 6801,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6716,
											"end": 6801,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3222,
											"end": 3224,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6716,
											"end": 6801,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 6716,
											"end": 6801,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 6716,
											"end": 6801,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3204,
											"end": 3225,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3261,
											"end": 3263,
											"name": "PUSH",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 3241,
											"end": 3259,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 3241,
											"end": 3259,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3259,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3234,
											"end": 3264,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3300,
											"end": 3334,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 3280,
											"end": 3298,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 3280,
											"end": 3298,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3280,
											"end": 3298,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3351,
											"end": 3369,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 3351,
											"end": 3369,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3351,
											"end": 3369,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3344,
											"end": 3379,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3396,
											"end": 3415,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 3396,
											"end": 3415,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6716,
											"end": 6801,
											"name": "tag",
											"source": 5,
											"value": "98"
										},
										{
											"begin": 6716,
											"end": 6801,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6716,
											"end": 6801,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6716,
											"end": 6801,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 6716,
											"end": 6801,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 6716,
											"end": 6801,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6716,
											"end": 6801,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 6716,
											"end": 6801,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6716,
											"end": 6801,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 6716,
											"end": 6801,
											"name": "tag",
											"source": 5,
											"value": "97"
										},
										{
											"begin": 6716,
											"end": 6801,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6835,
											"end": 6895,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 6844,
											"end": 6849,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 6851,
											"end": 6858,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 6879,
											"end": 6894,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 6860,
											"end": 6876,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 6860,
											"end": 6894,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 6835,
											"end": 6843,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "74"
										},
										{
											"begin": 6835,
											"end": 6895,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 3638,
											"end": 3827,
											"name": "tag",
											"source": 5,
											"value": "56"
										},
										{
											"begin": 3638,
											"end": 3827,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3717,
											"end": 3721,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 666,
											"end": 676,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 3771,
											"end": 3799,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "73"
										},
										{
											"begin": 666,
											"end": 676,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3788,
											"end": 3790,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 3792,
											"end": 3798,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 3771,
											"end": 3780,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "81"
										},
										{
											"begin": 3771,
											"end": 3799,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 10032,
											"end": 10402,
											"name": "tag",
											"source": 5,
											"value": "74"
										},
										{
											"begin": 10032,
											"end": 10402,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10163,
											"end": 10182,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 10163,
											"end": 10182,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 10155,
											"end": 10223,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "107"
										},
										{
											"begin": 10155,
											"end": 10223,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 10155,
											"end": 10223,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 10155,
											"end": 10223,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10155,
											"end": 10223,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 10155,
											"end": 10223,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3628,
											"end": 3630,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 10155,
											"end": 10223,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 10155,
											"end": 10223,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 10155,
											"end": 10223,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3610,
											"end": 3631,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3667,
											"end": 3669,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 3647,
											"end": 3665,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3647,
											"end": 3665,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3647,
											"end": 3665,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3640,
											"end": 3670,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3706,
											"end": 3740,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 3686,
											"end": 3704,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 3686,
											"end": 3704,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3686,
											"end": 3704,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3679,
											"end": 3741,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3757,
											"end": 3775,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 3757,
											"end": 3775,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3757,
											"end": 3775,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3750,
											"end": 3784,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3801,
											"end": 3820,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 3801,
											"end": 3820,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10155,
											"end": 10223,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "98"
										},
										{
											"begin": 3426,
											"end": 3826,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10155,
											"end": 10223,
											"name": "tag",
											"source": 5,
											"value": "107"
										},
										{
											"begin": 10155,
											"end": 10223,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10241,
											"end": 10262,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 10241,
											"end": 10262,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 10233,
											"end": 10301,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "110"
										},
										{
											"begin": 10233,
											"end": 10301,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 10233,
											"end": 10301,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 10233,
											"end": 10301,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10233,
											"end": 10301,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 10233,
											"end": 10301,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4033,
											"end": 4035,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 10233,
											"end": 10301,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 10233,
											"end": 10301,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 10233,
											"end": 10301,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4015,
											"end": 4036,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4072,
											"end": 4074,
											"name": "PUSH",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 4052,
											"end": 4070,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 4052,
											"end": 4070,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4052,
											"end": 4070,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4045,
											"end": 4075,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4111,
											"end": 4145,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4084,
											"end": 4146,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4162,
											"end": 4180,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 4162,
											"end": 4180,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4162,
											"end": 4180,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4155,
											"end": 4187,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4204,
											"end": 4223,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 4204,
											"end": 4223,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10233,
											"end": 10301,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "98"
										},
										{
											"begin": 3831,
											"end": 4229,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10233,
											"end": 10301,
											"name": "tag",
											"source": 5,
											"value": "110"
										},
										{
											"begin": 10233,
											"end": 10301,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10312,
											"end": 10330,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 10312,
											"end": 10330,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 10312,
											"end": 10330,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 10312,
											"end": 10330,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 10312,
											"end": 10330,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 10312,
											"end": 10330,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 10312,
											"end": 10330,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 10312,
											"end": 10323,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 10312,
											"end": 10330,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 10312,
											"end": 10330,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 10312,
											"end": 10330,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 10312,
											"end": 10330,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 10312,
											"end": 10330,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 10312,
											"end": 10330,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 10312,
											"end": 10330,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 10312,
											"end": 10330,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 10312,
											"end": 10339,
											"name": "SWAP5",
											"source": 5
										},
										{
											"begin": 10312,
											"end": 10339,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 10312,
											"end": 10339,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 10312,
											"end": 10339,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 10312,
											"end": 10339,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 10312,
											"end": 10339,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 10312,
											"end": 10339,
											"name": "SWAP5",
											"source": 5
										},
										{
											"begin": 10312,
											"end": 10339,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 10312,
											"end": 10339,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 10312,
											"end": 10339,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 10312,
											"end": 10339,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 10312,
											"end": 10339,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 10312,
											"end": 10339,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 10312,
											"end": 10348,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 10312,
											"end": 10348,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 10312,
											"end": 10348,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 10363,
											"end": 10395,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 10363,
											"end": 10395,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10363,
											"end": 10395,
											"name": "PUSH",
											"source": 5,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10363,
											"end": 10395,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10363,
											"end": 10395,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 10363,
											"end": 10395,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 10363,
											"end": 10395,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 10363,
											"end": 10395,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 10363,
											"end": 10395,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 10363,
											"end": 10395,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 10363,
											"end": 10395,
											"name": "LOG3",
											"source": 5
										},
										{
											"begin": 10032,
											"end": 10402,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 10032,
											"end": 10402,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 10032,
											"end": 10402,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 10032,
											"end": 10402,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 10679,
											"end": 11120,
											"name": "tag",
											"source": 5,
											"value": "79"
										},
										{
											"begin": 10679,
											"end": 11120,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 10809,
											"end": 10833,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4011,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4027,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4027,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4027,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4027,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4027,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4027,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4027,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4027,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4027,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 4000,
											"end": 4027,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10875,
											"end": 10912,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 10875,
											"end": 10912,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 10871,
											"end": 11114,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "120"
										},
										{
											"begin": 10871,
											"end": 11114,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 10956,
											"end": 10962,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 10936,
											"end": 10952,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 10936,
											"end": 10962,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 10936,
											"end": 10962,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 10928,
											"end": 10996,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "117"
										},
										{
											"begin": 10928,
											"end": 10996,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 10928,
											"end": 10996,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 10928,
											"end": 10996,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10928,
											"end": 10996,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 10928,
											"end": 10996,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4436,
											"end": 4438,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 10928,
											"end": 10996,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 10928,
											"end": 10996,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 10928,
											"end": 10996,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4418,
											"end": 4439,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4475,
											"end": 4477,
											"name": "PUSH",
											"source": 9,
											"value": "1D"
										},
										{
											"begin": 4455,
											"end": 4473,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 4455,
											"end": 4473,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4455,
											"end": 4473,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4448,
											"end": 4478,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4514,
											"end": 4545,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 4494,
											"end": 4512,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 4494,
											"end": 4512,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4494,
											"end": 4512,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4487,
											"end": 4546,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4563,
											"end": 4581,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 4563,
											"end": 4581,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10928,
											"end": 10996,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "98"
										},
										{
											"begin": 4234,
											"end": 4587,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10928,
											"end": 10996,
											"name": "tag",
											"source": 5,
											"value": "117"
										},
										{
											"begin": 10928,
											"end": 10996,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 11038,
											"end": 11089,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "120"
										},
										{
											"begin": 11047,
											"end": 11052,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 11054,
											"end": 11061,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 11082,
											"end": 11088,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 11063,
											"end": 11079,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 11063,
											"end": 11088,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 11038,
											"end": 11046,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "74"
										},
										{
											"begin": 11038,
											"end": 11089,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 11038,
											"end": 11089,
											"name": "tag",
											"source": 5,
											"value": "120"
										},
										{
											"begin": 11038,
											"end": 11089,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 10799,
											"end": 11120,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 10679,
											"end": 11120,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 10679,
											"end": 11120,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 10679,
											"end": 11120,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 10679,
											"end": 11120,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 7397,
											"end": 8048,
											"name": "tag",
											"source": 5,
											"value": "81"
										},
										{
											"begin": 7397,
											"end": 8048,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7523,
											"end": 7541,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 7523,
											"end": 7541,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 7515,
											"end": 7583,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "122"
										},
										{
											"begin": 7515,
											"end": 7583,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 7515,
											"end": 7583,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7515,
											"end": 7583,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7515,
											"end": 7583,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7515,
											"end": 7583,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4794,
											"end": 4796,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7515,
											"end": 7583,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 7515,
											"end": 7583,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7515,
											"end": 7583,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4776,
											"end": 4797,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4833,
											"end": 4835,
											"name": "PUSH",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 4813,
											"end": 4831,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 4813,
											"end": 4831,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4813,
											"end": 4831,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4806,
											"end": 4836,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4872,
											"end": 4906,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 4852,
											"end": 4870,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 4852,
											"end": 4870,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4852,
											"end": 4870,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4845,
											"end": 4907,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4923,
											"end": 4941,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 4923,
											"end": 4941,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4923,
											"end": 4941,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4916,
											"end": 4951,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4968,
											"end": 4987,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 4968,
											"end": 4987,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7515,
											"end": 7583,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "98"
										},
										{
											"begin": 4592,
											"end": 4993,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7515,
											"end": 7583,
											"name": "tag",
											"source": 5,
											"value": "122"
										},
										{
											"begin": 7515,
											"end": 7583,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7601,
											"end": 7617,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7601,
											"end": 7617,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 7593,
											"end": 7657,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "125"
										},
										{
											"begin": 7593,
											"end": 7657,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 7593,
											"end": 7657,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7593,
											"end": 7657,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7593,
											"end": 7657,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7593,
											"end": 7657,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5200,
											"end": 5202,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7593,
											"end": 7657,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 7593,
											"end": 7657,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7593,
											"end": 7657,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5182,
											"end": 5203,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5239,
											"end": 5241,
											"name": "PUSH",
											"source": 9,
											"value": "23"
										},
										{
											"begin": 5219,
											"end": 5237,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 5219,
											"end": 5237,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5219,
											"end": 5237,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5212,
											"end": 5242,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5278,
											"end": 5312,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 5258,
											"end": 5276,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 5258,
											"end": 5276,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5258,
											"end": 5276,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5251,
											"end": 5313,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5329,
											"end": 5347,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 5329,
											"end": 5347,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5329,
											"end": 5347,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5322,
											"end": 5355,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5372,
											"end": 5391,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 5372,
											"end": 5391,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7593,
											"end": 7657,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "98"
										},
										{
											"begin": 4998,
											"end": 5397,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7593,
											"end": 7657,
											"name": "tag",
											"source": 5,
											"value": "125"
										},
										{
											"begin": 7593,
											"end": 7657,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7739,
											"end": 7754,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 7739,
											"end": 7754,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 7717,
											"end": 7736,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 7739,
											"end": 7754,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7739,
											"end": 7754,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7739,
											"end": 7754,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 7739,
											"end": 7754,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 7739,
											"end": 7754,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7739,
											"end": 7754,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7739,
											"end": 7754,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 7739,
											"end": 7754,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7739,
											"end": 7754,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7739,
											"end": 7754,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 7739,
											"end": 7754,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 7772,
											"end": 7793,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7772,
											"end": 7793,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7772,
											"end": 7793,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 7772,
											"end": 7793,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 7764,
											"end": 7836,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "130"
										},
										{
											"begin": 7764,
											"end": 7836,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 7764,
											"end": 7836,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7764,
											"end": 7836,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7764,
											"end": 7836,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7764,
											"end": 7836,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5604,
											"end": 5606,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7764,
											"end": 7836,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 7764,
											"end": 7836,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7764,
											"end": 7836,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5586,
											"end": 5607,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5643,
											"end": 5645,
											"name": "PUSH",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 5623,
											"end": 5641,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 5623,
											"end": 5641,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5623,
											"end": 5641,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5616,
											"end": 5646,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5682,
											"end": 5716,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 5662,
											"end": 5680,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 5662,
											"end": 5680,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5662,
											"end": 5680,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5655,
											"end": 5717,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5733,
											"end": 5751,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 5733,
											"end": 5751,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5733,
											"end": 5751,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5726,
											"end": 5762,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5779,
											"end": 5798,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 5779,
											"end": 5798,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7764,
											"end": 7836,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "98"
										},
										{
											"begin": 5402,
											"end": 5804,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7764,
											"end": 7836,
											"name": "tag",
											"source": 5,
											"value": "130"
										},
										{
											"begin": 7764,
											"end": 7836,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7870,
											"end": 7885,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7870,
											"end": 7885,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 7870,
											"end": 7885,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 7870,
											"end": 7879,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 7870,
											"end": 7885,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7870,
											"end": 7885,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7870,
											"end": 7885,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 7870,
											"end": 7885,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 7870,
											"end": 7885,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7870,
											"end": 7885,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7870,
											"end": 7885,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 7870,
											"end": 7885,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7870,
											"end": 7885,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7870,
											"end": 7885,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7870,
											"end": 7885,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 7888,
											"end": 7908,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 7888,
											"end": 7908,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 7888,
											"end": 7908,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 7870,
											"end": 7908,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7870,
											"end": 7908,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 7928,
											"end": 7941,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7928,
											"end": 7941,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 7928,
											"end": 7941,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 7928,
											"end": 7941,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7928,
											"end": 7941,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 7928,
											"end": 7941,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7928,
											"end": 7941,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7928,
											"end": 7941,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 7928,
											"end": 7951,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7928,
											"end": 7951,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 7902,
											"end": 7908,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 7902,
											"end": 7908,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 7870,
											"end": 7879,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7928,
											"end": 7951,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "133"
										},
										{
											"begin": 7928,
											"end": 7951,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7902,
											"end": 7908,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 7902,
											"end": 7908,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7928,
											"end": 7951,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "87"
										},
										{
											"begin": 7928,
											"end": 7951,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 7928,
											"end": 7951,
											"name": "tag",
											"source": 5,
											"value": "133"
										},
										{
											"begin": 7928,
											"end": 7951,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7928,
											"end": 7951,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 7928,
											"end": 7951,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7928,
											"end": 7951,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7928,
											"end": 7951,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7928,
											"end": 7951,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7928,
											"end": 7951,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 7928,
											"end": 7951,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7982,
											"end": 7984,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7967,
											"end": 7993,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 7976,
											"end": 7980,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7967,
											"end": 7993,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 7967,
											"end": 7993,
											"name": "PUSH",
											"source": 5,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 7986,
											"end": 7992,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 7967,
											"end": 7993,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7967,
											"end": 7993,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 7967,
											"end": 7993,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "134"
										},
										{
											"begin": 7967,
											"end": 7993,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1379,
											"end": 1381,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1245,
											"end": 1422,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7967,
											"end": 7993,
											"name": "tag",
											"source": 5,
											"value": "134"
										},
										{
											"begin": 7967,
											"end": 7993,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7967,
											"end": 7993,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7967,
											"end": 7993,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 7967,
											"end": 7993,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7967,
											"end": 7993,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7967,
											"end": 7993,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 7967,
											"end": 7993,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7967,
											"end": 7993,
											"name": "LOG3",
											"source": 5
										},
										{
											"begin": 8004,
											"end": 8041,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "120"
										},
										{
											"begin": 11704,
											"end": 11825,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 14,
											"end": 611,
											"name": "tag",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 14,
											"end": 611,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 126,
											"end": 130,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 155,
											"end": 157,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 184,
											"end": 186,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 173,
											"end": 182,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 166,
											"end": 187,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 216,
											"end": 222,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 210,
											"end": 223,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 259,
											"end": 265,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 254,
											"end": 256,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 243,
											"end": 252,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 239,
											"end": 257,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 232,
											"end": 266,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 284,
											"end": 285,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "tag",
											"source": 9,
											"value": "142"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 308,
											"end": 314,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 305,
											"end": 306,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 302,
											"end": 315,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 294,
											"end": 434,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 294,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "144"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 403,
											"end": 417,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 403,
											"end": 417,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 403,
											"end": 417,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 399,
											"end": 422,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 399,
											"end": 422,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 393,
											"end": 423,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 369,
											"end": 386,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 369,
											"end": 386,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 369,
											"end": 386,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 388,
											"end": 390,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 365,
											"end": 391,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 358,
											"end": 424,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 323,
											"end": 333,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 323,
											"end": 333,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 294,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "142"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 294,
											"end": 434,
											"name": "tag",
											"source": 9,
											"value": "144"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 452,
											"end": 458,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 449,
											"end": 450,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 446,
											"end": 459,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 443,
											"end": 534,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 443,
											"end": 534,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "145"
										},
										{
											"begin": 443,
											"end": 534,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 522,
											"end": 523,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 517,
											"end": 519,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 508,
											"end": 514,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 497,
											"end": 506,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 493,
											"end": 515,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 489,
											"end": 520,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 482,
											"end": 524,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 443,
											"end": 534,
											"name": "tag",
											"source": 9,
											"value": "145"
										},
										{
											"begin": 443,
											"end": 534,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 595,
											"end": 597,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 574,
											"end": 589,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 570,
											"end": 599,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 555,
											"end": 600,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 555,
											"end": 600,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 555,
											"end": 600,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 555,
											"end": 600,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 602,
											"end": 604,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 605,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 551,
											"end": 605,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 14,
											"end": 611,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 611,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 616,
											"end": 789,
											"name": "tag",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 616,
											"end": 789,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 684,
											"end": 704,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 684,
											"end": 704,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 733,
											"end": 764,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 733,
											"end": 764,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 723,
											"end": 765,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 723,
											"end": 765,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 713,
											"end": 783,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "147"
										},
										{
											"begin": 713,
											"end": 783,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 779,
											"end": 780,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 776,
											"end": 777,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 769,
											"end": 781,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 713,
											"end": 783,
											"name": "tag",
											"source": 9,
											"value": "147"
										},
										{
											"begin": 713,
											"end": 783,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 616,
											"end": 789,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 616,
											"end": 789,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 616,
											"end": 789,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 616,
											"end": 789,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 794,
											"end": 1048,
											"name": "tag",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 794,
											"end": 1048,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 862,
											"end": 868,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 870,
											"end": 876,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 923,
											"end": 925,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 911,
											"end": 920,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 902,
											"end": 909,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 898,
											"end": 921,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 894,
											"end": 926,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 891,
											"end": 943,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 891,
											"end": 943,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "149"
										},
										{
											"begin": 891,
											"end": 943,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 939,
											"end": 940,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 936,
											"end": 937,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 929,
											"end": 941,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 891,
											"end": 943,
											"name": "tag",
											"source": 9,
											"value": "149"
										},
										{
											"begin": 891,
											"end": 943,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 962,
											"end": 991,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "150"
										},
										{
											"begin": 981,
											"end": 990,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 962,
											"end": 991,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 962,
											"end": 991,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 962,
											"end": 991,
											"name": "tag",
											"source": 9,
											"value": "150"
										},
										{
											"begin": 962,
											"end": 991,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 952,
											"end": 991,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 1038,
											"end": 1040,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1010,
											"end": 1042,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 1010,
											"end": 1042,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 794,
											"end": 1048,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "tag",
											"source": 9,
											"value": "31"
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1504,
											"end": 1510,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1512,
											"end": 1518,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1520,
											"end": 1526,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1573,
											"end": 1575,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 1561,
											"end": 1570,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1552,
											"end": 1559,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 1548,
											"end": 1571,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1544,
											"end": 1576,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "154"
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1589,
											"end": 1590,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1586,
											"end": 1587,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1579,
											"end": 1591,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "tag",
											"source": 9,
											"value": "154"
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "155"
										},
										{
											"begin": 1631,
											"end": 1640,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "tag",
											"source": 9,
											"value": "155"
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1602,
											"end": 1641,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1602,
											"end": 1641,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "156"
										},
										{
											"begin": 1694,
											"end": 1696,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1683,
											"end": 1692,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 1679,
											"end": 1697,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "tag",
											"source": 9,
											"value": "156"
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1650,
											"end": 1698,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1650,
											"end": 1698,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1745,
											"end": 1747,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1734,
											"end": 1743,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1730,
											"end": 1748,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1717,
											"end": 1749,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 1707,
											"end": 1749,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1707,
											"end": 1749,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "tag",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2008,
											"end": 2014,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2061,
											"end": 2063,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2049,
											"end": 2058,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2040,
											"end": 2047,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2036,
											"end": 2059,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2032,
											"end": 2064,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "159"
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2077,
											"end": 2078,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2074,
											"end": 2075,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2079,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "tag",
											"source": 9,
											"value": "159"
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "160"
										},
										{
											"begin": 2119,
											"end": 2128,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "tag",
											"source": 9,
											"value": "160"
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2090,
											"end": 2129,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "tag",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2208,
											"end": 2214,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2216,
											"end": 2222,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2269,
											"end": 2271,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2257,
											"end": 2266,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2248,
											"end": 2255,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2244,
											"end": 2267,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2240,
											"end": 2272,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "162"
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2285,
											"end": 2286,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2282,
											"end": 2283,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2275,
											"end": 2287,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "tag",
											"source": 9,
											"value": "162"
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "163"
										},
										{
											"begin": 2327,
											"end": 2336,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "tag",
											"source": 9,
											"value": "163"
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2298,
											"end": 2337,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2298,
											"end": 2337,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "164"
										},
										{
											"begin": 2390,
											"end": 2392,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2379,
											"end": 2388,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2375,
											"end": 2393,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "tag",
											"source": 9,
											"value": "164"
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2346,
											"end": 2394,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2346,
											"end": 2394,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "tag",
											"source": 9,
											"value": "65"
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2484,
											"end": 2485,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2527,
											"end": 2539,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2527,
											"end": 2539,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2527,
											"end": 2539,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "166"
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2602,
											"end": 2606,
											"name": "PUSH",
											"source": 9,
											"value": "7F"
										},
										{
											"begin": 2594,
											"end": 2600,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2590,
											"end": 2607,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2580,
											"end": 2607,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2580,
											"end": 2607,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "tag",
											"source": 9,
											"value": "166"
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2655,
											"end": 2657,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2647,
											"end": 2653,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2644,
											"end": 2658,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 2624,
											"end": 2642,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2621,
											"end": 2659,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "167"
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2701,
											"end": 2711,
											"name": "PUSH",
											"source": 9,
											"value": "4E487B71"
										},
										{
											"begin": 2696,
											"end": 2699,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 2692,
											"end": 2712,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 2689,
											"end": 2690,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2682,
											"end": 2713,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2736,
											"end": 2740,
											"name": "PUSH",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 2733,
											"end": 2734,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2726,
											"end": 2741,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2764,
											"end": 2768,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 2761,
											"end": 2762,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2754,
											"end": 2769,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "tag",
											"source": 9,
											"value": "167"
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 2790,
											"end": 3015,
											"name": "tag",
											"source": 9,
											"value": "87"
										},
										{
											"begin": 2790,
											"end": 3015,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2830,
											"end": 2833,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2861,
											"end": 2862,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2857,
											"end": 2863,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 2854,
											"end": 2855,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2851,
											"end": 2864,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "169"
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2906,
											"end": 2916,
											"name": "PUSH",
											"source": 9,
											"value": "4E487B71"
										},
										{
											"begin": 2901,
											"end": 2904,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 2897,
											"end": 2917,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 2894,
											"end": 2895,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2887,
											"end": 2918,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2941,
											"end": 2945,
											"name": "PUSH",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 2938,
											"end": 2939,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2931,
											"end": 2946,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2969,
											"end": 2973,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 2966,
											"end": 2967,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2959,
											"end": 2974,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "tag",
											"source": 9,
											"value": "169"
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3000,
											"end": 3009,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3000,
											"end": 3009,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2790,
											"end": 3015,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"brownie_projects/bebu_finance/contracts/utils/Context.sol\":{\"keccak256\":\"0x1cc748b2446aafb4c362edda845ca05b3b9994ebafc2c0ddbc894982c21305f0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://076e714ffbbacde572851624994b9457f6765136fa8f5613fd082f607ec1924b\",\"dweb:/ipfs/QmPZJrP5BSYeMe4ajmpbNS1p3nsfJbTbo7hBwHxJA133Uv\"]},\"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol\":{\"keccak256\":\"0x9336c439b650ed30b53a5c9cb26d7efa34ee4f6a3359e789810c170f916928af\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://57a1cbb4dfe75b31c8b548ab65a22e20b9a2f88603c493704500ccedc894f5bd\",\"dweb:/ipfs/QmPs4jM1ot85vw9V6vUp1J7tWpbB9gfEgCkVjRJ39jJEYh\"]},\"brownie_projects/bebu_finance/contracts/utils/token/IERC20.sol\":{\"keccak256\":\"0xbb468cd9676a6fdae71b903143d44854a9b4082b703613463644b828e9b7a400\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://21c8b22a3e1b54ef211bc17afb71f5a91ab26360133c7f835c9d0e89706bfb52\",\"dweb:/ipfs/QmNwhncwZbdRfqpJe5fVH2S2KkZQrnLGXQsWdHnEfXVrFd\"]},\"brownie_projects/bebu_finance/contracts/utils/token/IERC20Metadata.sol\":{\"keccak256\":\"0x5e436570a8cc3b9b0e1ee9496474d65302af6a380728e561324288e468db645d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b8c39aff9aad1fcbf6a9c2f70e9e358ca551e9b9fc847c97a5f3d42cfeb6cc4f\",\"dweb:/ipfs/QmUyrQTncAJRnuefm2D97cdzMohdEb6qpxDpnR9pnQyeaH\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 878,
								"contract": "brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 884,
								"contract": "brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 886,
								"contract": "brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 888,
								"contract": "brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 890,
								"contract": "brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"brownie_projects/bebu_finance/contracts/utils/token/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"brownie_projects/bebu_finance/contracts/utils/token/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"brownie_projects/bebu_finance/contracts/utils/token/IERC20.sol\":{\"keccak256\":\"0xbb468cd9676a6fdae71b903143d44854a9b4082b703613463644b828e9b7a400\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://21c8b22a3e1b54ef211bc17afb71f5a91ab26360133c7f835c9d0e89706bfb52\",\"dweb:/ipfs/QmNwhncwZbdRfqpJe5fVH2S2KkZQrnLGXQsWdHnEfXVrFd\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"brownie_projects/bebu_finance/contracts/utils/token/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"brownie_projects/bebu_finance/contracts/utils/token/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"brownie_projects/bebu_finance/contracts/utils/token/IERC20.sol\":{\"keccak256\":\"0xbb468cd9676a6fdae71b903143d44854a9b4082b703613463644b828e9b7a400\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://21c8b22a3e1b54ef211bc17afb71f5a91ab26360133c7f835c9d0e89706bfb52\",\"dweb:/ipfs/QmNwhncwZbdRfqpJe5fVH2S2KkZQrnLGXQsWdHnEfXVrFd\"]},\"brownie_projects/bebu_finance/contracts/utils/token/IERC20Metadata.sol\":{\"keccak256\":\"0x5e436570a8cc3b9b0e1ee9496474d65302af6a380728e561324288e468db645d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b8c39aff9aad1fcbf6a9c2f70e9e358ca551e9b9fc847c97a5f3d42cfeb6cc4f\",\"dweb:/ipfs/QmUyrQTncAJRnuefm2D97cdzMohdEb6qpxDpnR9pnQyeaH\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol\":596:3708  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol\":596:3708  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122052fdb9827ce35e83c587a028bf8be80daa7d12690b2a6b5333b51b7e0f5235ee64736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122052fdb9827ce35e83c587a028bf8be80daa7d12690b2a6b5333b51b7e0f5235ee64736f6c634300080d0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE REVERT 0xB9 DUP3 PUSH29 0xE35E83C587A028BF8BE80DAA7D12690B2A6B5333B51B7E0F5235EE6473 PUSH16 0x6C634300080D00330000000000000000 ",
							"sourceMap": "596:3112:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;596:3112:8;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122052fdb9827ce35e83c587a028bf8be80daa7d12690b2a6b5333b51b7e0f5235ee64736f6c634300080d0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE REVERT 0xB9 DUP3 PUSH29 0xE35E83C587A028BF8BE80DAA7D12690B2A6B5333B51B7E0F5235EE6473 PUSH16 0x6C634300080D00330000000000000000 ",
							"sourceMap": "596:3112:8:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"safeApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 596,
									"end": 3708,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "PUSH",
									"source": 8,
									"value": "B"
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "BYTE",
									"source": 8
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "PUSH",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "MSTORE8",
									"source": 8
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 596,
									"end": 3708,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122052fdb9827ce35e83c587a028bf8be80daa7d12690b2a6b5333b51b7e0f5235ee64736f6c634300080d0033",
									".code": [
										{
											"begin": 596,
											"end": 3708,
											"name": "PUSHDEPLOYADDRESS",
											"source": 8
										},
										{
											"begin": 596,
											"end": 3708,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 596,
											"end": 3708,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 596,
											"end": 3708,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 596,
											"end": 3708,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 596,
											"end": 3708,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 596,
											"end": 3708,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 596,
											"end": 3708,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 596,
											"end": 3708,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"brownie_projects/bebu_finance/contracts/utils/Address.sol\":{\"keccak256\":\"0x2254ff0365cbc4f80af2433d10890e0d4816c14f38a6e9e0c746f861ad434f1b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://17ecd670c7f9522306389b638a01d0b0e93156ec0e9c2cbe798b091e89474a32\",\"dweb:/ipfs/QmUzZpE98hpS8J4KtqcLxxTzdrP2rKeUWssF5GJA1e3dYw\"]},\"brownie_projects/bebu_finance/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x9abfb3888eb1535805fd1ce80be0738b5fc57c7aece52b85bd925d2e1d22bab1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7bae47c4219dfdc2aa9c3a38f76c0bb249a077ad55d79ec23ed43beb03a89916\",\"dweb:/ipfs/QmP2fK7qHCjJ9RKqMmCifPdP3LwWfEEzZTne84AGyCkRrg\"]},\"brownie_projects/bebu_finance/contracts/utils/token/IERC20.sol\":{\"keccak256\":\"0xbb468cd9676a6fdae71b903143d44854a9b4082b703613463644b828e9b7a400\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://21c8b22a3e1b54ef211bc17afb71f5a91ab26360133c7f835c9d0e89706bfb52\",\"dweb:/ipfs/QmNwhncwZbdRfqpJe5fVH2S2KkZQrnLGXQsWdHnEfXVrFd\"]},\"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol\":{\"keccak256\":\"0x593692219f7f58fc3dd89dc0271eaf2b459fd7515bbf53dcdb799bcce79c97b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5dcb333da0bda5db19dacbc438f214d8e8408c210605baba683ce4af33ba525d\",\"dweb:/ipfs/QmRjDL9cN4qKGozcoN34EscZZesPqsa9E5qggHRihUZxkB\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"brownie_projects/bebu_finance/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "brownie_projects/bebu_finance/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							329
						]
					},
					"id": 330,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "58:67:0",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 329,
							"linearizedBaseContracts": [
								329
							],
							"name": "Address",
							"nameLocation": "134:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 16,
										"nodeType": "Block",
										"src": "1410:254:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 14,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 10,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 5,
																"src": "1634:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 11,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1634:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 12,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1634:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 13,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1656:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1634:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 9,
												"id": 15,
												"nodeType": "Return",
												"src": "1627:30:0"
											}
										]
									},
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "148:1191:0",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 17,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1353:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 6,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1372:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 17,
												"src": "1364:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1364:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1363:17:0"
									},
									"returnParameters": {
										"id": 9,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 8,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 17,
												"src": "1404:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 7,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1404:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1403:6:0"
									},
									"scope": 329,
									"src": "1344:320:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 50,
										"nodeType": "Block",
										"src": "2651:241:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 32,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 28,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2677:4:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$329",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$329",
																				"typeString": "library Address"
																			}
																		],
																		"id": 27,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2669:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 26,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2669:7:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 29,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2669:13:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 30,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2669:21:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 31,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 22,
																"src": "2694:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2669:31:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 33,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2702:31:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 25,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2661:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 34,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2661:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 35,
												"nodeType": "ExpressionStatement",
												"src": "2661:73:0"
											},
											{
												"assignments": [
													37,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 37,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2751:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 50,
														"src": "2746:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 36,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2746:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 44,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 42,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2794:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 38,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 20,
																"src": "2764:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 39,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2764:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 41,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 40,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 22,
																"src": "2786:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2764:29:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 43,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2764:33:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2745:52:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 46,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 37,
															"src": "2815:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 47,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2824:60:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 45,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2807:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 48,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2807:78:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 49,
												"nodeType": "ExpressionStatement",
												"src": "2807:78:0"
											}
										]
									},
									"documentation": {
										"id": 18,
										"nodeType": "StructuredDocumentation",
										"src": "1670:905:0",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 51,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2589:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 20,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2615:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 51,
												"src": "2599:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 19,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2599:15:0",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 22,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2634:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 51,
												"src": "2626:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 21,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2626:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2598:43:0"
									},
									"returnParameters": {
										"id": 24,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2651:0:0"
									},
									"scope": 329,
									"src": "2580:312:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 68,
										"nodeType": "Block",
										"src": "3723:96:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 62,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 54,
															"src": "3762:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 63,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 56,
															"src": "3770:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3776:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 65,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3779:32:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 61,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															109,
															153
														],
														"referencedDeclaration": 153,
														"src": "3740:21:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 66,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3740:72:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 60,
												"id": 67,
												"nodeType": "Return",
												"src": "3733:79:0"
											}
										]
									},
									"documentation": {
										"id": 52,
										"nodeType": "StructuredDocumentation",
										"src": "2898:731:0",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 69,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3643:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 57,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 54,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3664:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 69,
												"src": "3656:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 53,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3656:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 56,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3685:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 69,
												"src": "3672:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 55,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3672:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3655:35:0"
									},
									"returnParameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 69,
												"src": "3709:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 58,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3709:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3708:14:0"
									},
									"scope": 329,
									"src": "3634:185:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 88,
										"nodeType": "Block",
										"src": "4188:76:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 82,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 72,
															"src": "4227:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 83,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 74,
															"src": "4235:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 84,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4241:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 85,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 76,
															"src": "4244:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 81,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															109,
															153
														],
														"referencedDeclaration": 153,
														"src": "4205:21:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 86,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4205:52:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 80,
												"id": 87,
												"nodeType": "Return",
												"src": "4198:59:0"
											}
										]
									},
									"documentation": {
										"id": 70,
										"nodeType": "StructuredDocumentation",
										"src": "3825:211:0",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 89,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "4050:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 77,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 72,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4080:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 89,
												"src": "4072:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 71,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4072:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4109:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 89,
												"src": "4096:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 73,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4096:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 76,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "4137:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 89,
												"src": "4123:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 75,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4123:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4062:93:0"
									},
									"returnParameters": {
										"id": 80,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 79,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 89,
												"src": "4174:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 78,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4174:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4173:14:0"
									},
									"scope": 329,
									"src": "4041:223:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 108,
										"nodeType": "Block",
										"src": "4739:111:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 102,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 92,
															"src": "4778:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 103,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 94,
															"src": "4786:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 104,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 96,
															"src": "4792:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 105,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4799:43:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 101,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															109,
															153
														],
														"referencedDeclaration": 153,
														"src": "4756:21:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 106,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4756:87:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 100,
												"id": 107,
												"nodeType": "Return",
												"src": "4749:94:0"
											}
										]
									},
									"documentation": {
										"id": 90,
										"nodeType": "StructuredDocumentation",
										"src": "4270:351:0",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 109,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4635:21:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 97,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 92,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4665:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 109,
												"src": "4657:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 91,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4657:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 94,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4686:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 109,
												"src": "4673:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 93,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4673:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 96,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4700:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 109,
												"src": "4692:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 95,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4692:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4656:50:0"
									},
									"returnParameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 99,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 109,
												"src": "4725:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 98,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4725:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4724:14:0"
									},
									"scope": 329,
									"src": "4626:224:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 152,
										"nodeType": "Block",
										"src": "5277:267:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 130,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 126,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5303:4:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$329",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$329",
																				"typeString": "library Address"
																			}
																		],
																		"id": 125,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5295:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 124,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5295:7:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 127,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5295:13:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 128,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5295:21:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 129,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 116,
																"src": "5320:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5295:30:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 131,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5327:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 123,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5287:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 132,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5287:81:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 133,
												"nodeType": "ExpressionStatement",
												"src": "5287:81:0"
											},
											{
												"assignments": [
													135,
													137
												],
												"declarations": [
													{
														"constant": false,
														"id": 135,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5384:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 152,
														"src": "5379:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 134,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5379:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 137,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5406:10:0",
														"nodeType": "VariableDeclaration",
														"scope": 152,
														"src": "5393:23:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 136,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5393:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 144,
												"initialValue": {
													"arguments": [
														{
															"id": 142,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 114,
															"src": "5446:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 138,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 112,
																"src": "5420:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 139,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5420:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 141,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 140,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 116,
																"src": "5439:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5420:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 143,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5420:31:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5378:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 146,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 112,
															"src": "5495:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 147,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 135,
															"src": "5503:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 148,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 137,
															"src": "5512:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 149,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 118,
															"src": "5524:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 145,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 284,
														"src": "5468:26:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 150,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5468:69:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 122,
												"id": 151,
												"nodeType": "Return",
												"src": "5461:76:0"
											}
										]
									},
									"documentation": {
										"id": 110,
										"nodeType": "StructuredDocumentation",
										"src": "4856:237:0",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 153,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "5107:21:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 119,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 112,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5146:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "5138:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 111,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5138:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 114,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5175:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "5162:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 113,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5162:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 116,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5197:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "5189:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 115,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5189:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 118,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5226:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "5212:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 117,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5212:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5128:116:0"
									},
									"returnParameters": {
										"id": 122,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 121,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "5263:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 120,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5263:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5262:14:0"
									},
									"scope": 329,
									"src": "5098:446:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 169,
										"nodeType": "Block",
										"src": "5821:97:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 164,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 156,
															"src": "5857:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 165,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 158,
															"src": "5865:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 166,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5871:39:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 163,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															170,
															199
														],
														"referencedDeclaration": 199,
														"src": "5838:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 167,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5838:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 162,
												"id": 168,
												"nodeType": "Return",
												"src": "5831:80:0"
											}
										]
									},
									"documentation": {
										"id": 154,
										"nodeType": "StructuredDocumentation",
										"src": "5550:166:0",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 170,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5730:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 159,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5757:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 170,
												"src": "5749:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 155,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5749:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 158,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5778:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 170,
												"src": "5765:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 157,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5765:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5748:35:0"
									},
									"returnParameters": {
										"id": 162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 170,
												"src": "5807:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 160,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5807:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5806:14:0"
									},
									"scope": 329,
									"src": "5721:197:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 198,
										"nodeType": "Block",
										"src": "6260:168:0",
										"statements": [
											{
												"assignments": [
													183,
													185
												],
												"declarations": [
													{
														"constant": false,
														"id": 183,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6276:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 198,
														"src": "6271:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 182,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6271:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 185,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6298:10:0",
														"nodeType": "VariableDeclaration",
														"scope": 198,
														"src": "6285:23:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 184,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6285:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 190,
												"initialValue": {
													"arguments": [
														{
															"id": 188,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 175,
															"src": "6330:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 186,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 173,
															"src": "6312:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 187,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6312:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 189,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6312:23:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6270:65:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 192,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 173,
															"src": "6379:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 193,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 183,
															"src": "6387:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 194,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 185,
															"src": "6396:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 195,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 177,
															"src": "6408:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 191,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 284,
														"src": "6352:26:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 196,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6352:69:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 181,
												"id": 197,
												"nodeType": "Return",
												"src": "6345:76:0"
											}
										]
									},
									"documentation": {
										"id": 171,
										"nodeType": "StructuredDocumentation",
										"src": "5924:173:0",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 199,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "6111:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 178,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 173,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6147:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "6139:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 172,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6139:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6176:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "6163:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 174,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6163:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 177,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6204:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "6190:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 176,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6190:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6129:93:0"
									},
									"returnParameters": {
										"id": 181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "6246:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 179,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6246:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6245:14:0"
									},
									"scope": 329,
									"src": "6102:326:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 215,
										"nodeType": "Block",
										"src": "6704:101:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 210,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 202,
															"src": "6742:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 211,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 204,
															"src": "6750:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 212,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6756:41:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 209,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															216,
															245
														],
														"referencedDeclaration": 245,
														"src": "6721:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 213,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6721:77:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 208,
												"id": 214,
												"nodeType": "Return",
												"src": "6714:84:0"
											}
										]
									},
									"documentation": {
										"id": 200,
										"nodeType": "StructuredDocumentation",
										"src": "6434:168:0",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 216,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6616:20:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 205,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 202,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6645:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "6637:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 201,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6637:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6666:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "6653:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 203,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6653:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6636:35:0"
									},
									"returnParameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 207,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "6690:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 206,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6690:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6689:14:0"
									},
									"scope": 329,
									"src": "6607:198:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 244,
										"nodeType": "Block",
										"src": "7146:170:0",
										"statements": [
											{
												"assignments": [
													229,
													231
												],
												"declarations": [
													{
														"constant": false,
														"id": 229,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7162:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 244,
														"src": "7157:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 228,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7157:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 231,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7184:10:0",
														"nodeType": "VariableDeclaration",
														"scope": 244,
														"src": "7171:23:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 230,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7171:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 236,
												"initialValue": {
													"arguments": [
														{
															"id": 234,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 221,
															"src": "7218:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 232,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 219,
															"src": "7198:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 233,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7198:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 235,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7198:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7156:67:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 238,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 219,
															"src": "7267:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 239,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 229,
															"src": "7275:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 240,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 231,
															"src": "7284:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 241,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 223,
															"src": "7296:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 237,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 284,
														"src": "7240:26:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 242,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7240:69:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 227,
												"id": 243,
												"nodeType": "Return",
												"src": "7233:76:0"
											}
										]
									},
									"documentation": {
										"id": 217,
										"nodeType": "StructuredDocumentation",
										"src": "6811:175:0",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 245,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "7000:20:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 219,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7038:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 245,
												"src": "7030:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 218,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7030:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 221,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7067:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 245,
												"src": "7054:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 220,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7054:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7095:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 245,
												"src": "7081:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 222,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7081:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7020:93:0"
									},
									"returnParameters": {
										"id": 227,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 226,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 245,
												"src": "7132:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 225,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7132:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7131:14:0"
									},
									"scope": 329,
									"src": "6991:325:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 283,
										"nodeType": "Block",
										"src": "7798:434:0",
										"statements": [
											{
												"condition": {
													"id": 259,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 250,
													"src": "7812:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 281,
													"nodeType": "Block",
													"src": "8168:58:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 277,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 252,
																		"src": "8190:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 278,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 254,
																		"src": "8202:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 276,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 328,
																	"src": "8182:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 279,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8182:33:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 280,
															"nodeType": "ExpressionStatement",
															"src": "8182:33:0"
														}
													]
												},
												"id": 282,
												"nodeType": "IfStatement",
												"src": "7808:418:0",
												"trueBody": {
													"id": 275,
													"nodeType": "Block",
													"src": "7821:341:0",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 263,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 260,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 252,
																		"src": "7839:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 261,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7839:17:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 262,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7860:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7839:22:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 272,
															"nodeType": "IfStatement",
															"src": "7835:286:0",
															"trueBody": {
																"id": 271,
																"nodeType": "Block",
																"src": "7863:258:0",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 266,
																							"name": "target",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 248,
																							"src": "8065:6:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 265,
																						"name": "isContract",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 17,
																						"src": "8054:10:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																							"typeString": "function (address) view returns (bool)"
																						}
																					},
																					"id": 267,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "8054:18:0",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																					"id": 268,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "8074:31:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					},
																					"value": "Address: call to non-contract"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					}
																				],
																				"id": 264,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "8046:7:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 269,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8046:60:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 270,
																		"nodeType": "ExpressionStatement",
																		"src": "8046:60:0"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 273,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 252,
																"src": "8141:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 258,
															"id": 274,
															"nodeType": "Return",
															"src": "8134:17:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 246,
										"nodeType": "StructuredDocumentation",
										"src": "7322:277:0",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
									},
									"id": 284,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "7613:26:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 255,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 248,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7657:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "7649:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 247,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7649:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 250,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7678:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "7673:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 249,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7673:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 252,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7708:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "7695:23:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 251,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7695:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 254,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7742:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "7728:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 253,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7728:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7639:121:0"
									},
									"returnParameters": {
										"id": 258,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 257,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "7784:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 256,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7784:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7783:14:0"
									},
									"scope": 329,
									"src": "7604:628:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 307,
										"nodeType": "Block",
										"src": "8613:135:0",
										"statements": [
											{
												"condition": {
													"id": 296,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 287,
													"src": "8627:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 305,
													"nodeType": "Block",
													"src": "8684:58:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 301,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 289,
																		"src": "8706:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 302,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 291,
																		"src": "8718:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 300,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 328,
																	"src": "8698:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 303,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8698:33:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 304,
															"nodeType": "ExpressionStatement",
															"src": "8698:33:0"
														}
													]
												},
												"id": 306,
												"nodeType": "IfStatement",
												"src": "8623:119:0",
												"trueBody": {
													"id": 299,
													"nodeType": "Block",
													"src": "8636:42:0",
													"statements": [
														{
															"expression": {
																"id": 297,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 289,
																"src": "8657:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 295,
															"id": 298,
															"nodeType": "Return",
															"src": "8650:17:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 285,
										"nodeType": "StructuredDocumentation",
										"src": "8238:210:0",
										"text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
									},
									"id": 308,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "8462:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 292,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 287,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "8493:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 308,
												"src": "8488:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 286,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8488:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 289,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8523:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 308,
												"src": "8510:23:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 288,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8510:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 291,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8557:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 308,
												"src": "8543:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 290,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8543:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8478:97:0"
									},
									"returnParameters": {
										"id": 295,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 294,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 308,
												"src": "8599:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 293,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8599:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8598:14:0"
									},
									"scope": 329,
									"src": "8453:295:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 327,
										"nodeType": "Block",
										"src": "8837:457:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 318,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 315,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 310,
															"src": "8913:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 316,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "8913:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 317,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8933:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8913:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 325,
													"nodeType": "Block",
													"src": "9243:45:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 322,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 312,
																		"src": "9264:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 321,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "9257:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 323,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9257:20:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 324,
															"nodeType": "ExpressionStatement",
															"src": "9257:20:0"
														}
													]
												},
												"id": 326,
												"nodeType": "IfStatement",
												"src": "8909:379:0",
												"trueBody": {
													"id": 320,
													"nodeType": "Block",
													"src": "8936:301:0",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "9094:133:0",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "9112:40:0",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "9141:10:0"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "9135:5:0"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9135:17:0"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "9116:15:0",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "9180:2:0",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "9184:10:0"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "9176:3:0"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9176:19:0"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "9197:15:0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9169:6:0"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9169:44:0"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9169:44:0"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "london",
															"externalReferences": [
																{
																	"declaration": 310,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9141:10:0",
																	"valueSize": 1
																},
																{
																	"declaration": 310,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9184:10:0",
																	"valueSize": 1
																}
															],
															"id": 319,
															"nodeType": "InlineAssembly",
															"src": "9085:142:0"
														}
													]
												}
											}
										]
									},
									"id": 328,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "8763:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 310,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8784:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 328,
												"src": "8771:23:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 309,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8771:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 312,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8810:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 328,
												"src": "8796:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 311,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8796:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8770:53:0"
									},
									"returnParameters": {
										"id": 314,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8837:0:0"
									},
									"scope": 329,
									"src": "8754:540:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 330,
							"src": "126:9170:0",
							"usedErrors": []
						}
					],
					"src": "33:9263:0"
				},
				"id": 0
			},
			"brownie_projects/bebu_finance/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "brownie_projects/bebu_finance/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							351
						]
					},
					"id": 352,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 331,
							"literals": [
								"solidity",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:1"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 332,
								"nodeType": "StructuredDocumentation",
								"src": "58:496:1",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 351,
							"linearizedBaseContracts": [
								351
							],
							"name": "Context",
							"nameLocation": "573:7:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 340,
										"nodeType": "Block",
										"src": "649:34:1",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 337,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "666:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 338,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "666:10:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 336,
												"id": 339,
												"nodeType": "Return",
												"src": "659:17:1"
											}
										]
									},
									"id": 341,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "596:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 333,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "606:2:1"
									},
									"returnParameters": {
										"id": 336,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 335,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 341,
												"src": "640:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 334,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "640:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "639:9:1"
									},
									"scope": 351,
									"src": "587:96:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 349,
										"nodeType": "Block",
										"src": "756:32:1",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 346,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "773:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 347,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "773:8:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 345,
												"id": 348,
												"nodeType": "Return",
												"src": "766:15:1"
											}
										]
									},
									"id": 350,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "698:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 342,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "706:2:1"
									},
									"returnParameters": {
										"id": 345,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 344,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 350,
												"src": "740:14:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 343,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "740:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "739:16:1"
									},
									"scope": 351,
									"src": "689:99:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 352,
							"src": "555:235:1",
							"usedErrors": []
						}
					],
					"src": "33:757:1"
				},
				"id": 1
			},
			"brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol": {
				"ast": {
					"absolutePath": "brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							351
						],
						"Ownable": [
							456
						]
					},
					"id": 457,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 353,
							"literals": [
								"solidity",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:2"
						},
						{
							"absolutePath": "brownie_projects/bebu_finance/contracts/utils/Context.sol",
							"file": "../Context.sol",
							"id": 354,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 457,
							"sourceUnit": 352,
							"src": "58:24:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 356,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 351,
										"src": "607:7:2"
									},
									"id": 357,
									"nodeType": "InheritanceSpecifier",
									"src": "607:7:2"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 355,
								"nodeType": "StructuredDocumentation",
								"src": "83:494:2",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 456,
							"linearizedBaseContracts": [
								456,
								351
							],
							"name": "Ownable",
							"nameLocation": "596:7:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 359,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "637:6:2",
									"nodeType": "VariableDeclaration",
									"scope": 456,
									"src": "621:22:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 358,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "621:7:2",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 365,
									"name": "OwnershipTransferred",
									"nameLocation": "656:20:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 364,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 361,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "693:13:2",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "677:29:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 360,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "677:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 363,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "724:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "708:24:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 362,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "708:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "676:57:2"
									},
									"src": "650:84:2"
								},
								{
									"body": {
										"id": 374,
										"nodeType": "Block",
										"src": "850:49:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 370,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 341,
																"src": "879:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 371,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "879:12:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 369,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 455,
														"src": "860:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 372,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "860:32:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 373,
												"nodeType": "ExpressionStatement",
												"src": "860:32:2"
											}
										]
									},
									"documentation": {
										"id": 366,
										"nodeType": "StructuredDocumentation",
										"src": "740:91:2",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 375,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 367,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "847:2:2"
									},
									"returnParameters": {
										"id": 368,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "850:0:2"
									},
									"scope": 456,
									"src": "836:63:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 383,
										"nodeType": "Block",
										"src": "1030:30:2",
										"statements": [
											{
												"expression": {
													"id": 381,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 359,
													"src": "1047:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 380,
												"id": 382,
												"nodeType": "Return",
												"src": "1040:13:2"
											}
										]
									},
									"documentation": {
										"id": 376,
										"nodeType": "StructuredDocumentation",
										"src": "905:65:2",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 384,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "984:5:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 377,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "989:2:2"
									},
									"returnParameters": {
										"id": 380,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 379,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 384,
												"src": "1021:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 378,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1021:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1020:9:2"
									},
									"scope": 456,
									"src": "975:85:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 397,
										"nodeType": "Block",
										"src": "1169:96:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 392,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 388,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 384,
																	"src": "1187:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 389,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1187:7:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 390,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 341,
																	"src": "1198:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 391,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1198:12:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1187:23:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 393,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1212:34:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 387,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1179:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 394,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1179:68:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 395,
												"nodeType": "ExpressionStatement",
												"src": "1179:68:2"
											},
											{
												"id": 396,
												"nodeType": "PlaceholderStatement",
												"src": "1257:1:2"
											}
										]
									},
									"documentation": {
										"id": 385,
										"nodeType": "StructuredDocumentation",
										"src": "1066:77:2",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 398,
									"name": "onlyOwner",
									"nameLocation": "1157:9:2",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 386,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1166:2:2"
									},
									"src": "1148:117:2",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 411,
										"nodeType": "Block",
										"src": "1661:47:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 407,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1698:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 406,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1690:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 405,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1690:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 408,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1690:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 404,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 455,
														"src": "1671:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 409,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1671:30:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 410,
												"nodeType": "ExpressionStatement",
												"src": "1671:30:2"
											}
										]
									},
									"documentation": {
										"id": 399,
										"nodeType": "StructuredDocumentation",
										"src": "1271:331:2",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 412,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 402,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 401,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 398,
												"src": "1651:9:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "1651:9:2"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1616:17:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 400,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1633:2:2"
									},
									"returnParameters": {
										"id": 403,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1661:0:2"
									},
									"scope": 456,
									"src": "1607:101:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 434,
										"nodeType": "Block",
										"src": "1927:128:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 426,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 421,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 415,
																"src": "1945:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 424,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1965:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 423,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1957:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 422,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1957:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 425,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1957:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1945:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 427,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1969:40:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 420,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1937:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 428,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1937:73:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 429,
												"nodeType": "ExpressionStatement",
												"src": "1937:73:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 431,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 415,
															"src": "2039:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 430,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 455,
														"src": "2020:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 432,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2020:28:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 433,
												"nodeType": "ExpressionStatement",
												"src": "2020:28:2"
											}
										]
									},
									"documentation": {
										"id": 413,
										"nodeType": "StructuredDocumentation",
										"src": "1714:138:2",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 435,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 418,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 417,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 398,
												"src": "1917:9:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "1917:9:2"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "1866:17:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 416,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 415,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1892:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 435,
												"src": "1884:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 414,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1884:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1883:18:2"
									},
									"returnParameters": {
										"id": 419,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1927:0:2"
									},
									"scope": 456,
									"src": "1857:198:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 454,
										"nodeType": "Block",
										"src": "2272:124:2",
										"statements": [
											{
												"assignments": [
													442
												],
												"declarations": [
													{
														"constant": false,
														"id": 442,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2290:8:2",
														"nodeType": "VariableDeclaration",
														"scope": 454,
														"src": "2282:16:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 441,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2282:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 444,
												"initialValue": {
													"id": 443,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 359,
													"src": "2301:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2282:25:2"
											},
											{
												"expression": {
													"id": 447,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 445,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 359,
														"src": "2317:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 446,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 438,
														"src": "2326:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2317:17:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 448,
												"nodeType": "ExpressionStatement",
												"src": "2317:17:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 450,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 442,
															"src": "2370:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 451,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 438,
															"src": "2380:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 449,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 365,
														"src": "2349:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 452,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2349:40:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 453,
												"nodeType": "EmitStatement",
												"src": "2344:45:2"
											}
										]
									},
									"documentation": {
										"id": 436,
										"nodeType": "StructuredDocumentation",
										"src": "2061:143:2",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 455,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2218:18:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 439,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 438,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2245:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 455,
												"src": "2237:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 437,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2237:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2236:18:2"
									},
									"returnParameters": {
										"id": 440,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2272:0:2"
									},
									"scope": 456,
									"src": "2209:187:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 457,
							"src": "578:1820:2",
							"usedErrors": []
						}
					],
					"src": "33:2365:2"
				},
				"id": 2
			},
			"brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol": {
				"ast": {
					"absolutePath": "brownie_projects/bebu_finance/contracts/utils/access/Withdrawable.sol",
					"exportedSymbols": {
						"Address": [
							329
						],
						"Context": [
							351
						],
						"ERC20": [
							1450
						],
						"IERC20": [
							1528
						],
						"IERC20Metadata": [
							1553
						],
						"Ownable": [
							456
						],
						"SafeERC20": [
							1778
						],
						"SafeMath": [
							862
						],
						"Withdrawable": [
							550
						]
					},
					"id": 551,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 458,
							"literals": [
								"solidity",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:3"
						},
						{
							"absolutePath": "brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol",
							"file": "../token/ERC20.sol",
							"id": 459,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 551,
							"sourceUnit": 1451,
							"src": "57:28:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol",
							"file": "../token/SafeERC20.sol",
							"id": 460,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 551,
							"sourceUnit": 1779,
							"src": "86:32:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "brownie_projects/bebu_finance/contracts/utils/access/Ownable.sol",
							"file": "./Ownable.sol",
							"id": 461,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 551,
							"sourceUnit": 457,
							"src": "119:23:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 463,
										"name": "Ownable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 456,
										"src": "313:7:3"
									},
									"id": 464,
									"nodeType": "InheritanceSpecifier",
									"src": "313:7:3"
								}
							],
							"canonicalName": "Withdrawable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 462,
								"nodeType": "StructuredDocumentation",
								"src": "144:141:3",
								"text": "Ensures that any contract that inherits from this contract is able to\nwithdraw funds that are accidentally received or stuck."
							},
							"fullyImplemented": true,
							"id": 550,
							"linearizedBaseContracts": [
								550,
								456,
								351
							],
							"name": "Withdrawable",
							"nameLocation": "297:12:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 468,
									"libraryName": {
										"id": 465,
										"name": "SafeERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1778,
										"src": "333:9:3"
									},
									"nodeType": "UsingForDirective",
									"src": "327:26:3",
									"typeName": {
										"id": 467,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 466,
											"name": "ERC20",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1450,
											"src": "347:5:3"
										},
										"referencedDeclaration": 1450,
										"src": "347:5:3",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ERC20_$1450",
											"typeString": "contract ERC20"
										}
									}
								},
								{
									"constant": true,
									"id": 474,
									"mutability": "constant",
									"name": "ETHER",
									"nameLocation": "375:5:3",
									"nodeType": "VariableDeclaration",
									"scope": 550,
									"src": "358:35:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 469,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "358:7:3",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "30",
												"id": 472,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "number",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "391:1:3",
												"typeDescriptions": {
													"typeIdentifier": "t_rational_0_by_1",
													"typeString": "int_const 0"
												},
												"value": "0"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_rational_0_by_1",
													"typeString": "int_const 0"
												}
											],
											"id": 471,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "ElementaryTypeNameExpression",
											"src": "383:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_type$_t_address_$",
												"typeString": "type(address)"
											},
											"typeName": {
												"id": 470,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "383:7:3",
												"typeDescriptions": {}
											}
										},
										"id": 473,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "typeConversion",
										"lValueRequested": false,
										"names": [],
										"nodeType": "FunctionCall",
										"src": "383:10:3",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "internal"
								},
								{
									"anonymous": false,
									"eventSelector": "9207361cc2a04b9c7a06691df1eb87c6a63957ae88bf01d0d18c81e3d1272099",
									"id": 482,
									"name": "LogWithdraw",
									"nameLocation": "406:11:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 481,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 476,
												"indexed": true,
												"mutability": "mutable",
												"name": "_from",
												"nameLocation": "443:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "427:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 475,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "427:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 478,
												"indexed": true,
												"mutability": "mutable",
												"name": "_assetAddress",
												"nameLocation": "474:13:3",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "458:29:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 477,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "458:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 480,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "502:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "497:11:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 479,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "497:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "417:97:3"
									},
									"src": "400:115:3"
								},
								{
									"body": {
										"id": 548,
										"nodeType": "Block",
										"src": "674:453:3",
										"statements": [
											{
												"assignments": [
													491
												],
												"declarations": [
													{
														"constant": false,
														"id": 491,
														"mutability": "mutable",
														"name": "assetBalance",
														"nameLocation": "689:12:3",
														"nodeType": "VariableDeclaration",
														"scope": 548,
														"src": "684:17:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 490,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "684:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 492,
												"nodeType": "VariableDeclarationStatement",
												"src": "684:17:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 495,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 493,
														"name": "_assetAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 485,
														"src": "715:13:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 494,
														"name": "ETHER",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 474,
														"src": "732:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "715:22:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 539,
													"nodeType": "Block",
													"src": "896:158:3",
													"statements": [
														{
															"expression": {
																"id": 528,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 518,
																	"name": "assetBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 491,
																	"src": "910:12:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 525,
																					"name": "this",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967268,
																					"src": "964:4:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_Withdrawable_$550",
																						"typeString": "contract Withdrawable"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_Withdrawable_$550",
																						"typeString": "contract Withdrawable"
																					}
																				],
																				"id": 524,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "956:7:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 523,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "956:7:3",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 526,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "956:13:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"expression": {
																			"arguments": [
																				{
																					"id": 520,
																					"name": "_assetAddress",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 485,
																					"src": "931:13:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 519,
																				"name": "ERC20",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1450,
																				"src": "925:5:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_ERC20_$1450_$",
																					"typeString": "type(contract ERC20)"
																				}
																			},
																			"id": 521,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "925:20:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_ERC20_$1450",
																				"typeString": "contract ERC20"
																			}
																		},
																		"id": 522,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "balanceOf",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 961,
																		"src": "925:30:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
																			"typeString": "function (address) view external returns (uint256)"
																		}
																	},
																	"id": 527,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "925:45:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "910:60:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 529,
															"nodeType": "ExpressionStatement",
															"src": "910:60:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 534,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "1018:3:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 535,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "1018:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 536,
																		"name": "assetBalance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 491,
																		"src": "1030:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 531,
																				"name": "_assetAddress",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 485,
																				"src": "990:13:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 530,
																			"name": "ERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1450,
																			"src": "984:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_ERC20_$1450_$",
																				"typeString": "type(contract ERC20)"
																			}
																		},
																		"id": 532,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "984:20:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_ERC20_$1450",
																			"typeString": "contract ERC20"
																		}
																	},
																	"id": 533,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1585,
																	"src": "984:33:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1528_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$1528_$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 537,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "984:59:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 538,
															"nodeType": "ExpressionStatement",
															"src": "984:59:3"
														}
													]
												},
												"id": 540,
												"nodeType": "IfStatement",
												"src": "711:343:3",
												"trueBody": {
													"id": 517,
													"nodeType": "Block",
													"src": "739:151:3",
													"statements": [
														{
															"assignments": [
																497
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 497,
																	"mutability": "mutable",
																	"name": "self",
																	"nameLocation": "761:4:3",
																	"nodeType": "VariableDeclaration",
																	"scope": 517,
																	"src": "753:12:3",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"typeName": {
																		"id": 496,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "753:7:3",
																		"stateMutability": "nonpayable",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 502,
															"initialValue": {
																"arguments": [
																	{
																		"id": 500,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "776:4:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_Withdrawable_$550",
																			"typeString": "contract Withdrawable"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_Withdrawable_$550",
																			"typeString": "contract Withdrawable"
																		}
																	],
																	"id": 499,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "768:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 498,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "768:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 501,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "768:13:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "753:28:3"
														},
														{
															"expression": {
																"id": 506,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 503,
																	"name": "assetBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 491,
																	"src": "796:12:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"id": 504,
																		"name": "self",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 497,
																		"src": "811:4:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"id": 505,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "balance",
																	"nodeType": "MemberAccess",
																	"src": "811:12:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "796:27:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 507,
															"nodeType": "ExpressionStatement",
															"src": "796:27:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 514,
																		"name": "assetBalance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 491,
																		"src": "866:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"expression": {
																					"id": 510,
																					"name": "msg",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967281,
																					"src": "845:3:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_message",
																						"typeString": "msg"
																					}
																				},
																				"id": 511,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "sender",
																				"nodeType": "MemberAccess",
																				"src": "845:10:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 509,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "837:8:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_payable_$",
																				"typeString": "type(address payable)"
																			},
																			"typeName": {
																				"id": 508,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "837:8:3",
																				"stateMutability": "payable",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 512,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "837:19:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	"id": 513,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"src": "837:28:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
																		"typeString": "function (uint256)"
																	}
																},
																"id": 515,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "837:42:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 516,
															"nodeType": "ExpressionStatement",
															"src": "837:42:3"
														}
													]
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 542,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1080:3:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 543,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1080:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 544,
															"name": "_assetAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 485,
															"src": "1092:13:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 545,
															"name": "assetBalance",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 491,
															"src": "1107:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 541,
														"name": "LogWithdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 482,
														"src": "1068:11:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 546,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1068:52:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 547,
												"nodeType": "EmitStatement",
												"src": "1063:57:3"
											}
										]
									},
									"documentation": {
										"id": 483,
										"nodeType": "StructuredDocumentation",
										"src": "521:90:3",
										"text": " @dev Withdraw asset.\n @param _assetAddress Asset to be withdrawn."
									},
									"functionSelector": "51cff8d9",
									"id": 549,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 488,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 487,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 398,
												"src": "664:9:3"
											},
											"nodeType": "ModifierInvocation",
											"src": "664:9:3"
										}
									],
									"name": "withdraw",
									"nameLocation": "625:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 486,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 485,
												"mutability": "mutable",
												"name": "_assetAddress",
												"nameLocation": "642:13:3",
												"nodeType": "VariableDeclaration",
												"scope": 549,
												"src": "634:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 484,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:23:3"
									},
									"returnParameters": {
										"id": 489,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "674:0:3"
									},
									"scope": 550,
									"src": "616:511:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 551,
							"src": "288:847:3",
							"usedErrors": []
						}
					],
					"src": "32:1104:3"
				},
				"id": 3
			},
			"brownie_projects/bebu_finance/contracts/utils/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "brownie_projects/bebu_finance/contracts/utils/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							862
						]
					},
					"id": 863,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 552,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeMath",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 553,
								"nodeType": "StructuredDocumentation",
								"src": "212:196:4",
								"text": " @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n now has built in overflow checking."
							},
							"fullyImplemented": true,
							"id": 862,
							"linearizedBaseContracts": [
								862
							],
							"name": "SafeMath",
							"nameLocation": "417:8:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 584,
										"nodeType": "Block",
										"src": "644:140:4",
										"statements": [
											{
												"id": 583,
												"nodeType": "UncheckedBlock",
												"src": "654:124:4",
												"statements": [
													{
														"assignments": [
															566
														],
														"declarations": [
															{
																"constant": false,
																"id": 566,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "686:1:4",
																"nodeType": "VariableDeclaration",
																"scope": 583,
																"src": "678:9:4",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 565,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "678:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 570,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 569,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 567,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 556,
																"src": "690:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 568,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 558,
																"src": "694:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "690:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "678:17:4"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 573,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 571,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 566,
																"src": "713:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 572,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 556,
																"src": "717:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "713:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 578,
														"nodeType": "IfStatement",
														"src": "709:28:4",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 574,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "728:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 575,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "735:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 576,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "727:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 564,
															"id": 577,
															"nodeType": "Return",
															"src": "720:17:4"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 579,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "759:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 580,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 566,
																	"src": "765:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 581,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "758:9:4",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 564,
														"id": 582,
														"nodeType": "Return",
														"src": "751:16:4"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 554,
										"nodeType": "StructuredDocumentation",
										"src": "432:131:4",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 585,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nameLocation": "577:6:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 559,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 556,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "592:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 585,
												"src": "584:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 555,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "584:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 558,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "603:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 585,
												"src": "595:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 557,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "595:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "583:22:4"
									},
									"returnParameters": {
										"id": 564,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 561,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 585,
												"src": "629:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 560,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "629:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 563,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 585,
												"src": "635:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 562,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "635:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "628:15:4"
									},
									"scope": 862,
									"src": "568:216:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 612,
										"nodeType": "Block",
										"src": "1006:113:4",
										"statements": [
											{
												"id": 611,
												"nodeType": "UncheckedBlock",
												"src": "1016:97:4",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 599,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 597,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 590,
																"src": "1044:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 598,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 588,
																"src": "1048:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1044:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 604,
														"nodeType": "IfStatement",
														"src": "1040:28:4",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 600,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1059:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 601,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1066:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 602,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1058:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 596,
															"id": 603,
															"nodeType": "Return",
															"src": "1051:17:4"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 605,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1090:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 608,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 606,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 588,
																		"src": "1096:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 607,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 590,
																		"src": "1100:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1096:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 609,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1089:13:4",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 596,
														"id": 610,
														"nodeType": "Return",
														"src": "1082:20:4"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 586,
										"nodeType": "StructuredDocumentation",
										"src": "790:135:4",
										"text": " @dev Returns the substraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 613,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nameLocation": "939:6:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 591,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 588,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "954:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 613,
												"src": "946:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 587,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "946:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 590,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "965:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 613,
												"src": "957:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 589,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "957:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "945:22:4"
									},
									"returnParameters": {
										"id": 596,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 593,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 613,
												"src": "991:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 592,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "991:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 595,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 613,
												"src": "997:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 594,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "997:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "990:15:4"
									},
									"scope": 862,
									"src": "930:189:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 654,
										"nodeType": "Block",
										"src": "1343:417:4",
										"statements": [
											{
												"id": 653,
												"nodeType": "UncheckedBlock",
												"src": "1353:401:4",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 627,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 625,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 616,
																"src": "1611:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 626,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1616:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1611:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 632,
														"nodeType": "IfStatement",
														"src": "1607:28:4",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 628,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1627:4:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 629,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1633:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 630,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1626:9:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 624,
															"id": 631,
															"nodeType": "Return",
															"src": "1619:16:4"
														}
													},
													{
														"assignments": [
															634
														],
														"declarations": [
															{
																"constant": false,
																"id": 634,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "1657:1:4",
																"nodeType": "VariableDeclaration",
																"scope": 653,
																"src": "1649:9:4",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 633,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1649:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 638,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 637,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 635,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 616,
																"src": "1661:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 636,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 618,
																"src": "1665:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1661:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1649:17:4"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 643,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 641,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 639,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 634,
																	"src": "1684:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 640,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 616,
																	"src": "1688:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1684:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 642,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 618,
																"src": "1693:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1684:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 648,
														"nodeType": "IfStatement",
														"src": "1680:33:4",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 644,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1704:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 645,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1711:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 646,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1703:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 624,
															"id": 647,
															"nodeType": "Return",
															"src": "1696:17:4"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 649,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1735:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 650,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 634,
																	"src": "1741:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 651,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1734:9:4",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 624,
														"id": 652,
														"nodeType": "Return",
														"src": "1727:16:4"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 614,
										"nodeType": "StructuredDocumentation",
										"src": "1125:137:4",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 655,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nameLocation": "1276:6:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 619,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 616,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1291:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 655,
												"src": "1283:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 615,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1283:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 618,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1302:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 655,
												"src": "1294:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 617,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1294:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1282:22:4"
									},
									"returnParameters": {
										"id": 624,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 621,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 655,
												"src": "1328:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 620,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1328:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 623,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 655,
												"src": "1334:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 622,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1334:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1327:15:4"
									},
									"scope": 862,
									"src": "1267:493:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 682,
										"nodeType": "Block",
										"src": "1985:114:4",
										"statements": [
											{
												"id": 681,
												"nodeType": "UncheckedBlock",
												"src": "1995:98:4",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 669,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 667,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 660,
																"src": "2023:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 668,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2028:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2023:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 674,
														"nodeType": "IfStatement",
														"src": "2019:29:4",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 670,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2039:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 671,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2046:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 672,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2038:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 666,
															"id": 673,
															"nodeType": "Return",
															"src": "2031:17:4"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 675,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2070:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 678,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 676,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 658,
																		"src": "2076:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 677,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 660,
																		"src": "2080:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2076:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 679,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2069:13:4",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 666,
														"id": 680,
														"nodeType": "Return",
														"src": "2062:20:4"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 656,
										"nodeType": "StructuredDocumentation",
										"src": "1766:138:4",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 683,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nameLocation": "1918:6:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 661,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 658,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1933:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 683,
												"src": "1925:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 657,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1925:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 660,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1944:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 683,
												"src": "1936:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 659,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1936:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1924:22:4"
									},
									"returnParameters": {
										"id": 666,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 663,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 683,
												"src": "1970:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 662,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1970:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 665,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 683,
												"src": "1976:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 664,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1976:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1969:15:4"
									},
									"scope": 862,
									"src": "1909:190:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 710,
										"nodeType": "Block",
										"src": "2334:114:4",
										"statements": [
											{
												"id": 709,
												"nodeType": "UncheckedBlock",
												"src": "2344:98:4",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 697,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 695,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 688,
																"src": "2372:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 696,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2377:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2372:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 702,
														"nodeType": "IfStatement",
														"src": "2368:29:4",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 698,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2388:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 699,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2395:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 700,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2387:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 694,
															"id": 701,
															"nodeType": "Return",
															"src": "2380:17:4"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 703,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2419:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 706,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 704,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 686,
																		"src": "2425:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 705,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 688,
																		"src": "2429:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2425:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 707,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2418:13:4",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 694,
														"id": 708,
														"nodeType": "Return",
														"src": "2411:20:4"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 684,
										"nodeType": "StructuredDocumentation",
										"src": "2105:148:4",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 711,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nameLocation": "2267:6:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 689,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 686,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2282:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 711,
												"src": "2274:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 685,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2274:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 688,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2293:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 711,
												"src": "2285:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 687,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2285:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2273:22:4"
									},
									"returnParameters": {
										"id": 694,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 691,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 711,
												"src": "2319:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 690,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2319:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 693,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 711,
												"src": "2325:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 692,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2325:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2318:15:4"
									},
									"scope": 862,
									"src": "2258:190:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 725,
										"nodeType": "Block",
										"src": "2750:29:4",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 723,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 721,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 714,
														"src": "2767:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 722,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 716,
														"src": "2771:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2767:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 720,
												"id": 724,
												"nodeType": "Return",
												"src": "2760:12:4"
											}
										]
									},
									"documentation": {
										"id": 712,
										"nodeType": "StructuredDocumentation",
										"src": "2454:224:4",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 726,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nameLocation": "2692:3:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 717,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 714,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2704:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 726,
												"src": "2696:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 713,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2696:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 716,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2715:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 726,
												"src": "2707:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 715,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2707:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2695:22:4"
									},
									"returnParameters": {
										"id": 720,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 719,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 726,
												"src": "2741:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 718,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2741:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2740:9:4"
									},
									"scope": 862,
									"src": "2683:96:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 740,
										"nodeType": "Block",
										"src": "3117:29:4",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 738,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 736,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 729,
														"src": "3134:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 737,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 731,
														"src": "3138:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3134:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 735,
												"id": 739,
												"nodeType": "Return",
												"src": "3127:12:4"
											}
										]
									},
									"documentation": {
										"id": 727,
										"nodeType": "StructuredDocumentation",
										"src": "2785:260:4",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 741,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nameLocation": "3059:3:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 732,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 729,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3071:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 741,
												"src": "3063:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 728,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3063:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 731,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3082:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 741,
												"src": "3074:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 730,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3074:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3062:22:4"
									},
									"returnParameters": {
										"id": 735,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 734,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 741,
												"src": "3108:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 733,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3108:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3107:9:4"
									},
									"scope": 862,
									"src": "3050:96:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 755,
										"nodeType": "Block",
										"src": "3460:29:4",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 753,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 751,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 744,
														"src": "3477:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 752,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 746,
														"src": "3481:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3477:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 750,
												"id": 754,
												"nodeType": "Return",
												"src": "3470:12:4"
											}
										]
									},
									"documentation": {
										"id": 742,
										"nodeType": "StructuredDocumentation",
										"src": "3152:236:4",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 756,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nameLocation": "3402:3:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 747,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 744,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3414:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 756,
												"src": "3406:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 743,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3406:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 746,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3425:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 756,
												"src": "3417:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 745,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3417:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3405:22:4"
									},
									"returnParameters": {
										"id": 750,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 749,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 756,
												"src": "3451:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 748,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3451:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3450:9:4"
									},
									"scope": 862,
									"src": "3393:96:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 770,
										"nodeType": "Block",
										"src": "3845:29:4",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 768,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 766,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 759,
														"src": "3862:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 767,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 761,
														"src": "3866:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3862:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 765,
												"id": 769,
												"nodeType": "Return",
												"src": "3855:12:4"
											}
										]
									},
									"documentation": {
										"id": 757,
										"nodeType": "StructuredDocumentation",
										"src": "3495:278:4",
										"text": " @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 771,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nameLocation": "3787:3:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 762,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 759,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3799:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 771,
												"src": "3791:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 758,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3791:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 761,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3810:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 771,
												"src": "3802:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 760,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3802:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3790:22:4"
									},
									"returnParameters": {
										"id": 765,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 764,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 771,
												"src": "3836:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 763,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3836:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3835:9:4"
									},
									"scope": 862,
									"src": "3778:96:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 785,
										"nodeType": "Block",
										"src": "4394:29:4",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 783,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 781,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 774,
														"src": "4411:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 782,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 776,
														"src": "4415:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4411:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 780,
												"id": 784,
												"nodeType": "Return",
												"src": "4404:12:4"
											}
										]
									},
									"documentation": {
										"id": 772,
										"nodeType": "StructuredDocumentation",
										"src": "3880:442:4",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 786,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nameLocation": "4336:3:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 777,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 774,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "4348:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 786,
												"src": "4340:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 773,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4340:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 776,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "4359:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 786,
												"src": "4351:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 775,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4351:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4339:22:4"
									},
									"returnParameters": {
										"id": 780,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 779,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 786,
												"src": "4385:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 778,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4385:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4384:9:4"
									},
									"scope": 862,
									"src": "4327:96:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 810,
										"nodeType": "Block",
										"src": "5012:106:4",
										"statements": [
											{
												"id": 809,
												"nodeType": "UncheckedBlock",
												"src": "5022:90:4",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 801,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 799,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 791,
																		"src": "5054:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<=",
																	"rightExpression": {
																		"id": 800,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 789,
																		"src": "5059:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5054:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 802,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 793,
																	"src": "5062:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 798,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5046:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 803,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5046:29:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 804,
														"nodeType": "ExpressionStatement",
														"src": "5046:29:4"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 807,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 805,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 789,
																"src": "5096:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 806,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 791,
																"src": "5100:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5096:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 797,
														"id": 808,
														"nodeType": "Return",
														"src": "5089:12:4"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 787,
										"nodeType": "StructuredDocumentation",
										"src": "4429:453:4",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 811,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nameLocation": "4896:3:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 794,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 789,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "4917:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 811,
												"src": "4909:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 788,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4909:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 791,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "4936:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 811,
												"src": "4928:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 790,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4928:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 793,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "4961:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 811,
												"src": "4947:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 792,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4947:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4899:80:4"
									},
									"returnParameters": {
										"id": 797,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 796,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 811,
												"src": "5003:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 795,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5003:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5002:9:4"
									},
									"scope": 862,
									"src": "4887:231:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 835,
										"nodeType": "Block",
										"src": "5727:105:4",
										"statements": [
											{
												"id": 834,
												"nodeType": "UncheckedBlock",
												"src": "5737:89:4",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 826,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 824,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 816,
																		"src": "5769:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 825,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5773:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5769:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 827,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 818,
																	"src": "5776:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 823,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5761:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 828,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5761:28:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 829,
														"nodeType": "ExpressionStatement",
														"src": "5761:28:4"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 832,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 830,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 814,
																"src": "5810:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 831,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 816,
																"src": "5814:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5810:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 822,
														"id": 833,
														"nodeType": "Return",
														"src": "5803:12:4"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 812,
										"nodeType": "StructuredDocumentation",
										"src": "5124:473:4",
										"text": " @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 836,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nameLocation": "5611:3:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 819,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 814,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "5632:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 836,
												"src": "5624:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 813,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5624:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 816,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "5651:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 836,
												"src": "5643:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 815,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5643:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 818,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5676:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 836,
												"src": "5662:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 817,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5662:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5614:80:4"
									},
									"returnParameters": {
										"id": 822,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 821,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 836,
												"src": "5718:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 820,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5718:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5717:9:4"
									},
									"scope": 862,
									"src": "5602:230:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 860,
										"nodeType": "Block",
										"src": "6603:105:4",
										"statements": [
											{
												"id": 859,
												"nodeType": "UncheckedBlock",
												"src": "6613:89:4",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 851,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 849,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 841,
																		"src": "6645:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 850,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6649:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "6645:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 852,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 843,
																	"src": "6652:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 848,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "6637:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 853,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6637:28:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 854,
														"nodeType": "ExpressionStatement",
														"src": "6637:28:4"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 857,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 855,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 839,
																"src": "6686:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"id": 856,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 841,
																"src": "6690:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6686:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 847,
														"id": 858,
														"nodeType": "Return",
														"src": "6679:12:4"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 837,
										"nodeType": "StructuredDocumentation",
										"src": "5838:635:4",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 861,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nameLocation": "6487:3:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 844,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 839,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "6508:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 861,
												"src": "6500:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 838,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6500:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 841,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "6527:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 861,
												"src": "6519:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 840,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6519:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 843,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6552:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 861,
												"src": "6538:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 842,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6538:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6490:80:4"
									},
									"returnParameters": {
										"id": 847,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 846,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 861,
												"src": "6594:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 845,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6594:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6593:9:4"
									},
									"scope": 862,
									"src": "6478:230:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 863,
							"src": "409:6301:4",
							"usedErrors": []
						}
					],
					"src": "33:6677:4"
				},
				"id": 4
			},
			"brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol": {
				"ast": {
					"absolutePath": "brownie_projects/bebu_finance/contracts/utils/token/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							351
						],
						"ERC20": [
							1450
						],
						"IERC20": [
							1528
						],
						"IERC20Metadata": [
							1553
						]
					},
					"id": 1451,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 864,
							"literals": [
								"solidity",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:5"
						},
						{
							"absolutePath": "brownie_projects/bebu_finance/contracts/utils/token/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 865,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1451,
							"sourceUnit": 1529,
							"src": "58:22:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "brownie_projects/bebu_finance/contracts/utils/token/IERC20Metadata.sol",
							"file": "./IERC20Metadata.sol",
							"id": 866,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1451,
							"sourceUnit": 1554,
							"src": "81:30:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "brownie_projects/bebu_finance/contracts/utils/Context.sol",
							"file": "../Context.sol",
							"id": 867,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1451,
							"sourceUnit": 352,
							"src": "112:24:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 869,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 351,
										"src": "1330:7:5"
									},
									"id": 870,
									"nodeType": "InheritanceSpecifier",
									"src": "1330:7:5"
								},
								{
									"baseName": {
										"id": 871,
										"name": "IERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1528,
										"src": "1339:6:5"
									},
									"id": 872,
									"nodeType": "InheritanceSpecifier",
									"src": "1339:6:5"
								},
								{
									"baseName": {
										"id": 873,
										"name": "IERC20Metadata",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1553,
										"src": "1347:14:5"
									},
									"id": 874,
									"nodeType": "InheritanceSpecifier",
									"src": "1347:14:5"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 868,
								"nodeType": "StructuredDocumentation",
								"src": "139:1172:5",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
							},
							"fullyImplemented": true,
							"id": 1450,
							"linearizedBaseContracts": [
								1450,
								1553,
								1528,
								351
							],
							"name": "ERC20",
							"nameLocation": "1321:5:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 878,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1404:9:5",
									"nodeType": "VariableDeclaration",
									"scope": 1450,
									"src": "1368:45:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 877,
										"keyType": {
											"id": 875,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1376:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1368:27:5",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 876,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1387:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 884,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1476:11:5",
									"nodeType": "VariableDeclaration",
									"scope": 1450,
									"src": "1420:67:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 883,
										"keyType": {
											"id": 879,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1428:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1420:47:5",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueType": {
											"id": 882,
											"keyType": {
												"id": 880,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1447:7:5",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1439:27:5",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueType": {
												"id": 881,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1458:7:5",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 886,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1510:12:5",
									"nodeType": "VariableDeclaration",
									"scope": 1450,
									"src": "1494:28:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 885,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1494:7:5",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 888,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1544:5:5",
									"nodeType": "VariableDeclaration",
									"scope": 1450,
									"src": "1529:20:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 887,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1529:6:5",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 890,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1570:7:5",
									"nodeType": "VariableDeclaration",
									"scope": 1450,
									"src": "1555:22:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 889,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1555:6:5",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 906,
										"nodeType": "Block",
										"src": "1943:57:5",
										"statements": [
											{
												"expression": {
													"id": 900,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 898,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 888,
														"src": "1953:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 899,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 893,
														"src": "1961:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1953:13:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 901,
												"nodeType": "ExpressionStatement",
												"src": "1953:13:5"
											},
											{
												"expression": {
													"id": 904,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 902,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 890,
														"src": "1976:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 903,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 895,
														"src": "1986:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1976:17:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 905,
												"nodeType": "ExpressionStatement",
												"src": "1976:17:5"
											}
										]
									},
									"documentation": {
										"id": 891,
										"nodeType": "StructuredDocumentation",
										"src": "1584:298:5",
										"text": " @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 907,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 896,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 893,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1913:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 907,
												"src": "1899:19:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 892,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1899:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 895,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1934:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 907,
												"src": "1920:21:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 894,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1920:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1898:44:5"
									},
									"returnParameters": {
										"id": 897,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1943:0:5"
									},
									"scope": 1450,
									"src": "1887:113:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1540
									],
									"body": {
										"id": 916,
										"nodeType": "Block",
										"src": "2134:29:5",
										"statements": [
											{
												"expression": {
													"id": 914,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 888,
													"src": "2151:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 913,
												"id": 915,
												"nodeType": "Return",
												"src": "2144:12:5"
											}
										]
									},
									"documentation": {
										"id": 908,
										"nodeType": "StructuredDocumentation",
										"src": "2006:54:5",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 917,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2074:4:5",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 910,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2101:8:5"
									},
									"parameters": {
										"id": 909,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2078:2:5"
									},
									"returnParameters": {
										"id": 913,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 912,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 917,
												"src": "2119:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 911,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2119:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2118:15:5"
									},
									"scope": 1450,
									"src": "2065:98:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1546
									],
									"body": {
										"id": 926,
										"nodeType": "Block",
										"src": "2347:31:5",
										"statements": [
											{
												"expression": {
													"id": 924,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 890,
													"src": "2364:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 923,
												"id": 925,
												"nodeType": "Return",
												"src": "2357:14:5"
											}
										]
									},
									"documentation": {
										"id": 918,
										"nodeType": "StructuredDocumentation",
										"src": "2169:102:5",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 927,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2285:6:5",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 920,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2314:8:5"
									},
									"parameters": {
										"id": 919,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2291:2:5"
									},
									"returnParameters": {
										"id": 923,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 922,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 927,
												"src": "2332:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 921,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2332:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2331:15:5"
									},
									"scope": 1450,
									"src": "2276:102:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1552
									],
									"body": {
										"id": 936,
										"nodeType": "Block",
										"src": "3067:26:5",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 934,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3084:2:5",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 933,
												"id": 935,
												"nodeType": "Return",
												"src": "3077:9:5"
											}
										]
									},
									"documentation": {
										"id": 928,
										"nodeType": "StructuredDocumentation",
										"src": "2384:613:5",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 937,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3011:8:5",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 930,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3042:8:5"
									},
									"parameters": {
										"id": 929,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3019:2:5"
									},
									"returnParameters": {
										"id": 933,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 932,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 937,
												"src": "3060:5:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 931,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3060:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3059:7:5"
									},
									"scope": 1450,
									"src": "3002:91:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1459
									],
									"body": {
										"id": 946,
										"nodeType": "Block",
										"src": "3223:36:5",
										"statements": [
											{
												"expression": {
													"id": 944,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 886,
													"src": "3240:12:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 943,
												"id": 945,
												"nodeType": "Return",
												"src": "3233:19:5"
											}
										]
									},
									"documentation": {
										"id": 938,
										"nodeType": "StructuredDocumentation",
										"src": "3099:49:5",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 947,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3162:11:5",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 940,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3196:8:5"
									},
									"parameters": {
										"id": 939,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3173:2:5"
									},
									"returnParameters": {
										"id": 943,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 942,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 947,
												"src": "3214:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 941,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3214:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3213:9:5"
									},
									"scope": 1450,
									"src": "3153:106:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1467
									],
									"body": {
										"id": 960,
										"nodeType": "Block",
										"src": "3400:42:5",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 956,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 878,
														"src": "3417:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 958,
													"indexExpression": {
														"id": 957,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 950,
														"src": "3427:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3417:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 955,
												"id": 959,
												"nodeType": "Return",
												"src": "3410:25:5"
											}
										]
									},
									"documentation": {
										"id": 948,
										"nodeType": "StructuredDocumentation",
										"src": "3265:47:5",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 961,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3326:9:5",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 952,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3373:8:5"
									},
									"parameters": {
										"id": 951,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 950,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3344:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 961,
												"src": "3336:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 949,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3336:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3335:17:5"
									},
									"returnParameters": {
										"id": 955,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 954,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 961,
												"src": "3391:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 953,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3391:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3390:9:5"
									},
									"scope": 1450,
									"src": "3317:125:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1477
									],
									"body": {
										"id": 985,
										"nodeType": "Block",
										"src": "3723:104:5",
										"statements": [
											{
												"assignments": [
													973
												],
												"declarations": [
													{
														"constant": false,
														"id": 973,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3741:5:5",
														"nodeType": "VariableDeclaration",
														"scope": 985,
														"src": "3733:13:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 972,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3733:7:5",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 976,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 974,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 341,
														"src": "3749:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 975,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3749:12:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3733:28:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 978,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 973,
															"src": "3781:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 979,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 964,
															"src": "3788:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 980,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 966,
															"src": "3792:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 977,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1211,
														"src": "3771:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 981,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3771:28:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 982,
												"nodeType": "ExpressionStatement",
												"src": "3771:28:5"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 983,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3816:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 971,
												"id": 984,
												"nodeType": "Return",
												"src": "3809:11:5"
											}
										]
									},
									"documentation": {
										"id": 962,
										"nodeType": "StructuredDocumentation",
										"src": "3448:185:5",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
									},
									"functionSelector": "a9059cbb",
									"id": 986,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3647:8:5",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 968,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3699:8:5"
									},
									"parameters": {
										"id": 967,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 964,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3664:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 986,
												"src": "3656:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 963,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3656:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 966,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3676:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 986,
												"src": "3668:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 965,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3668:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3655:28:5"
									},
									"returnParameters": {
										"id": 971,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 970,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 986,
												"src": "3717:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 969,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3717:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3716:6:5"
									},
									"scope": 1450,
									"src": "3638:189:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1487
									],
									"body": {
										"id": 1003,
										"nodeType": "Block",
										"src": "3983:51:5",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 997,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 884,
															"src": "4000:11:5",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 999,
														"indexExpression": {
															"id": 998,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 989,
															"src": "4012:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4000:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1001,
													"indexExpression": {
														"id": 1000,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 991,
														"src": "4019:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4000:27:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 996,
												"id": 1002,
												"nodeType": "Return",
												"src": "3993:34:5"
											}
										]
									},
									"documentation": {
										"id": 987,
										"nodeType": "StructuredDocumentation",
										"src": "3833:47:5",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 1004,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "3894:9:5",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 993,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3956:8:5"
									},
									"parameters": {
										"id": 992,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 989,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3912:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1004,
												"src": "3904:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 988,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3904:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 991,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3927:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1004,
												"src": "3919:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 990,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3919:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3903:32:5"
									},
									"returnParameters": {
										"id": 996,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 995,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1004,
												"src": "3974:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 994,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3974:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3973:9:5"
									},
									"scope": 1450,
									"src": "3885:149:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1497
									],
									"body": {
										"id": 1028,
										"nodeType": "Block",
										"src": "4431:108:5",
										"statements": [
											{
												"assignments": [
													1016
												],
												"declarations": [
													{
														"constant": false,
														"id": 1016,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4449:5:5",
														"nodeType": "VariableDeclaration",
														"scope": 1028,
														"src": "4441:13:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1015,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4441:7:5",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1019,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1017,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 341,
														"src": "4457:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 1018,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4457:12:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4441:28:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1021,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1016,
															"src": "4488:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1022,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1007,
															"src": "4495:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1023,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1009,
															"src": "4504:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1020,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1384,
														"src": "4479:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1024,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4479:32:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1025,
												"nodeType": "ExpressionStatement",
												"src": "4479:32:5"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1026,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4528:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1014,
												"id": 1027,
												"nodeType": "Return",
												"src": "4521:11:5"
											}
										]
									},
									"documentation": {
										"id": 1005,
										"nodeType": "StructuredDocumentation",
										"src": "4040:297:5",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 1029,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4351:7:5",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1011,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4407:8:5"
									},
									"parameters": {
										"id": 1010,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1007,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4367:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1029,
												"src": "4359:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1006,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4359:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1009,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4384:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1029,
												"src": "4376:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1008,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4376:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4358:33:5"
									},
									"returnParameters": {
										"id": 1014,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1013,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1029,
												"src": "4425:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1012,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4425:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4424:6:5"
									},
									"scope": 1450,
									"src": "4342:197:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1509
									],
									"body": {
										"id": 1061,
										"nodeType": "Block",
										"src": "5234:153:5",
										"statements": [
											{
												"assignments": [
													1043
												],
												"declarations": [
													{
														"constant": false,
														"id": 1043,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5252:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1061,
														"src": "5244:15:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1042,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5244:7:5",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1046,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1044,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 341,
														"src": "5262:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 1045,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5262:12:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5244:30:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1048,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1032,
															"src": "5300:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1049,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1043,
															"src": "5306:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1050,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1036,
															"src": "5315:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1047,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1427,
														"src": "5284:15:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1051,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5284:38:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1052,
												"nodeType": "ExpressionStatement",
												"src": "5284:38:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1054,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1032,
															"src": "5342:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1055,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1034,
															"src": "5348:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1056,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1036,
															"src": "5352:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1053,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1211,
														"src": "5332:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1057,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5332:27:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1058,
												"nodeType": "ExpressionStatement",
												"src": "5332:27:5"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1059,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5376:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1041,
												"id": 1060,
												"nodeType": "Return",
												"src": "5369:11:5"
											}
										]
									},
									"documentation": {
										"id": 1030,
										"nodeType": "StructuredDocumentation",
										"src": "4545:551:5",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."
									},
									"functionSelector": "23b872dd",
									"id": 1062,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5110:12:5",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1038,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5210:8:5"
									},
									"parameters": {
										"id": 1037,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1032,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5140:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1062,
												"src": "5132:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1031,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5132:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1034,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5162:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 1062,
												"src": "5154:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1033,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5154:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1036,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5182:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1062,
												"src": "5174:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1035,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5174:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5122:72:5"
									},
									"returnParameters": {
										"id": 1041,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1040,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1062,
												"src": "5228:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1039,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5228:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5227:6:5"
									},
									"scope": 1450,
									"src": "5101:286:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1091,
										"nodeType": "Block",
										"src": "5876:142:5",
										"statements": [
											{
												"assignments": [
													1073
												],
												"declarations": [
													{
														"constant": false,
														"id": 1073,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "5894:5:5",
														"nodeType": "VariableDeclaration",
														"scope": 1091,
														"src": "5886:13:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1072,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5886:7:5",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1076,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1074,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 341,
														"src": "5902:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 1075,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5902:12:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5886:28:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1078,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1073,
															"src": "5933:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1079,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1065,
															"src": "5940:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1086,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"baseExpression": {
																		"id": 1080,
																		"name": "_allowances",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 884,
																		"src": "5949:11:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																			"typeString": "mapping(address => mapping(address => uint256))"
																		}
																	},
																	"id": 1082,
																	"indexExpression": {
																		"id": 1081,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1073,
																		"src": "5961:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "5949:18:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1084,
																"indexExpression": {
																	"id": 1083,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1065,
																	"src": "5968:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5949:27:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 1085,
																"name": "addedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1067,
																"src": "5979:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5949:40:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1077,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1384,
														"src": "5924:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1087,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5924:66:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1088,
												"nodeType": "ExpressionStatement",
												"src": "5924:66:5"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1089,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6007:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1071,
												"id": 1090,
												"nodeType": "Return",
												"src": "6000:11:5"
											}
										]
									},
									"documentation": {
										"id": 1063,
										"nodeType": "StructuredDocumentation",
										"src": "5393:384:5",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 1092,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nameLocation": "5791:17:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1068,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1065,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "5817:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1092,
												"src": "5809:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1064,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5809:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1067,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "5834:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 1092,
												"src": "5826:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1066,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5826:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5808:37:5"
									},
									"returnParameters": {
										"id": 1071,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1070,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1092,
												"src": "5870:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1069,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5870:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5869:6:5"
									},
									"scope": 1450,
									"src": "5782:236:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1133,
										"nodeType": "Block",
										"src": "6604:330:5",
										"statements": [
											{
												"assignments": [
													1103
												],
												"declarations": [
													{
														"constant": false,
														"id": 1103,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "6622:5:5",
														"nodeType": "VariableDeclaration",
														"scope": 1133,
														"src": "6614:13:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1102,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6614:7:5",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1106,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1104,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 341,
														"src": "6630:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 1105,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6630:12:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6614:28:5"
											},
											{
												"assignments": [
													1108
												],
												"declarations": [
													{
														"constant": false,
														"id": 1108,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "6660:16:5",
														"nodeType": "VariableDeclaration",
														"scope": 1133,
														"src": "6652:24:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1107,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6652:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1114,
												"initialValue": {
													"baseExpression": {
														"baseExpression": {
															"id": 1109,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 884,
															"src": "6679:11:5",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 1111,
														"indexExpression": {
															"id": 1110,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1103,
															"src": "6691:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "6679:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1113,
													"indexExpression": {
														"id": 1112,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1095,
														"src": "6698:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "6679:27:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6652:54:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1118,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1116,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1108,
																"src": "6724:16:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1117,
																"name": "subtractedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1097,
																"src": "6744:15:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6724:35:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 1119,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6761:39:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															},
															"value": "ERC20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															}
														],
														"id": 1115,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6716:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1120,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6716:85:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1121,
												"nodeType": "ExpressionStatement",
												"src": "6716:85:5"
											},
											{
												"id": 1130,
												"nodeType": "UncheckedBlock",
												"src": "6811:95:5",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 1123,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1103,
																	"src": "6844:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1124,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1095,
																	"src": "6851:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1127,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1125,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1108,
																		"src": "6860:16:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 1126,
																		"name": "subtractedValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1097,
																		"src": "6879:15:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6860:34:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1122,
																"name": "_approve",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1384,
																"src": "6835:8:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (address,address,uint256)"
																}
															},
															"id": 1128,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6835:60:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1129,
														"nodeType": "ExpressionStatement",
														"src": "6835:60:5"
													}
												]
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1131,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6923:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1101,
												"id": 1132,
												"nodeType": "Return",
												"src": "6916:11:5"
											}
										]
									},
									"documentation": {
										"id": 1093,
										"nodeType": "StructuredDocumentation",
										"src": "6024:476:5",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 1134,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nameLocation": "6514:17:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1098,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1095,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6540:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1134,
												"src": "6532:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1094,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6532:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1097,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "6557:15:5",
												"nodeType": "VariableDeclaration",
												"scope": 1134,
												"src": "6549:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1096,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6549:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6531:42:5"
									},
									"returnParameters": {
										"id": 1101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1100,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1134,
												"src": "6598:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1099,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6598:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6597:6:5"
									},
									"scope": 1450,
									"src": "6505:429:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1210,
										"nodeType": "Block",
										"src": "7505:543:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1150,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1145,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1137,
																"src": "7523:4:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1148,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7539:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1147,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7531:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1146,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7531:7:5",
																		"typeDescriptions": {}
																	}
																},
																"id": 1149,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7531:10:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7523:18:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 1151,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7543:39:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															},
															"value": "ERC20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															}
														],
														"id": 1144,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7515:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1152,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7515:68:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1153,
												"nodeType": "ExpressionStatement",
												"src": "7515:68:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1160,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1155,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1139,
																"src": "7601:2:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1158,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7615:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1157,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7607:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1156,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7607:7:5",
																		"typeDescriptions": {}
																	}
																},
																"id": 1159,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7607:10:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7601:16:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 1161,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7619:37:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															},
															"value": "ERC20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															}
														],
														"id": 1154,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7593:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1162,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7593:64:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1163,
												"nodeType": "ExpressionStatement",
												"src": "7593:64:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1165,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1137,
															"src": "7689:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1166,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1139,
															"src": "7695:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1167,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1141,
															"src": "7699:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1164,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1438,
														"src": "7668:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1168,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7668:38:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1169,
												"nodeType": "ExpressionStatement",
												"src": "7668:38:5"
											},
											{
												"assignments": [
													1171
												],
												"declarations": [
													{
														"constant": false,
														"id": 1171,
														"mutability": "mutable",
														"name": "fromBalance",
														"nameLocation": "7725:11:5",
														"nodeType": "VariableDeclaration",
														"scope": 1210,
														"src": "7717:19:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1170,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7717:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1175,
												"initialValue": {
													"baseExpression": {
														"id": 1172,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 878,
														"src": "7739:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1174,
													"indexExpression": {
														"id": 1173,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1137,
														"src": "7749:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "7739:15:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7717:37:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1179,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1177,
																"name": "fromBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1171,
																"src": "7772:11:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1178,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1141,
																"src": "7787:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7772:21:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
															"id": 1180,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7795:40:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															},
															"value": "ERC20: transfer amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															}
														],
														"id": 1176,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7764:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1181,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7764:72:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1182,
												"nodeType": "ExpressionStatement",
												"src": "7764:72:5"
											},
											{
												"id": 1191,
												"nodeType": "UncheckedBlock",
												"src": "7846:73:5",
												"statements": [
													{
														"expression": {
															"id": 1189,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 1183,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 878,
																	"src": "7870:9:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1185,
																"indexExpression": {
																	"id": 1184,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1137,
																	"src": "7880:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "7870:15:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1188,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1186,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1171,
																	"src": "7888:11:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 1187,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1141,
																	"src": "7902:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7888:20:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7870:38:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1190,
														"nodeType": "ExpressionStatement",
														"src": "7870:38:5"
													}
												]
											},
											{
												"expression": {
													"id": 1196,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1192,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 878,
															"src": "7928:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1194,
														"indexExpression": {
															"id": 1193,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1139,
															"src": "7938:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "7928:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1195,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1141,
														"src": "7945:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7928:23:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1197,
												"nodeType": "ExpressionStatement",
												"src": "7928:23:5"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1199,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1137,
															"src": "7976:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1200,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1139,
															"src": "7982:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1201,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1141,
															"src": "7986:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1198,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1518,
														"src": "7967:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1202,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7967:26:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1203,
												"nodeType": "EmitStatement",
												"src": "7962:31:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1205,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1137,
															"src": "8024:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1206,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1139,
															"src": "8030:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1207,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1141,
															"src": "8034:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1204,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1449,
														"src": "8004:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1208,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8004:37:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1209,
												"nodeType": "ExpressionStatement",
												"src": "8004:37:5"
											}
										]
									},
									"documentation": {
										"id": 1135,
										"nodeType": "StructuredDocumentation",
										"src": "6940:452:5",
										"text": " @dev Moves `amount` of tokens from `sender` to `recipient`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."
									},
									"id": 1211,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "7406:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1142,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1137,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "7433:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1211,
												"src": "7425:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1136,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7425:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1139,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7455:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 1211,
												"src": "7447:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1138,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7447:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1141,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "7475:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1211,
												"src": "7467:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1140,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7467:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7415:72:5"
									},
									"returnParameters": {
										"id": 1143,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7505:0:5"
									},
									"scope": 1450,
									"src": "7397:651:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1266,
										"nodeType": "Block",
										"src": "8389:324:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1225,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1220,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1214,
																"src": "8407:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1223,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8426:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1222,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8418:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1221,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8418:7:5",
																		"typeDescriptions": {}
																	}
																},
																"id": 1224,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8418:10:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8407:21:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 1226,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8430:33:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															},
															"value": "ERC20: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															}
														],
														"id": 1219,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8399:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1227,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8399:65:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1228,
												"nodeType": "ExpressionStatement",
												"src": "8399:65:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1232,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8504:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1231,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8496:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1230,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8496:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1233,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8496:10:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1234,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1214,
															"src": "8508:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1235,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1216,
															"src": "8517:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1229,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1438,
														"src": "8475:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1236,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8475:49:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1237,
												"nodeType": "ExpressionStatement",
												"src": "8475:49:5"
											},
											{
												"expression": {
													"id": 1240,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1238,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 886,
														"src": "8535:12:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1239,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1216,
														"src": "8551:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8535:22:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1241,
												"nodeType": "ExpressionStatement",
												"src": "8535:22:5"
											},
											{
												"expression": {
													"id": 1246,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1242,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 878,
															"src": "8567:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1244,
														"indexExpression": {
															"id": 1243,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1214,
															"src": "8577:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8567:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1245,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1216,
														"src": "8589:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8567:28:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1247,
												"nodeType": "ExpressionStatement",
												"src": "8567:28:5"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1251,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8627:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1250,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8619:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1249,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8619:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1252,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8619:10:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1253,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1214,
															"src": "8631:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1254,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1216,
															"src": "8640:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1248,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1518,
														"src": "8610:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1255,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8610:37:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1256,
												"nodeType": "EmitStatement",
												"src": "8605:42:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1260,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8686:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1259,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8678:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1258,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8678:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1261,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8678:10:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1262,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1214,
															"src": "8690:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1263,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1216,
															"src": "8699:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1257,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1449,
														"src": "8658:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1264,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8658:48:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1265,
												"nodeType": "ExpressionStatement",
												"src": "8658:48:5"
											}
										]
									},
									"documentation": {
										"id": 1212,
										"nodeType": "StructuredDocumentation",
										"src": "8054:265:5",
										"text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."
									},
									"id": 1267,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "8333:5:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1217,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1214,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8347:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1267,
												"src": "8339:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1213,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8339:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1216,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "8364:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1267,
												"src": "8356:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1215,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8356:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8338:33:5"
									},
									"returnParameters": {
										"id": 1218,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8389:0:5"
									},
									"scope": 1450,
									"src": "8324:389:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1338,
										"nodeType": "Block",
										"src": "9098:511:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1281,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1276,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1270,
																"src": "9116:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1279,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9135:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1278,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9127:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1277,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9127:7:5",
																		"typeDescriptions": {}
																	}
																},
																"id": 1280,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9127:10:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9116:21:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
															"id": 1282,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9139:35:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															},
															"value": "ERC20: burn from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															}
														],
														"id": 1275,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9108:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1283,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9108:67:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1284,
												"nodeType": "ExpressionStatement",
												"src": "9108:67:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1286,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1270,
															"src": "9207:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1289,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9224:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1288,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9216:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1287,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9216:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1290,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9216:10:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1291,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1272,
															"src": "9228:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1285,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1438,
														"src": "9186:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1292,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9186:49:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1293,
												"nodeType": "ExpressionStatement",
												"src": "9186:49:5"
											},
											{
												"assignments": [
													1295
												],
												"declarations": [
													{
														"constant": false,
														"id": 1295,
														"mutability": "mutable",
														"name": "accountBalance",
														"nameLocation": "9254:14:5",
														"nodeType": "VariableDeclaration",
														"scope": 1338,
														"src": "9246:22:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1294,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9246:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1299,
												"initialValue": {
													"baseExpression": {
														"id": 1296,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 878,
														"src": "9271:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1298,
													"indexExpression": {
														"id": 1297,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1270,
														"src": "9281:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9271:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9246:43:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1303,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1301,
																"name": "accountBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1295,
																"src": "9307:14:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1302,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1272,
																"src": "9325:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9307:24:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
															"id": 1304,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9333:36:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															},
															"value": "ERC20: burn amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															}
														],
														"id": 1300,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9299:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1305,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9299:71:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1306,
												"nodeType": "ExpressionStatement",
												"src": "9299:71:5"
											},
											{
												"id": 1315,
												"nodeType": "UncheckedBlock",
												"src": "9380:79:5",
												"statements": [
													{
														"expression": {
															"id": 1313,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 1307,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 878,
																	"src": "9404:9:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1309,
																"indexExpression": {
																	"id": 1308,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1270,
																	"src": "9414:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "9404:18:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1312,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1310,
																	"name": "accountBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1295,
																	"src": "9425:14:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 1311,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1272,
																	"src": "9442:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9425:23:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9404:44:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1314,
														"nodeType": "ExpressionStatement",
														"src": "9404:44:5"
													}
												]
											},
											{
												"expression": {
													"id": 1318,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1316,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 886,
														"src": "9468:12:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 1317,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1272,
														"src": "9484:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9468:22:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1319,
												"nodeType": "ExpressionStatement",
												"src": "9468:22:5"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1321,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1270,
															"src": "9515:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1324,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9532:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1323,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9524:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1322,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9524:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1325,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9524:10:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1326,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1272,
															"src": "9536:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1320,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1518,
														"src": "9506:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1327,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9506:37:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1328,
												"nodeType": "EmitStatement",
												"src": "9501:42:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1330,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1270,
															"src": "9574:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1333,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9591:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1332,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9583:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1331,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9583:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1334,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9583:10:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1335,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1272,
															"src": "9595:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1329,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1449,
														"src": "9554:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1336,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9554:48:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1337,
												"nodeType": "ExpressionStatement",
												"src": "9554:48:5"
											}
										]
									},
									"documentation": {
										"id": 1268,
										"nodeType": "StructuredDocumentation",
										"src": "8719:309:5",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
									},
									"id": 1339,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "9042:5:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1273,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1270,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9056:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1339,
												"src": "9048:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1269,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9048:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1272,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9073:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1339,
												"src": "9065:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1271,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9065:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9047:33:5"
									},
									"returnParameters": {
										"id": 1274,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9098:0:5"
									},
									"scope": 1450,
									"src": "9033:576:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1383,
										"nodeType": "Block",
										"src": "10145:257:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1355,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1350,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1342,
																"src": "10163:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1353,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10180:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1352,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10172:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1351,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10172:7:5",
																		"typeDescriptions": {}
																	}
																},
																"id": 1354,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10172:10:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10163:19:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 1356,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10184:38:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															},
															"value": "ERC20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															}
														],
														"id": 1349,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10155:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1357,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10155:68:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1358,
												"nodeType": "ExpressionStatement",
												"src": "10155:68:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1365,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1360,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1344,
																"src": "10241:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1363,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10260:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1362,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10252:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1361,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10252:7:5",
																		"typeDescriptions": {}
																	}
																},
																"id": 1364,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10252:10:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10241:21:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 1366,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10264:36:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															},
															"value": "ERC20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															}
														],
														"id": 1359,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10233:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1367,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10233:68:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1368,
												"nodeType": "ExpressionStatement",
												"src": "10233:68:5"
											},
											{
												"expression": {
													"id": 1375,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 1369,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 884,
																"src": "10312:11:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 1372,
															"indexExpression": {
																"id": 1370,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1342,
																"src": "10324:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10312:18:5",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1373,
														"indexExpression": {
															"id": 1371,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1344,
															"src": "10331:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10312:27:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1374,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1346,
														"src": "10342:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10312:36:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1376,
												"nodeType": "ExpressionStatement",
												"src": "10312:36:5"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1378,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1342,
															"src": "10372:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1379,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1344,
															"src": "10379:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1380,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1346,
															"src": "10388:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1377,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1527,
														"src": "10363:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1381,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10363:32:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1382,
												"nodeType": "EmitStatement",
												"src": "10358:37:5"
											}
										]
									},
									"documentation": {
										"id": 1340,
										"nodeType": "StructuredDocumentation",
										"src": "9615:412:5",
										"text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
									},
									"id": 1384,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "10041:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1347,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1342,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10067:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1384,
												"src": "10059:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1341,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10059:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1344,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10090:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1384,
												"src": "10082:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1343,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10082:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1346,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10115:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1384,
												"src": "10107:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1345,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10107:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10049:78:5"
									},
									"returnParameters": {
										"id": 1348,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10145:0:5"
									},
									"scope": 1450,
									"src": "10032:370:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1426,
										"nodeType": "Block",
										"src": "10799:321:5",
										"statements": [
											{
												"assignments": [
													1395
												],
												"declarations": [
													{
														"constant": false,
														"id": 1395,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "10817:16:5",
														"nodeType": "VariableDeclaration",
														"scope": 1426,
														"src": "10809:24:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1394,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10809:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1400,
												"initialValue": {
													"arguments": [
														{
															"id": 1397,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1387,
															"src": "10846:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1398,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1389,
															"src": "10853:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1396,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1004,
														"src": "10836:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 1399,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10836:25:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10809:52:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1407,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1401,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1395,
														"src": "10875:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1404,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10900:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 1403,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10900:7:5",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 1402,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "10895:4:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 1405,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10895:13:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 1406,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "10895:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10875:37:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1425,
												"nodeType": "IfStatement",
												"src": "10871:243:5",
												"trueBody": {
													"id": 1424,
													"nodeType": "Block",
													"src": "10914:200:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1411,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1409,
																			"name": "currentAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1395,
																			"src": "10936:16:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"id": 1410,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1391,
																			"src": "10956:6:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "10936:26:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"id": 1412,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10964:31:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		},
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		}
																	],
																	"id": 1408,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "10928:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1413,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10928:68:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1414,
															"nodeType": "ExpressionStatement",
															"src": "10928:68:5"
														},
														{
															"id": 1423,
															"nodeType": "UncheckedBlock",
															"src": "11010:94:5",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 1416,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1387,
																				"src": "11047:5:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 1417,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1389,
																				"src": "11054:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1420,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1418,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1395,
																					"src": "11063:16:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 1419,
																					"name": "amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1391,
																					"src": "11082:6:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11063:25:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1415,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1384,
																			"src": "11038:8:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																				"typeString": "function (address,address,uint256)"
																			}
																		},
																		"id": 1421,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11038:51:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 1422,
																	"nodeType": "ExpressionStatement",
																	"src": "11038:51:5"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1385,
										"nodeType": "StructuredDocumentation",
										"src": "10408:266:5",
										"text": " @dev Spend `amount` form the allowance of `owner` toward `spender`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."
									},
									"id": 1427,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "10688:15:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1392,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1387,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10721:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1427,
												"src": "10713:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1386,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10713:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1389,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10744:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1427,
												"src": "10736:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1388,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10736:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1391,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10769:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1427,
												"src": "10761:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1390,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10761:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10703:78:5"
									},
									"returnParameters": {
										"id": 1393,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10799:0:5"
									},
									"scope": 1450,
									"src": "10679:441:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1437,
										"nodeType": "Block",
										"src": "11823:2:5",
										"statements": []
									},
									"documentation": {
										"id": 1428,
										"nodeType": "StructuredDocumentation",
										"src": "11126:573:5",
										"text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 1438,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "11713:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1435,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1430,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "11751:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1438,
												"src": "11743:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1429,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11743:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1432,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "11773:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 1438,
												"src": "11765:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1431,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11765:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1434,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "11793:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1438,
												"src": "11785:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1433,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11785:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11733:72:5"
									},
									"returnParameters": {
										"id": 1436,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11823:0:5"
									},
									"scope": 1450,
									"src": "11704:121:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1448,
										"nodeType": "Block",
										"src": "12531:2:5",
										"statements": []
									},
									"documentation": {
										"id": 1439,
										"nodeType": "StructuredDocumentation",
										"src": "11831:577:5",
										"text": " @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 1449,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfer",
									"nameLocation": "12422:19:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1446,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1441,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12459:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1449,
												"src": "12451:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1440,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12451:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1443,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12481:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 1449,
												"src": "12473:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1442,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12473:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1445,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12501:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1449,
												"src": "12493:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1444,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12493:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12441:72:5"
									},
									"returnParameters": {
										"id": 1447,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12531:0:5"
									},
									"scope": 1450,
									"src": "12413:120:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1451,
							"src": "1312:11223:5",
							"usedErrors": []
						}
					],
					"src": "33:12502:5"
				},
				"id": 5
			},
			"brownie_projects/bebu_finance/contracts/utils/token/IERC20.sol": {
				"ast": {
					"absolutePath": "brownie_projects/bebu_finance/contracts/utils/token/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							1528
						]
					},
					"id": 1529,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1452,
							"literals": [
								"solidity",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1453,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:6",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 1528,
							"linearizedBaseContracts": [
								1528
							],
							"name": "IERC20",
							"nameLocation": "212:6:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1454,
										"nodeType": "StructuredDocumentation",
										"src": "225:66:6",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 1459,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "305:11:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1455,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "316:2:6"
									},
									"returnParameters": {
										"id": 1458,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1457,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1459,
												"src": "342:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1456,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "342:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "341:9:6"
									},
									"scope": 1528,
									"src": "296:55:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1460,
										"nodeType": "StructuredDocumentation",
										"src": "357:72:6",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 1467,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "443:9:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1463,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1462,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "461:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 1467,
												"src": "453:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1461,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "453:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "452:17:6"
									},
									"returnParameters": {
										"id": 1466,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1465,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1467,
												"src": "493:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1464,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "493:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "492:9:6"
									},
									"scope": 1528,
									"src": "434:68:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1468,
										"nodeType": "StructuredDocumentation",
										"src": "508:202:6",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 1477,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "724:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1473,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1470,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "741:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 1477,
												"src": "733:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1469,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "733:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1472,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "753:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1477,
												"src": "745:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1471,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "745:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "732:28:6"
									},
									"returnParameters": {
										"id": 1476,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1475,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1477,
												"src": "779:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1474,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "779:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "778:6:6"
									},
									"scope": 1528,
									"src": "715:70:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1478,
										"nodeType": "StructuredDocumentation",
										"src": "791:264:6",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 1487,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1069:9:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1483,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1480,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1087:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1487,
												"src": "1079:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1479,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1079:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1482,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1102:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 1487,
												"src": "1094:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1481,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1094:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1078:32:6"
									},
									"returnParameters": {
										"id": 1486,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1485,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1487,
												"src": "1134:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1484,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1134:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1133:9:6"
									},
									"scope": 1528,
									"src": "1060:83:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1488,
										"nodeType": "StructuredDocumentation",
										"src": "1149:642:6",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 1497,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "1805:7:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1493,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1490,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1821:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 1497,
												"src": "1813:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1489,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1813:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1492,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1838:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1497,
												"src": "1830:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1491,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1830:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1812:33:6"
									},
									"returnParameters": {
										"id": 1496,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1495,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1497,
												"src": "1864:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1494,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1864:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1863:6:6"
									},
									"scope": 1528,
									"src": "1796:74:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1498,
										"nodeType": "StructuredDocumentation",
										"src": "1876:287:6",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 1509,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2177:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1505,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1500,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2207:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1509,
												"src": "2199:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1499,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2199:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1502,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2229:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 1509,
												"src": "2221:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1501,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2221:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1504,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2249:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1509,
												"src": "2241:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1503,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2241:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2189:72:6"
									},
									"returnParameters": {
										"id": 1508,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1507,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1509,
												"src": "2280:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1506,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2280:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2279:6:6"
									},
									"scope": 1528,
									"src": "2168:118:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1510,
										"nodeType": "StructuredDocumentation",
										"src": "2292:158:6",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 1518,
									"name": "Transfer",
									"nameLocation": "2461:8:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1517,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1512,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2486:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1518,
												"src": "2470:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1511,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2470:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1514,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2508:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 1518,
												"src": "2492:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1513,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2492:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1516,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2520:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1518,
												"src": "2512:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1515,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2512:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2469:57:6"
									},
									"src": "2455:72:6"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1519,
										"nodeType": "StructuredDocumentation",
										"src": "2533:148:6",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 1527,
									"name": "Approval",
									"nameLocation": "2692:8:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1526,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1521,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2717:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1527,
												"src": "2701:21:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1520,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2701:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1523,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2740:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 1527,
												"src": "2724:23:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1522,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2724:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1525,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2757:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1527,
												"src": "2749:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1524,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2749:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2700:63:6"
									},
									"src": "2686:78:6"
								}
							],
							"scope": 1529,
							"src": "202:2564:6",
							"usedErrors": []
						}
					],
					"src": "106:2660:6"
				},
				"id": 6
			},
			"brownie_projects/bebu_finance/contracts/utils/token/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "brownie_projects/bebu_finance/contracts/utils/token/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							1528
						],
						"IERC20Metadata": [
							1553
						]
					},
					"id": 1554,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1530,
							"literals": [
								"solidity",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:7"
						},
						{
							"absolutePath": "brownie_projects/bebu_finance/contracts/utils/token/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 1531,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1554,
							"sourceUnit": 1529,
							"src": "58:22:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1533,
										"name": "IERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1528,
										"src": "227:6:7"
									},
									"id": 1534,
									"nodeType": "InheritanceSpecifier",
									"src": "227:6:7"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1532,
								"nodeType": "StructuredDocumentation",
								"src": "82:116:7",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"
							},
							"fullyImplemented": false,
							"id": 1553,
							"linearizedBaseContracts": [
								1553,
								1528
							],
							"name": "IERC20Metadata",
							"nameLocation": "209:14:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1535,
										"nodeType": "StructuredDocumentation",
										"src": "240:54:7",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 1540,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "308:4:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1536,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "312:2:7"
									},
									"returnParameters": {
										"id": 1539,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1538,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1540,
												"src": "338:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1537,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "338:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "337:15:7"
									},
									"scope": 1553,
									"src": "299:54:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1541,
										"nodeType": "StructuredDocumentation",
										"src": "359:56:7",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 1546,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "429:6:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1542,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "435:2:7"
									},
									"returnParameters": {
										"id": 1545,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1544,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1546,
												"src": "461:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1543,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "461:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "460:15:7"
									},
									"scope": 1553,
									"src": "420:56:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1547,
										"nodeType": "StructuredDocumentation",
										"src": "482:65:7",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 1552,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "561:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1548,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "569:2:7"
									},
									"returnParameters": {
										"id": 1551,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1550,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1552,
												"src": "595:5:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1549,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "595:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "594:7:7"
									},
									"scope": 1553,
									"src": "552:50:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1554,
							"src": "199:405:7",
							"usedErrors": []
						}
					],
					"src": "33:571:7"
				},
				"id": 7
			},
			"brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol": {
				"ast": {
					"absolutePath": "brownie_projects/bebu_finance/contracts/utils/token/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							329
						],
						"IERC20": [
							1528
						],
						"SafeERC20": [
							1778
						],
						"SafeMath": [
							862
						]
					},
					"id": 1779,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1555,
							"literals": [
								"solidity",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:8"
						},
						{
							"absolutePath": "brownie_projects/bebu_finance/contracts/utils/token/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 1556,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1779,
							"sourceUnit": 1529,
							"src": "58:22:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "brownie_projects/bebu_finance/contracts/utils/math/SafeMath.sol",
							"file": "../math/SafeMath.sol",
							"id": 1557,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1779,
							"sourceUnit": 863,
							"src": "81:30:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "brownie_projects/bebu_finance/contracts/utils/Address.sol",
							"file": "../Address.sol",
							"id": 1558,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1779,
							"sourceUnit": 330,
							"src": "112:24:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1559,
								"nodeType": "StructuredDocumentation",
								"src": "138:457:8",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 1778,
							"linearizedBaseContracts": [
								1778
							],
							"name": "SafeERC20",
							"nameLocation": "604:9:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 1562,
									"libraryName": {
										"id": 1560,
										"name": "Address",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 329,
										"src": "626:7:8"
									},
									"nodeType": "UsingForDirective",
									"src": "620:26:8",
									"typeName": {
										"id": 1561,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "638:7:8",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 1584,
										"nodeType": "Block",
										"src": "724:103:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1573,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1565,
															"src": "754:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$1528",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 1576,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1565,
																			"src": "784:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$1528",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 1577,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1477,
																		"src": "784:14:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 1578,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "784:23:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 1579,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1567,
																	"src": "809:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1580,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1569,
																	"src": "813:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1574,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "761:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1575,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "761:22:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 1581,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "761:58:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$1528",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1572,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1777,
														"src": "734:19:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1528_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 1582,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "734:86:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1583,
												"nodeType": "ExpressionStatement",
												"src": "734:86:8"
											}
										]
									},
									"id": 1585,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "661:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1570,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1565,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "681:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1585,
												"src": "674:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1528",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1564,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1563,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1528,
														"src": "674:6:8"
													},
													"referencedDeclaration": 1528,
													"src": "674:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1528",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1567,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "696:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 1585,
												"src": "688:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1566,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "688:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1569,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "708:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1585,
												"src": "700:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1568,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "700:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "673:41:8"
									},
									"returnParameters": {
										"id": 1571,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "724:0:8"
									},
									"scope": 1778,
									"src": "652:175:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1610,
										"nodeType": "Block",
										"src": "923:113:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1598,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1588,
															"src": "953:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$1528",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 1601,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1588,
																			"src": "983:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$1528",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 1602,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1509,
																		"src": "983:18:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 1603,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "983:27:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 1604,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1590,
																	"src": "1012:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1605,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1592,
																	"src": "1018:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1606,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1594,
																	"src": "1022:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1599,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "960:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1600,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "960:22:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 1607,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "960:68:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$1528",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1597,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1777,
														"src": "933:19:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1528_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 1608,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "933:96:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1609,
												"nodeType": "ExpressionStatement",
												"src": "933:96:8"
											}
										]
									},
									"id": 1611,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "842:16:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1595,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1588,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "866:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1611,
												"src": "859:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1528",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1587,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1586,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1528,
														"src": "859:6:8"
													},
													"referencedDeclaration": 1528,
													"src": "859:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1528",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1590,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "881:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1611,
												"src": "873:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1589,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "873:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1592,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "895:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 1611,
												"src": "887:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1591,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "887:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1594,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "907:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1611,
												"src": "899:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1593,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "899:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "858:55:8"
									},
									"returnParameters": {
										"id": 1596,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "923:0:8"
									},
									"scope": 1778,
									"src": "833:203:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1654,
										"nodeType": "Block",
										"src": "1372:497:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1638,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1625,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1623,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1619,
																			"src": "1621:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1624,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1630:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1621:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 1626,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1620:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1636,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 1631,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "1661:4:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20_$1778",
																								"typeString": "library SafeERC20"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20_$1778",
																								"typeString": "library SafeERC20"
																							}
																						],
																						"id": 1630,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "1653:7:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 1629,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "1653:7:8",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 1632,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "1653:13:8",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 1633,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1617,
																					"src": "1668:7:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 1627,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1615,
																					"src": "1637:5:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$1528",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 1628,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1487,
																				"src": "1637:15:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 1634,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1637:39:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1635,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1680:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1637:44:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 1637,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1636:46:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1620:62:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 1639,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1696:56:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 1622,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1599:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1640,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1599:163:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1641,
												"nodeType": "ExpressionStatement",
												"src": "1599:163:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1643,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1615,
															"src": "1792:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$1528",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 1646,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1615,
																			"src": "1822:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$1528",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 1647,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1497,
																		"src": "1822:13:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 1648,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1822:22:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 1649,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1617,
																	"src": "1846:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1650,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1619,
																	"src": "1855:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1644,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1799:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1645,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1799:22:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 1651,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1799:62:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$1528",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1642,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1777,
														"src": "1772:19:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1528_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 1652,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1772:90:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1653,
												"nodeType": "ExpressionStatement",
												"src": "1772:90:8"
											}
										]
									},
									"documentation": {
										"id": 1612,
										"nodeType": "StructuredDocumentation",
										"src": "1042:249:8",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 1655,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "1305:11:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1620,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1615,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1324:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1655,
												"src": "1317:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1528",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1614,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1613,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1528,
														"src": "1317:6:8"
													},
													"referencedDeclaration": 1528,
													"src": "1317:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1528",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1617,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1339:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1655,
												"src": "1331:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1616,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1331:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1619,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1356:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1655,
												"src": "1348:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1618,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1348:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1316:46:8"
									},
									"returnParameters": {
										"id": 1621,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1372:0:8"
									},
									"scope": 1778,
									"src": "1296:573:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1690,
										"nodeType": "Block",
										"src": "1961:194:8",
										"statements": [
											{
												"assignments": [
													1666
												],
												"declarations": [
													{
														"constant": false,
														"id": 1666,
														"mutability": "mutable",
														"name": "newAllowance",
														"nameLocation": "1979:12:8",
														"nodeType": "VariableDeclaration",
														"scope": 1690,
														"src": "1971:20:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1665,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1971:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1677,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1676,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1671,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "2018:4:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_SafeERC20_$1778",
																			"typeString": "library SafeERC20"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_SafeERC20_$1778",
																			"typeString": "library SafeERC20"
																		}
																	],
																	"id": 1670,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2010:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1669,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2010:7:8",
																		"typeDescriptions": {}
																	}
																},
																"id": 1672,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2010:13:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 1673,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1660,
																"src": "2025:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 1667,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1658,
																"src": "1994:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$1528",
																	"typeString": "contract IERC20"
																}
															},
															"id": 1668,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "allowance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1487,
															"src": "1994:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address,address) view external returns (uint256)"
															}
														},
														"id": 1674,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1994:39:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 1675,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1662,
														"src": "2036:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1994:47:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1971:70:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1679,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1658,
															"src": "2071:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$1528",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 1682,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1658,
																			"src": "2101:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$1528",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 1683,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1497,
																		"src": "2101:13:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 1684,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2101:22:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 1685,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1660,
																	"src": "2125:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1686,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1666,
																	"src": "2134:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1680,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2078:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1681,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2078:22:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 1687,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2078:69:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$1528",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1678,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1777,
														"src": "2051:19:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1528_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 1688,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2051:97:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1689,
												"nodeType": "ExpressionStatement",
												"src": "2051:97:8"
											}
										]
									},
									"id": 1691,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "1884:21:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1663,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1658,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1913:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1691,
												"src": "1906:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1528",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1657,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1656,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1528,
														"src": "1906:6:8"
													},
													"referencedDeclaration": 1528,
													"src": "1906:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1528",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1660,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1928:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1691,
												"src": "1920:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1659,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1920:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1662,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1945:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1691,
												"src": "1937:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1661,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1937:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1905:46:8"
									},
									"returnParameters": {
										"id": 1664,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1961:0:8"
									},
									"scope": 1778,
									"src": "1875:280:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1738,
										"nodeType": "Block",
										"src": "2247:370:8",
										"statements": [
											{
												"id": 1737,
												"nodeType": "UncheckedBlock",
												"src": "2257:354:8",
												"statements": [
													{
														"assignments": [
															1702
														],
														"declarations": [
															{
																"constant": false,
																"id": 1702,
																"mutability": "mutable",
																"name": "oldAllowance",
																"nameLocation": "2289:12:8",
																"nodeType": "VariableDeclaration",
																"scope": 1737,
																"src": "2281:20:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1701,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2281:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1711,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1707,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2328:4:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$1778",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$1778",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 1706,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2320:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1705,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2320:7:8",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1708,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2320:13:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1709,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1696,
																	"src": "2335:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 1703,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1694,
																	"src": "2304:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$1528",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 1704,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1487,
																"src": "2304:15:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 1710,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2304:39:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2281:62:8"
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1715,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1713,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1702,
																		"src": "2365:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">=",
																	"rightExpression": {
																		"id": 1714,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1698,
																		"src": "2381:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2365:21:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 1716,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2388:43:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	},
																	"value": "SafeERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	}
																],
																"id": 1712,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2357:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 1717,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2357:75:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1718,
														"nodeType": "ExpressionStatement",
														"src": "2357:75:8"
													},
													{
														"assignments": [
															1720
														],
														"declarations": [
															{
																"constant": false,
																"id": 1720,
																"mutability": "mutable",
																"name": "newAllowance",
																"nameLocation": "2454:12:8",
																"nodeType": "VariableDeclaration",
																"scope": 1737,
																"src": "2446:20:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1719,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2446:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1724,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1723,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1721,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1702,
																"src": "2469:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 1722,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1698,
																"src": "2484:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2469:20:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2446:43:8"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 1726,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1694,
																	"src": "2523:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$1528",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"expression": {
																					"id": 1729,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1694,
																					"src": "2553:5:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$1528",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 1730,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1497,
																				"src": "2553:13:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 1731,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "2553:22:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		{
																			"id": 1732,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1696,
																			"src": "2577:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1733,
																			"name": "newAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1720,
																			"src": "2586:12:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 1727,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "2530:3:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 1728,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "encodeWithSelector",
																		"nodeType": "MemberAccess",
																		"src": "2530:22:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes4) pure returns (bytes memory)"
																		}
																	},
																	"id": 1734,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2530:69:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$1528",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 1725,
																"name": "_callOptionalReturn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1777,
																"src": "2503:19:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1528_$_t_bytes_memory_ptr_$returns$__$",
																	"typeString": "function (contract IERC20,bytes memory)"
																}
															},
															"id": 1735,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2503:97:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1736,
														"nodeType": "ExpressionStatement",
														"src": "2503:97:8"
													}
												]
											}
										]
									},
									"id": 1739,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "2170:21:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1699,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1694,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2199:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1739,
												"src": "2192:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1528",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1693,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1692,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1528,
														"src": "2192:6:8"
													},
													"referencedDeclaration": 1528,
													"src": "2192:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1528",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1696,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2214:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1739,
												"src": "2206:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1695,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2206:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1698,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2231:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1739,
												"src": "2223:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1697,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2223:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2191:46:8"
									},
									"returnParameters": {
										"id": 1700,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2247:0:8"
									},
									"scope": 1778,
									"src": "2161:456:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1776,
										"nodeType": "Block",
										"src": "3070:636:8",
										"statements": [
											{
												"assignments": [
													1749
												],
												"declarations": [
													{
														"constant": false,
														"id": 1749,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "3432:10:8",
														"nodeType": "VariableDeclaration",
														"scope": 1776,
														"src": "3419:23:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1748,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3419:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1758,
												"initialValue": {
													"arguments": [
														{
															"id": 1755,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1745,
															"src": "3473:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 1756,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3479:34:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1752,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1743,
																	"src": "3453:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$1528",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$1528",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 1751,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3445:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1750,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3445:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1753,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3445:14:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1754,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 89,
														"src": "3445:27:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 1757,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3445:69:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3419:95:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1762,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1759,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1749,
															"src": "3528:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1760,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3528:17:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1761,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3548:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3528:21:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1775,
												"nodeType": "IfStatement",
												"src": "3524:176:8",
												"trueBody": {
													"id": 1774,
													"nodeType": "Block",
													"src": "3551:149:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1766,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1749,
																				"src": "3623:10:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 1768,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "3636:4:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 1767,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "3636:4:8",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 1769,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "3635:6:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 1764,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "3612:3:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 1765,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "3612:10:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 1770,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3612:30:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
																		"id": 1771,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3644:44:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		},
																		"value": "SafeERC20: ERC20 operation did not succeed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		}
																	],
																	"id": 1763,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "3604:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1772,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3604:85:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1773,
															"nodeType": "ExpressionStatement",
															"src": "3604:85:8"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1740,
										"nodeType": "StructuredDocumentation",
										"src": "2623:372:8",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 1777,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "3009:19:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1746,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1743,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3036:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1777,
												"src": "3029:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1528",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1742,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1741,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1528,
														"src": "3029:6:8"
													},
													"referencedDeclaration": 1528,
													"src": "3029:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1528",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1745,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3056:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1777,
												"src": "3043:17:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1744,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3043:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3028:33:8"
									},
									"returnParameters": {
										"id": 1747,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3070:0:8"
									},
									"scope": 1778,
									"src": "3000:706:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1779,
							"src": "596:3112:8",
							"usedErrors": []
						}
					],
					"src": "33:3675:8"
				},
				"id": 8
			}
		}
	}
}